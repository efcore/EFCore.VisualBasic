Imports System.ComponentModel
Imports System.Linq.Expressions
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Design
Imports EntityFrameworkCore.VisualBasic.Design.AnnotationCodeGeneratorProvider
Imports EntityFrameworkCore.VisualBasic.Design.Internal
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports EntityFrameworkCore.VisualBasic.Migrations.Design.VisualBasicMigrationsGeneratorTests
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal
Imports Microsoft.EntityFrameworkCore.Design
Imports Microsoft.EntityFrameworkCore.Diagnostics
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Builders
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.Query.SqlExpressions
Imports Microsoft.EntityFrameworkCore.Scaffolding
Imports Microsoft.EntityFrameworkCore.Sqlite.Design.Internal
Imports Microsoft.EntityFrameworkCore.SqlServer.Design.Internal
Imports Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports Microsoft.EntityFrameworkCore.ValueGeneration.Internal
Imports Microsoft.Extensions.DependencyInjection
Imports NetTopologySuite
Imports NetTopologySuite.Geometries
Imports Newtonsoft.Json.Linq
Imports Xunit
Imports System.Data

Namespace Global
    Public Class GlobalNamespaceContext
        Inherits ContextBase

        Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
            MyBase.OnModelCreating(modelBuilder)

            modelBuilder.Entity("1",
                Sub(e)
                    e.Property(Of Integer)("Id")
                    e.HasKey("Id")
                End Sub)
        End Sub
    End Class
End Namespace

Namespace Scaffolding.Internal

    Public Class VisualBasicRuntimeModelCodeGeneratorTest

        <ConditionalFact>
        Public Sub Self_referential_property()
            Test(New TestModel.Internal.SelfReferentialDbContext(),
                CreateCompiledModelCodeGenerationOptions(),
                assertModel:=Sub(Model)
                                 Assert.Single(Model.GetEntityTypes())
                                 Assert.Same(Model, Model.FindRuntimeAnnotationValue("ReadOnlyModel"))
                             End Sub
            )
        End Sub

        <ConditionalFact>
        Public Sub Empty_model()

            Dim rm1 As String =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.EmptyContext))>
    Public Partial Class EmptyContextModel
        Inherits RuntimeModel

        Private Shared _Instance As EmptyContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New EmptyContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 As String =
            <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class EmptyContextModel

        Private Sub Initialize()
        End Sub
    End Class
End Namespace
]]>.Value

            Test(New EmptyContext(),
                 CreateCompiledModelCodeGenerationOptions(),
                 Sub(code)
                     Assert.
                        Collection(code,
                                   Sub(c) AssertFileContents("EmptyContextModel.vb", rm1, c),
                                   Sub(c) AssertFileContents("EmptyContextModelBuilder.vb", rm2, c))
                 End Sub,
                Sub(Model)
                    Assert.Empty(Model.GetEntityTypes())
                    Assert.Same(Model, Model.FindRuntimeAnnotationValue("ReadOnlyModel"))
                End Sub)
        End Sub

        Public Class EmptyContext
            Inherits ContextBase
        End Class

        <ConditionalFact>
        Public Sub Global_Namespace_works()
            Test(New GlobalNamespaceContext(),
                New CompiledModelCodeGenerationOptions With {
                    .Language = "VB",
                    .ModelNamespace = String.Empty
                },
                Sub(code)
                    Assert.All(code, Sub(f) Assert.DoesNotContain("Namespace ", f.Code))
                End Sub,
                Sub(Model)
                    Assert.NotNull(Model.FindEntityType("1"))
                End Sub)
        End Sub

        <ConditionalFact>
        Public Sub Throws_for_constructor_binding()
            Test(
                New ConstructorBindingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelConstructorBinding("Lazy", "Customize()", "LazyEntityType"))
        End Sub

        Public Class ConstructorBindingContext
            Inherits ContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "Lazy", Sub(e)
                                e.Property(Of Integer)("Id")
                                e.HasKey("Id")
                                DirectCast(e.Metadata, EntityType).ConstructorBinding = New ConstructorBinding(
                                    GetType(Object).GetConstructor(Type.EmptyTypes),
                                    Array.Empty(Of ParameterBinding)())
                            End Sub)
            End Sub

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                MyBase.OnConfiguring(options.UseLazyLoadingProxies())
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Manual_lazy_loading()
            Test(
                New LazyLoadingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                assertModel:=Sub(Model)
                                 Dim lazyConstructorEntity = Model.FindEntityType(GetType(LazyConstructorEntity))
                                 Dim lazyParameterBinding = lazyConstructorEntity.ConstructorBinding.ParameterBindings.Single()
                                 Assert.Equal(GetType(ILazyLoader), lazyParameterBinding.ParameterType)
                                 Dim lazyPropertyEntity = Model.FindEntityType(GetType(LazyPropertyEntity))
                                 Dim lazyServiceProperty = lazyPropertyEntity.GetServiceProperties().Single()
                                 Assert.Equal(GetType(ILazyLoader), lazyServiceProperty.ClrType)
                             End Sub)
        End Sub

        Public Class LazyLoadingContext
            Inherits ContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of LazyConstructorEntity)()
            End Sub
        End Class

        Public Class LazyConstructorEntity
            Private ReadOnly _loader As ILazyLoader

            Public Sub New(loader As ILazyLoader)
                _loader = loader
            End Sub

            Public Property Id As Integer

            Public Property LazyPropertyEntity As LazyPropertyEntity
        End Class

        Public Class LazyPropertyEntity
            Public Property Loader As ILazyLoader
            Public Property Id As Integer
            Public Property LazyConstructorEntityId As Integer

            Public Property LazyConstructorEntity As LazyConstructorEntity
        End Class

        <ConditionalFact>
        Public Sub Throws_for_query_filter()
            Test(New QueryFilterContext(),
                 CreateCompiledModelCodeGenerationOptions(),
                 expectedExceptionMessage:=DesignStrings.CompiledModelQueryFilter("QueryFilter"))
        End Sub

        Public Class QueryFilterContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "QueryFilter", Sub(e)
                                       e.Property(Of Integer)("Id")
                                       e.HasKey("Id")
                                       e.HasQueryFilter(DirectCast(Function(x) x IsNot Nothing, Expression(Of Func(Of Dictionary(Of String, Object), Boolean))))
                                   End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_defining_query()
            Test(
                New DefiningQueryContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelDefiningQuery("object"))
        End Sub

        Public Class DefiningQueryContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of Object)(Sub(e)
                                                   e.Property(Of Integer)("Id")
                                                   e.HasKey("Id")
                                                   e.Metadata.SetInMemoryQuery(DirectCast(Function() [Set](Of Object)(), Expression(Of Func(Of IQueryable(Of Object)))))
                                               End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_value_generator()
            Test(
                New ValueGeneratorContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelValueGenerator(
                    "MyEntity", "Id", NameOf(PropertyBuilder.HasValueGeneratorFactory)))
        End Sub

        Public Class ValueGeneratorContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity", Sub(e)
                                    e.Property(Of Integer)("Id").
                                                        HasValueGenerator(Function(p, en) Nothing)
                                    e.HasKey("Id")
                                End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_value_converter()
            Test(New ValueConverterContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelValueConverter(
                    "MyEntity", "Id", NameOf(PropertyBuilder.HasConversion)))
        End Sub

        Public Class ValueConverterContext
            Inherits ContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity", Sub(e)
                                    e.Property(Of Integer)("Id").HasConversion(Function(i) i, Function(i) i)
                                    e.HasKey("Id")
                                End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_value_comparer()
            Test(New ValueComparerContext(),
             CreateCompiledModelCodeGenerationOptions(),
             expectedExceptionMessage:=DesignStrings.CompiledModelValueComparer(
                "MyEntity", "Id", NameOf(PropertyBuilder.HasConversion)))
        End Sub

        Public Class ValueComparerContext
            Inherits ContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)

                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity", Sub(e)
                                    e.Property(Of Integer)("Id").
                                            HasConversion(GetType(Integer), New FakeValueComparer())
                                    e.HasKey("Id")
                                End Sub)
            End Sub
        End Class

        Private Class FakeValueComparer
            Inherits ValueComparer(Of Integer)

            Public Sub New()
                MyBase.New(False)
            End Sub

            Public Overrides ReadOnly Property Type As Type = GetType(Integer)

            Public Overrides Function Equals(left As Object, right As Object) As Boolean
                Throw New NotImplementedException()
            End Function

            Public Overrides Function GetHashCode(instance As Object) As Integer
                Throw New NotImplementedException()
            End Function

            Public Overrides Function Snapshot(instance As Object) As Object
                Throw New NotImplementedException()
            End Function
        End Class

        <ConditionalFact>
        Public Sub Throws_for_provider_value_comparer()
            Test(
                New ProviderValueComparerContext,
                New CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelValueComparer(
                    "MyEntity", "Id", NameOf(PropertyBuilder.HasConversion)))
        End Sub

        Public Class ProviderValueComparerContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity",
                    Sub(e)
                        e.Property(Of Integer)("Id").HasConversion(GetType(Integer), Nothing, New FakeValueComparer())
                        e.HasKey("Id")
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_custom_type_mapping()
            Test(
                New TypeMappingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelTypeMapping(
                    "MyEntity", "Id", "Customize()", "MyEntityEntityType"))
        End Sub

        Public Class TypeMappingContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity",
                    Sub(e)
                        e.Property(Of Integer)("Id").
                            Metadata.SetTypeMapping(New InMemoryTypeMapping(GetType(Integer)))
                        e.HasKey("Id")
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_custom_function_translation()
            Test(
                New FunctionTranslationContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=RelationalStrings.CompiledModelFunctionTranslation("GetSqlFragmentShared"))
        End Sub

        Public Class FunctionTranslationContext
            Inherits SqlServerContextBase

            Public Shared Function GetSqlFragmentShared() As String
                Throw New NotImplementedException()
            End Function

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    HasDbFunction(GetType(FunctionTranslationContext).
                    GetMethod(NameOf(GetSqlFragmentShared))).
                    HasTranslation(Function(args) New SqlFragmentExpression("NULL"))
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_custom_function_type_mapping()
            Test(
                New FunctionTypeMappingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=RelationalStrings.CompiledModelFunctionTypeMapping(
                    "GetSqlFragmentShared", "Customize()", "FunctionTypeMappingContextModel"))
        End Sub

        Public Class FunctionTypeMappingContext
            Inherits SqlServerContextBase

            Public Shared Function GetSqlFragmentShared(param As String) As String
                Throw New NotImplementedException()
            End Function

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    HasDbFunction(GetType(FunctionTypeMappingContext).
                    GetMethod(NameOf(GetSqlFragmentShared))).
                    Metadata.TypeMapping = New StringTypeMapping("varchar", DbType.AnsiString)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_custom_function_parameter_type_mapping()
            Test(
                New FunctionParameterTypeMappingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=RelationalStrings.CompiledModelFunctionParameterTypeMapping(
                    "GetSqlFragmentShared", "param", "Customize()", "FunctionParameterTypeMappingContextModel"))
        End Sub

        Public Class FunctionParameterTypeMappingContext
            Inherits SqlServerContextBase

            Public Shared Function GetSqlFragmentShared(param As String) As String
                Throw New NotImplementedException()
            End Function

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    HasDbFunction(GetType(FunctionParameterTypeMappingContext).
                    GetMethod(NameOf(GetSqlFragmentShared))).
                    HasParameter("param").Metadata.TypeMapping = New StringTypeMapping("varchar", DbType.AnsiString)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Fully_qualified_model()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.TestModel.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace Internal
    <DbContext(GetType(DbContext))>
    Public Partial Class DbContextModel
        Inherits RuntimeModel

        Private Shared _Instance As DbContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New DbContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim DbContext =
            <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace Internal
    Public Partial Class DbContextModel

        Private Sub Initialize()
            Dim index = IndexEntityType.Create(Me)
            Dim internal = InternalEntityType.Create(Me)
            Dim identityUser = IdentityUserEntityType.Create(Me)
            Dim identityUser0 = IdentityUser0EntityType.Create(Me, identityUser)

            IndexEntityType.CreateAnnotations(index)
            InternalEntityType.CreateAnnotations(internal)
            IdentityUserEntityType.CreateAnnotations(identityUser)
            IdentityUser0EntityType.CreateAnnotations(identityUser0)

        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace Internal
    Friend Partial Class IndexEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Index",
                GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Index),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Guid),
                propertyInfo:=GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Index).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Index).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace Internal
    Friend Partial Class InternalEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Internal",
                GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Internal),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Long),
                propertyInfo:=GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Internal).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Internal).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e3 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.TestModels.AspNetIdentity
Imports Microsoft.EntityFrameworkCore.ValueGeneration

Namespace Internal
    Friend Partial Class IdentityUserEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.TestModels.AspNetIdentity.IdentityUser",
                GetType(IdentityUser),
                baseEntityType,
                discriminatorProperty:="Discriminator",
                discriminatorValue:="IdentityUser")

            Dim id = entityType.AddProperty(
                "Id",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<Id>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                afterSaveBehavior:=PropertySaveBehavior.Throw)

            Dim accessFailedCount = entityType.AddProperty(
                "AccessFailedCount",
                GetType(Integer),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("AccessFailedCount", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<AccessFailedCount>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim concurrencyStamp = entityType.AddProperty(
                "ConcurrencyStamp",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("ConcurrencyStamp", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<ConcurrencyStamp>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim discriminator = entityType.AddProperty(
                "Discriminator",
                GetType(String),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                valueGeneratorFactory:=AddressOf New DiscriminatorValueGeneratorFactory().Create)

            Dim email = entityType.AddProperty(
                "Email",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("Email", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<Email>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim emailConfirmed = entityType.AddProperty(
                "EmailConfirmed",
                GetType(Boolean),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("EmailConfirmed", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<EmailConfirmed>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim lockoutEnabled = entityType.AddProperty(
                "LockoutEnabled",
                GetType(Boolean),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("LockoutEnabled", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<LockoutEnabled>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim lockoutEnd = entityType.AddProperty(
                "LockoutEnd",
                GetType(DateTimeOffset?),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("LockoutEnd", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<LockoutEnd>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim normalizedEmail = entityType.AddProperty(
                "NormalizedEmail",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("NormalizedEmail", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<NormalizedEmail>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim normalizedUserName = entityType.AddProperty(
                "NormalizedUserName",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("NormalizedUserName", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<NormalizedUserName>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim passwordHash = entityType.AddProperty(
                "PasswordHash",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("PasswordHash", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<PasswordHash>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim phoneNumber = entityType.AddProperty(
                "PhoneNumber",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("PhoneNumber", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<PhoneNumber>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim phoneNumberConfirmed = entityType.AddProperty(
                "PhoneNumberConfirmed",
                GetType(Boolean),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("PhoneNumberConfirmed", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<PhoneNumberConfirmed>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim securityStamp = entityType.AddProperty(
                "SecurityStamp",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("SecurityStamp", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<SecurityStamp>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim twoFactorEnabled = entityType.AddProperty(
                "TwoFactorEnabled",
                GetType(Boolean),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("TwoFactorEnabled", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<TwoFactorEnabled>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim userName = entityType.AddProperty(
                "UserName",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("UserName", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<UserName>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e4 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace Internal
    Friend Partial Class IdentityUser0EntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.IdentityUser",
                GetType(IdentityUser),
                baseEntityType,
                discriminatorProperty:="Discriminator",
                discriminatorValue:="DerivedIdentityUser")

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim CompiledModelCodeGenerationOptions = CreateCompiledModelCodeGenerationOptions()
            CompiledModelCodeGenerationOptions.ModelNamespace = "Internal"

            Test(
                New TestModel.Internal.DbContext(),
                CompiledModelCodeGenerationOptions,
                Sub(code)
                    Assert.Collection(code,
                    Sub(c) AssertFileContents("DbContextModel.vb", rm1, c),
                    Sub(c) AssertFileContents("DbContextModelBuilder.vb", DbContext, c),
                    Sub(c) AssertFileContents("IndexEntityType.vb", e1, c),
                    Sub(c) AssertFileContents("InternalEntityType.vb", e2, c),
                    Sub(c) AssertFileContents("IdentityUserEntityType.vb", e3, c),
                    Sub(c) AssertFileContents("IdentityUser0EntityType.vb", e4, c))
                End Sub,
                Sub(Model)
                    Assert.Equal(4, Model.GetEntityTypes().Count())
                    Assert.Same(Model, Model.FindRuntimeAnnotationValue("ReadOnlyModel"))
                End Sub,
                additionalDesignTimeServices:=GetType(FullyQualifiedDesignTimeServices))
        End Sub

        Private Class FullyQualifiedDesignTimeServices
            Implements IDesignTimeServices
            Public Sub ConfigureDesignTimeServices(serviceCollection As IServiceCollection) _
                Implements IDesignTimeServices.ConfigureDesignTimeServices

                serviceCollection.AddSingleton(Of IVisualBasicHelper, FullyQualifiedVisualBasicHelper)()
            End Sub
        End Class

        Private Class FullyQualifiedVisualBasicHelper
            Inherits VisualBasicHelper

            Public Sub New(typeMappingSource As ITypeMappingSource)
                MyBase.New(typeMappingSource)
            End Sub

            Protected Overrides Function ShouldUseFullName(type As Type) As Boolean
                Return MyBase.ShouldUseFullName(type)
            End Function

            Protected Overrides Function ShouldUseFullName(shortTypeName As String) As Boolean
                Return MyBase.ShouldUseFullName(shortTypeName) OrElse
                   shortTypeName = NameOf(Index) OrElse
                   shortTypeName = NameOf(Internal)
            End Function
        End Class

        <ConditionalFact>
        Public Sub BigModel()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.BigContext))>
    Public Partial Class BigContextModel
        Inherits RuntimeModel

        Private Shared _Instance As BigContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New BigContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class BigContextModel

        Private Sub Initialize()
            Dim dependentBase = DependentBaseEntityType.Create(Me)
            Dim principalBase = PrincipalBaseEntityType.Create(Me)
            Dim ownedType = OwnedTypeEntityType.Create(Me)
            Dim ownedType0 = OwnedType0EntityType.Create(Me)
            Dim principalBasePrincipalDerivedDependentBasebyte = PrincipalBasePrincipalDerivedDependentBasebyteEntityType.Create(Me)
            Dim dependentDerived = DependentDerivedEntityType.Create(Me, dependentBase)
            Dim principalDerived = PrincipalDerivedEntityType.Create(Me, principalBase)

            DependentBaseEntityType.CreateForeignKey1(dependentBase, principalBase)
            DependentBaseEntityType.CreateForeignKey2(dependentBase, principalDerived)
            OwnedTypeEntityType.CreateForeignKey1(ownedType, principalBase)
            OwnedTypeEntityType.CreateForeignKey2(ownedType, ownedType)
            OwnedType0EntityType.CreateForeignKey1(ownedType0, principalDerived)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey1(principalBasePrincipalDerivedDependentBasebyte, principalDerived)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey2(principalBasePrincipalDerivedDependentBasebyte, principalBase)
            PrincipalDerivedEntityType.CreateForeignKey1(principalDerived, principalBase)

            PrincipalBaseEntityType.CreateSkipNavigation1(principalBase, principalDerived, principalBasePrincipalDerivedDependentBasebyte)
            PrincipalDerivedEntityType.CreateSkipNavigation1(principalDerived, principalBase, principalBasePrincipalDerivedDependentBasebyte)

            DependentBaseEntityType.CreateAnnotations(dependentBase)
            PrincipalBaseEntityType.CreateAnnotations(principalBase)
            OwnedTypeEntityType.CreateAnnotations(ownedType)
            OwnedType0EntityType.CreateAnnotations(ownedType0)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateAnnotations(principalBasePrincipalDerivedDependentBasebyte)
            DependentDerivedEntityType.CreateAnnotations(dependentDerived)
            PrincipalDerivedEntityType.CreateAnnotations(principalDerived)

            Me.AddAnnotation("Relational:MaxIdentifierLength", 128)
            Me.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
        End Sub
    End Class
End Namespace
]]>.Value
            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Migrations.Design
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.ValueGeneration
Imports NetTopologySuite.Geometries

Namespace TestNamespace
    Friend Partial Class DependentBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                baseEntityType,
                discriminatorProperty:="EnumDiscriminator",
                discriminatorValue:=VisualBasicMigrationsGeneratorTests.Enum1.One)

            Dim principalId = entityType.AddProperty(
                "PrincipalId",
                GetType(Long),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalAlternateId = entityType.AddProperty(
                "PrincipalAlternateId",
                GetType(Point),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enumDiscriminator = entityType.AddProperty(
                "EnumDiscriminator",
                GetType(VisualBasicMigrationsGeneratorTests.Enum1),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                valueGeneratorFactory:=AddressOf New DiscriminatorValueGeneratorFactory().Create)
            enumDiscriminator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Byte?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {principalId, principalAlternateId})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalId},
                unique:=True)

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                unique:=True,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalId"), declaringEntityType.FindProperty("PrincipalAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientNoAction,
                unique:=True,
                required:=True)

            Dim principal = declaringEntityType.AddNavigation("Principal",
                runtimeForeignKey,
                onDependent:=True,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Principal", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Principal", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim dependent = principalEntityType.AddNavigation("Dependent",
                runtimeForeignKey,
                onDependent:=False,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Dependent", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Dependent", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                eagerLoaded:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("DiscriminatorMappingComplete", False)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:MappingStrategy", "TPH")
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "DependentBase<byte?>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports NetTopologySuite.Geometries

Namespace TestNamespace
    Friend Partial Class PrincipalBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase),
                baseEntityType,
                discriminatorValue:="PrincipalBase")

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Long?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)

            Dim [overrides] As New StoreObjectDictionary(Of RuntimeRelationalPropertyOverrides)()
            Dim idPrincipalDerived As New RuntimeRelationalPropertyOverrides(
                id,
                StoreObjectIdentifier.Table("PrincipalDerived", Nothing),
                True,
                "DerivedId")
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.Table("PrincipalDerived", Nothing), idPrincipalDerived})
            id.AddAnnotation("Relational:RelationalOverrides", [overrides])

            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim alternateId = entityType.AddProperty(
                "AlternateId",
                GetType(Point),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("AlternateId", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.FieldDuringConstruction,
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                valueConverter:=New CastingConverter(Of Point, Point)(),
                valueComparer:=New VisualBasicRuntimeModelCodeGeneratorTest.CustomValueComparer(Of Point)(),
                providerValueComparer:=New VisualBasicRuntimeModelCodeGeneratorTest.CustomValueComparer(Of Point)())
            alternateId.AddAnnotation("Relational:ColumnType", "geometry")
            alternateId.AddAnnotation("Relational:DefaultValue", CType(New NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT Z(0 0 0)"), NetTopologySuite.Geometries.Point))
            alternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})

            Dim key0 = entityType.AddKey(
                {id, alternateId})
            entityType.SetPrimaryKey(key0)
            key0.AddAnnotation("Relational:Name", "PK")

            Dim index = entityType.AddIndex(
                {alternateId, id})

            Dim alternateIndex = entityType.AddIndex(
                {alternateId},
                name:="AlternateIndex",
                unique:=True)
            alternateIndex.AddAnnotation("Relational:Name", "AIX")

            Return entityType
        End Function

        Public Shared Function CreateSkipNavigation1(declaringEntityType As RuntimeEntityType, targetEntityType As RuntimeEntityType, joinEntityType As RuntimeEntityType) As RuntimeSkipNavigation
            Dim skipNavigation = declaringEntityType.AddSkipNavigation(
                "Deriveds",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    {joinEntityType.FindProperty("PrincipalsId"), joinEntityType.FindProperty("PrincipalsAlternateId")},
                    declaringEntityType.FindKey({declaringEntityType.FindProperty("Id"), declaringEntityType.FindProperty("AlternateId")}),
                    declaringEntityType),
                True,
                False,
                GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Deriveds", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Deriveds", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim Inverse = targetEntityType.FindSkipNavigation("Principals")
            If Inverse IsNot Nothing Then
                skipNavigation.Inverse = Inverse
                Inverse.Inverse = skipNavigation
            End If

            Return skipNavigation
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:MappingStrategy", "TPT")
            entityType.AddAnnotation("Relational:Schema", "mySchema")
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e3 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata
Imports NetTopologySuite.Geometries

Namespace TestNamespace
    Friend Partial Class OwnedTypeEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
                baseEntityType,
                sharedClrType:=True,
                changeTrackingStrategy:=ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues)

            Dim principalBaseId = entityType.AddProperty(
                "PrincipalBaseId",
                GetType(Long),
                propertyAccessMode:=PropertyAccessMode.Field,
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)

            Dim [overrides] As New StoreObjectDictionary(Of RuntimeRelationalPropertyOverrides)()
            Dim principalBaseIdPrincipalBase As New RuntimeRelationalPropertyOverrides(
                principalBaseId,
                StoreObjectIdentifier.Table("PrincipalBase", "mySchema"),
                False,
                Nothing)
            principalBaseIdPrincipalBase.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.Table("PrincipalBase", "mySchema"), principalBaseIdPrincipalBase})
            principalBaseId.AddAnnotation("Relational:RelationalOverrides", [overrides])

            principalBaseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim principalBaseAlternateId = entityType.AddProperty(
                "PrincipalBaseAlternateId",
                GetType(Point),
                propertyAccessMode:=PropertyAccessMode.Field,
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalBaseAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim details = entityType.AddProperty(
                "Details",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Details", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Details", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field,
                nullable:=True)

            Dim overrides0 As New StoreObjectDictionary(Of RuntimeRelationalPropertyOverrides)()
            Dim detailsDetails As New RuntimeRelationalPropertyOverrides(
                details,
                StoreObjectIdentifier.Table("Details", Nothing),
                False,
                Nothing)
            overrides0.GetType().GetMethod("Add").Invoke(overrides0, {StoreObjectIdentifier.Table("Details", Nothing), detailsDetails})
            details.AddAnnotation("Relational:RelationalOverrides", overrides0)

            details.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim number = entityType.AddProperty(
                "Number",
                GetType(Integer),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Number", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Number", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field)
            number.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim context = entityType.AddServiceProperty(
                "Context",
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Context", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim key = entityType.AddKey(
                {principalBaseId, principalBaseAlternateId})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalBaseId"), declaringEntityType.FindProperty("PrincipalBaseAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                unique:=True,
                required:=True,
                requiredDependent:=True,
                ownership:=True)

            Dim owned = principalEntityType.AddNavigation("Owned",
                runtimeForeignKey,
                onDependent:=False,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Owned", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ownedField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field,
                eagerLoaded:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalBaseId"), declaringEntityType.FindProperty("PrincipalBaseAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("PrincipalBaseId"), principalEntityType.FindProperty("PrincipalBaseAlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientCascade,
                unique:=True,
                required:=True,
                requiredDependent:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            Dim fragments As New StoreObjectDictionary(Of RuntimeEntityTypeMappingFragment)()
            Dim detailsFragment As New RuntimeEntityTypeMappingFragment(
                entityType,
                StoreObjectIdentifier.Table("Details", Nothing),
                Nothing)
            fragments.GetType().GetMethod("Add").Invoke(fragments, {StoreObjectIdentifier.Table("Details", Nothing), detailsFragment})
            entityType.AddAnnotation("Relational:MappingFragments", fragments)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", "mySchema")
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value
            Dim e4 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata
Imports NetTopologySuite.Geometries

Namespace TestNamespace
    Friend Partial Class OwnedType0EntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
                baseEntityType,
                sharedClrType:=True)

            Dim principalDerivedId = entityType.AddProperty(
                "PrincipalDerivedId",
                GetType(Long),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalDerivedId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalDerivedAlternateId = entityType.AddProperty(
                "PrincipalDerivedAlternateId",
                GetType(Point),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalDerivedAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim details = entityType.AddProperty(
                "Details",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Details", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Details", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            details.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim number = entityType.AddProperty(
                "Number",
                GetType(Integer),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Number", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Number", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))
            number.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim context = entityType.AddServiceProperty(
                "Context",
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Context", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim key = entityType.AddKey(
                {principalDerivedId, principalDerivedAlternateId, id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalDerivedId"), declaringEntityType.FindProperty("PrincipalDerivedAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                required:=True,
                ownership:=True)

            Dim manyOwned = principalEntityType.AddNavigation("ManyOwned",
                runtimeForeignKey,
                onDependent:=False,
                GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.OwnedType)),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("ManyOwned", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                eagerLoaded:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "ManyOwned")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)
            entityType.AddAnnotation("SqlServer:MemoryOptimized", True)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e5 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata
Imports NetTopologySuite.Geometries

Namespace TestNamespace
    Friend Partial Class PrincipalBasePrincipalDerivedDependentBasebyteEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                GetType(Dictionary(Of String, Object)),
                baseEntityType,
                sharedClrType:=True,
                indexerPropertyInfo:=RuntimeEntityType.FindIndexerProperty(GetType(Dictionary(Of String, Object))),
                propertyBag:=True)

            Dim derivedsId = entityType.AddProperty(
                "DerivedsId",
                GetType(Long),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            derivedsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim derivedsAlternateId = entityType.AddProperty(
                "DerivedsAlternateId",
                GetType(Point),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            derivedsAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalsId = entityType.AddProperty(
                "PrincipalsId",
                GetType(Long),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalsAlternateId = entityType.AddProperty(
                "PrincipalsAlternateId",
                GetType(Point),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalsAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim rowid = entityType.AddProperty(
                "rowid",
                GetType(Byte()),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                nullable:=True,
                concurrencyToken:=True,
                valueGenerated:=ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior:=PropertySaveBehavior.Ignore,
                afterSaveBehavior:=PropertySaveBehavior.Ignore)
            rowid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {derivedsId, derivedsAlternateId, principalsId, principalsAlternateId})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalsId, principalsAlternateId})

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("DerivedsId"), declaringEntityType.FindProperty("DerivedsAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalsId"), declaringEntityType.FindProperty("PrincipalsAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalBasePrincipalDerived<DependentBase<byte?>>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e6 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Migrations.Design
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class DependentDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentDerived<byte?>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)),
                baseEntityType,
                discriminatorProperty:="EnumDiscriminator",
                discriminatorValue:=VisualBasicMigrationsGeneratorTests.Enum1.Two)

            Dim data = entityType.AddProperty(
                "Data",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)).GetProperty("Data", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)).GetField("_Data", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True,
                maxLength:=20,
                unicode:=False)
            data.AddAnnotation("Relational:IsFixedLength", True)
            data.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim money = entityType.AddProperty(
                "Money",
                GetType(Decimal),
                precision:=9,
                scale:=3)
            money.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "DependentBase<byte?>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e7 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class PrincipalDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                baseEntityType,
                discriminatorValue:="PrincipalDerived<DependentBase<byte?>>")

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("Id"), declaringEntityType.FindProperty("AlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientCascade,
                unique:=True,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateSkipNavigation1(declaringEntityType As RuntimeEntityType, targetEntityType As RuntimeEntityType, joinEntityType As RuntimeEntityType) As RuntimeSkipNavigation
            Dim skipNavigation = declaringEntityType.AddSkipNavigation(
                "Principals",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    {joinEntityType.FindProperty("DerivedsId"), joinEntityType.FindProperty("DerivedsAlternateId")},
                    declaringEntityType.FindKey({declaringEntityType.FindProperty("Id"), declaringEntityType.FindProperty("AlternateId")}),
                    declaringEntityType),
                True,
                False,
                GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Principals", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Principals", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                eagerLoaded:=True)

            Dim Inverse = targetEntityType.FindSkipNavigation("Deriveds")
            If Inverse IsNot Nothing Then
                skipNavigation.Inverse = Inverse
                Inverse.Inverse = skipNavigation
            End If

            Return skipNavigation
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalDerived")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New BigContext(),
                CreateCompiledModelCodeGenerationOptions,
                Sub(code)
                    Assert.
                        Collection(code,
                        Sub(c) AssertFileContents("BigContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("BigContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DependentBaseEntityType.vb", e1, c),
                        Sub(c) AssertFileContents("PrincipalBaseEntityType.vb", e2, c),
                        Sub(c) AssertFileContents("OwnedTypeEntityType.vb", e3, c),
                        Sub(c) AssertFileContents("OwnedType0EntityType.vb", e4, c),
                        Sub(c) AssertFileContents("PrincipalBasePrincipalDerivedDependentBasebyteEntityType.vb", e5, c),
                        Sub(c) AssertFileContents("DependentDerivedEntityType.vb", e6, c),
                        Sub(c) AssertFileContents("PrincipalDerivedEntityType.vb", e7, c))
                End Sub,
                Sub(Model)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() Model.GetCollation()).Message)
                    Assert.Equal(
                        {RelationalAnnotationNames.MaxIdentifierLength, SqlServerAnnotationNames.ValueGenerationStrategy},
                        Model.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(SqlServerValueGenerationStrategy.IdentityColumn, Model.GetValueGenerationStrategy())
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetPropertyAccessMode()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.MaxDatabaseSize))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetDatabaseMaxSize()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.PerformanceLevelSql))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetPerformanceLevelSql()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.ServiceTierSql))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetServiceTierSql()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.IdentitySeed))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetIdentitySeed()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.IdentityIncrement))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetIdentityIncrement()).Message)

                    Assert.Null(Model.FindEntityType(GetType(AbstractBase)))
                    Dim MyPrincipalBase = Model.FindEntityType(GetType(PrincipalBase))
                    Assert.Equal(GetType(PrincipalBase).FullName, MyPrincipalBase.Name)
                    Assert.False(MyPrincipalBase.HasSharedClrType)
                    Assert.False(MyPrincipalBase.IsPropertyBag)
                    Assert.False(MyPrincipalBase.IsOwned())
                    Assert.Null(MyPrincipalBase.BaseType)
                    Assert.IsType(Of ConstructorBinding)(MyPrincipalBase.ConstructorBinding)
                    Assert.Null(MyPrincipalBase.FindIndexerPropertyInfo())
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, MyPrincipalBase.GetChangeTrackingStrategy())
                    Assert.Null(MyPrincipalBase.GetQueryFilter())
                    Assert.Equal("PrincipalBase", MyPrincipalBase.GetTableName())
                    Assert.Equal("mySchema", MyPrincipalBase.GetSchema())
                    Assert.Equal(CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() MyPrincipalBase.GetSeedData()).Message)

                    Dim PrincipalId = MyPrincipalBase.FindProperty(NameOf(PrincipalBase.Id))
                    Assert.Equal(
                        {RelationalAnnotationNames.RelationalOverrides, SqlServerAnnotationNames.ValueGenerationStrategy},
                        PrincipalId.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(GetType(Long?), PrincipalId.ClrType)
                    Assert.Equal(GetType(Long?), PrincipalId.PropertyInfo.PropertyType)
                    Assert.Equal(GetType(Long?), PrincipalId.FieldInfo.FieldType)
                    Assert.False(PrincipalId.IsNullable)
                    Assert.Equal(ValueGenerated.OnAdd, PrincipalId.ValueGenerated)
                    Assert.Equal(PropertySaveBehavior.Throw, PrincipalId.GetAfterSaveBehavior())
                    Assert.Equal(PropertySaveBehavior.Save, PrincipalId.GetBeforeSaveBehavior())
                    Assert.Null(PrincipalId(CoreAnnotationNames.BeforeSaveBehavior))
                    Assert.Null(PrincipalId(CoreAnnotationNames.AfterSaveBehavior))
                    Assert.Equal("Id", PrincipalId.GetColumnName())
                    Assert.Equal("Id", PrincipalId.GetColumnName(StoreObjectIdentifier.Table("PrincipalBase", "mySchema")))
                    Assert.Equal("DerivedId", PrincipalId.GetColumnName(StoreObjectIdentifier.Table("PrincipalDerived")))
                    Assert.Equal("bigint", PrincipalId.GetColumnType())
                    Assert.Null(PrincipalId.GetValueConverter())
                    Assert.NotNull(PrincipalId.GetValueComparer())
                    Assert.NotNull(PrincipalId.GetKeyValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.IdentityColumn, PrincipalId.GetValueGenerationStrategy())
                    Assert.Null(PrincipalId(SqlServerAnnotationNames.IdentitySeed))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.GetIdentitySeed()).Message)
                    Assert.Null(PrincipalId(SqlServerAnnotationNames.IdentityIncrement))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.GetIdentityIncrement()).Message)
                    Assert.Null(PrincipalId(SqlServerAnnotationNames.Sparse))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.IsSparse()).Message)

                    Dim principalAlternateId = MyPrincipalBase.FindProperty(NameOf(PrincipalBase.AlternateId))
                    Assert.Equal(GetType(Point), principalAlternateId.ClrType)
                    Assert.False(principalAlternateId.IsNullable)
                    Assert.Equal(ValueGenerated.OnAdd, principalAlternateId.ValueGenerated)
                    Assert.Equal("AlternateId", principalAlternateId.GetColumnName())
                    Assert.Equal("geometry", principalAlternateId.GetColumnType())
                    Assert.Equal(0, DirectCast(principalAlternateId.GetDefaultValue(), Point).SRID)
                    Assert.IsType(Of CastingConverter(Of Point, Point))(principalAlternateId.GetValueConverter())
                    Assert.IsType(Of CustomValueComparer(Of Point))(principalAlternateId.GetValueComparer())
                    Assert.IsType(Of CustomValueComparer(Of Point))(principalAlternateId.GetKeyValueComparer())
                    Assert.IsType(Of CustomValueComparer(Of Point))(principalAlternateId.GetProviderValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.None, principalAlternateId.GetValueGenerationStrategy())
                    Assert.Equal(PropertyAccessMode.FieldDuringConstruction, principalAlternateId.GetPropertyAccessMode())
                    Assert.Null(principalAlternateId(CoreAnnotationNames.PropertyAccessMode))

                    Assert.Null(MyPrincipalBase.FindDiscriminatorProperty())

                    Assert.Equal(2, MyPrincipalBase.GetIndexes().Count())

                    Dim compositeIndex = MyPrincipalBase.GetIndexes().First()
                    Assert.Empty(compositeIndex.GetAnnotations())
                    Assert.Equal({principalAlternateId, PrincipalId}, compositeIndex.Properties)
                    Assert.False(compositeIndex.IsUnique)
                    Assert.Null(compositeIndex.Name)
                    Assert.Equal("IX_PrincipalBase_AlternateId_Id", compositeIndex.GetDatabaseName())
                    Assert.Null(compositeIndex(SqlServerAnnotationNames.Clustered))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() compositeIndex.IsClustered()).Message)
                    Assert.Null(compositeIndex(SqlServerAnnotationNames.CreatedOnline))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() compositeIndex.IsCreatedOnline()).Message)
                    Assert.Null(compositeIndex(SqlServerAnnotationNames.FillFactor))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() compositeIndex.GetFillFactor()).Message)
                    Assert.Null(compositeIndex(SqlServerAnnotationNames.Include))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() compositeIndex.GetIncludeProperties()).Message)

                    Dim alternateIndex = MyPrincipalBase.GetIndexes().Last()
                    Assert.Same(principalAlternateId, alternateIndex.Properties.Single())
                    Assert.True(alternateIndex.IsUnique)
                    Assert.Equal("AlternateIndex", alternateIndex.Name)
                    Assert.Equal("AIX", alternateIndex.GetDatabaseName())
                    Assert.Null(alternateIndex(RelationalAnnotationNames.Filter))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() alternateIndex.GetFilter()).Message)

                    Assert.Equal({compositeIndex, alternateIndex}, principalAlternateId.GetContainingIndexes())

                    Assert.Equal(2, MyPrincipalBase.GetKeys().Count())

                    Dim principalAlternateKey = MyPrincipalBase.GetKeys().First()
                    Assert.Same(PrincipalId, principalAlternateKey.Properties.Single())
                    Assert.False(principalAlternateKey.IsPrimaryKey())
                    Assert.Equal("AK_PrincipalBase_Id", principalAlternateKey.GetName())

                    Dim principalKey = MyPrincipalBase.GetKeys().Last()
                    Assert.Equal(
                        {RelationalAnnotationNames.Name},
                        principalKey.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal({PrincipalId, principalAlternateId}, principalKey.Properties)
                    Assert.True(principalKey.IsPrimaryKey())
                    Assert.Equal("PK", principalKey.GetName())
                    Assert.Null(principalKey(SqlServerAnnotationNames.Clustered))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() principalKey.IsClustered()).Message)

                    Assert.Equal({principalAlternateKey, principalKey}, PrincipalId.GetContainingKeys())

                    Dim referenceOwnedNavigation = MyPrincipalBase.GetNavigations().Single()
                    Assert.Equal(
                        {CoreAnnotationNames.EagerLoaded},
                        referenceOwnedNavigation.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(NameOf(PrincipalBase.Owned), referenceOwnedNavigation.Name)
                    Assert.False(referenceOwnedNavigation.IsCollection)
                    Assert.True(referenceOwnedNavigation.IsEagerLoaded)
                    Assert.False(referenceOwnedNavigation.IsOnDependent)
                    Assert.Equal(GetType(OwnedType), referenceOwnedNavigation.ClrType)
                    Assert.Equal("_ownedField", referenceOwnedNavigation.FieldInfo.Name)
                    Assert.Equal(NameOf(PrincipalBase.Owned), referenceOwnedNavigation.PropertyInfo.Name)
                    Assert.Null(referenceOwnedNavigation.Inverse)
                    Assert.Equal(MyPrincipalBase, referenceOwnedNavigation.DeclaringEntityType)
                    Assert.Equal(PropertyAccessMode.Field, referenceOwnedNavigation.GetPropertyAccessMode())
                    Assert.Null(referenceOwnedNavigation(CoreAnnotationNames.PropertyAccessMode))

                    Dim referenceOwnedType = referenceOwnedNavigation.TargetEntityType
                    Assert.Equal(GetType(PrincipalBase).FullName & ".Owned#OwnedType", referenceOwnedType.Name)
                    Assert.Equal(GetType(OwnedType), referenceOwnedType.ClrType)
                    Assert.True(referenceOwnedType.HasSharedClrType)
                    Assert.False(referenceOwnedType.IsPropertyBag)
                    Assert.True(referenceOwnedType.IsOwned())
                    Assert.Null(referenceOwnedType.BaseType)
                    Assert.False(referenceOwnedType.IsMemoryOptimized())
                    Assert.IsType(Of ConstructorBinding)(referenceOwnedType.ConstructorBinding)
                    Assert.Null(referenceOwnedType.FindIndexerPropertyInfo())
                    Assert.Equal(ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues, referenceOwnedType.GetChangeTrackingStrategy())
                    Assert.Null(referenceOwnedType.GetQueryFilter())
                    Assert.Null(referenceOwnedType(CoreAnnotationNames.PropertyAccessMode))
                    Assert.Null(referenceOwnedType(CoreAnnotationNames.NavigationAccessMode))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() referenceOwnedType.GetPropertyAccessMode()).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() referenceOwnedType.GetNavigationAccessMode()).Message)

                    Dim principalTable = StoreObjectIdentifier.Create(referenceOwnedType, StoreObjectType.Table).Value

                    Dim ownedId = referenceOwnedType.FindProperty("PrincipalBaseId")
                    Assert.True(ownedId.IsPrimaryKey())
                    Assert.Equal(
                        SqlServerValueGenerationStrategy.IdentityColumn,
                        PrincipalId.GetValueGenerationStrategy(principalTable))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.GetIdentityIncrement(principalTable)).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.GetIdentitySeed(principalTable)).Message)

                    Dim ownedFragment = referenceOwnedType.GetMappingFragments().Single()
                    Assert.Equal(NameOf(OwnedType.Details),
                        referenceOwnedType.FindProperty(NameOf(OwnedType.Details)).GetColumnName(ownedFragment.StoreObject))
                    Assert.Null(referenceOwnedType.FindProperty(NameOf(OwnedType.Details)).GetColumnName(principalTable))

                    Dim referenceOwnership = referenceOwnedNavigation.ForeignKey
                    Assert.Empty(referenceOwnership.GetAnnotations())
                    Assert.Same(referenceOwnership, referenceOwnedType.FindOwnership())
                    Assert.True(referenceOwnership.IsOwnership)
                    Assert.True(referenceOwnership.IsRequired)
                    Assert.True(referenceOwnership.IsRequiredDependent)
                    Assert.True(referenceOwnership.IsUnique)
                    Assert.Null(referenceOwnership.DependentToPrincipal)
                    Assert.Same(referenceOwnedNavigation, referenceOwnership.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.Cascade, referenceOwnership.DeleteBehavior)
                    Assert.Equal(2, referenceOwnership.Properties.Count())
                    Assert.Same(principalKey, referenceOwnership.PrincipalKey)

                    Dim ownedServiceProperty = referenceOwnedType.GetServiceProperties().Single()
                    Assert.Empty(ownedServiceProperty.GetAnnotations())
                    Assert.Equal(GetType(DbContext), ownedServiceProperty.ClrType)
                    Assert.Equal(GetType(DbContext), ownedServiceProperty.PropertyInfo.PropertyType)
                    Assert.Null(ownedServiceProperty.FieldInfo)
                    Assert.Same(referenceOwnedType, ownedServiceProperty.DeclaringEntityType)
                    Dim ownedServicePropertyBinding = ownedServiceProperty.ParameterBinding
                    Assert.IsType(Of ContextParameterBinding)(ownedServicePropertyBinding)
                    Assert.Equal(GetType(DbContext), ownedServicePropertyBinding.ServiceType)
                    Assert.Equal(ownedServiceProperty, ownedServicePropertyBinding.ConsumedProperties.Single())
                    Assert.Equal(PropertyAccessMode.PreferField, ownedServiceProperty.GetPropertyAccessMode())
                    Assert.Null(ownedServiceProperty(CoreAnnotationNames.PropertyAccessMode))

                    Dim principalDerived = Model.FindEntityType(GetType(PrincipalDerived(Of DependentBase(Of Byte?))))
                    Assert.Equal(MyPrincipalBase, principalDerived.BaseType)
                    Assert.Equal("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+" &
                        "PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                        principalDerived.Name)
                    Assert.False(principalDerived.IsOwned())
                    Assert.IsType(Of ConstructorBinding)(principalDerived.ConstructorBinding)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, principalDerived.GetChangeTrackingStrategy())
                    Assert.Equal("PrincipalDerived<DependentBase<byte?>>", principalDerived.GetDiscriminatorValue())

                    Dim tptForeignKey = principalDerived.GetForeignKeys().Single()
                    Assert.False(tptForeignKey.IsOwnership)
                    Assert.True(tptForeignKey.IsRequired)
                    Assert.False(tptForeignKey.IsRequiredDependent)
                    Assert.True(tptForeignKey.IsUnique)
                    Assert.Null(tptForeignKey.DependentToPrincipal)
                    Assert.Null(tptForeignKey.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.ClientCascade, tptForeignKey.DeleteBehavior)
                    Assert.Equal(principalKey.Properties, tptForeignKey.Properties)
                    Assert.Same(principalKey, tptForeignKey.PrincipalKey)

                    Assert.Equal(2, principalDerived.GetDeclaredNavigations().Count())
                    Dim dependentNavigation = principalDerived.GetDeclaredNavigations().First()
                    Assert.Equal("Dependent", dependentNavigation.Name)
                    Assert.Equal("Dependent", dependentNavigation.PropertyInfo.Name)
                    Assert.Equal("_Dependent", dependentNavigation.FieldInfo.Name)
                    Assert.False(dependentNavigation.IsCollection)
                    Assert.True(dependentNavigation.IsEagerLoaded)
                    Assert.False(dependentNavigation.IsOnDependent)
                    Assert.Equal(principalDerived, dependentNavigation.DeclaringEntityType)
                    Assert.Equal("Principal", dependentNavigation.Inverse.Name)

                    Dim ownedCollectionNavigation = principalDerived.GetDeclaredNavigations().Last()
                    Assert.Equal("ManyOwned", ownedCollectionNavigation.Name)
                    Assert.Null(ownedCollectionNavigation.PropertyInfo)
                    Assert.Equal("ManyOwned", ownedCollectionNavigation.FieldInfo.Name)
                    Assert.Equal(GetType(ICollection(Of OwnedType)), ownedCollectionNavigation.ClrType)
                    Assert.True(ownedCollectionNavigation.IsCollection)
                    Assert.True(ownedCollectionNavigation.IsEagerLoaded)
                    Assert.False(ownedCollectionNavigation.IsOnDependent)
                    Assert.Null(ownedCollectionNavigation.Inverse)
                    Assert.Equal(principalDerived, ownedCollectionNavigation.DeclaringEntityType)

                    Dim collectionOwnedType = ownedCollectionNavigation.TargetEntityType
                    Assert.Equal(principalDerived.Name & ".ManyOwned#OwnedType", collectionOwnedType.Name)
                    Assert.Equal(GetType(OwnedType), collectionOwnedType.ClrType)
                    Assert.True(collectionOwnedType.HasSharedClrType)
                    Assert.False(collectionOwnedType.IsPropertyBag)
                    Assert.True(collectionOwnedType.IsOwned())
                    Assert.True(collectionOwnedType.IsMemoryOptimized())
                    Assert.Null(collectionOwnedType(RelationalAnnotationNames.IsTableExcludedFromMigrations))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() collectionOwnedType.IsTableExcludedFromMigrations()).Message)
                    Assert.Null(collectionOwnedType.BaseType)
                    Assert.IsType(Of ConstructorBinding)(collectionOwnedType.ConstructorBinding)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, collectionOwnedType.GetChangeTrackingStrategy())

                    Dim collectionOwnership = ownedCollectionNavigation.ForeignKey
                    Assert.Same(collectionOwnership, collectionOwnedType.FindOwnership())
                    Assert.True(collectionOwnership.IsOwnership)
                    Assert.True(collectionOwnership.IsRequired)
                    Assert.False(collectionOwnership.IsRequiredDependent)
                    Assert.False(collectionOwnership.IsUnique)
                    Assert.Null(collectionOwnership.DependentToPrincipal)
                    Assert.Same(ownedCollectionNavigation, collectionOwnership.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.Cascade, collectionOwnership.DeleteBehavior)
                    Assert.Equal(2, collectionOwnership.Properties.Count())

                    Dim derivedSkipNavigation = principalDerived.GetDeclaredSkipNavigations().Single()
                    Assert.Equal("Principals", derivedSkipNavigation.Name)
                    Assert.Equal("Principals", derivedSkipNavigation.PropertyInfo.Name)
                    Assert.Equal("_Principals", derivedSkipNavigation.FieldInfo.Name)
                    Assert.Equal(GetType(ICollection(Of PrincipalBase)), derivedSkipNavigation.ClrType)
                    Assert.True(derivedSkipNavigation.IsCollection)
                    Assert.True(derivedSkipNavigation.IsEagerLoaded)
                    Assert.False(derivedSkipNavigation.IsOnDependent)
                    Assert.Equal(principalDerived, derivedSkipNavigation.DeclaringEntityType)
                    Assert.Equal("Deriveds", derivedSkipNavigation.Inverse.Name)
                    Assert.Same(MyPrincipalBase.GetSkipNavigations().Single(), derivedSkipNavigation.Inverse)

                    Assert.Same(derivedSkipNavigation, derivedSkipNavigation.ForeignKey.GetReferencingSkipNavigations().Single())
                    Assert.Same(derivedSkipNavigation.Inverse, derivedSkipNavigation.Inverse.ForeignKey.GetReferencingSkipNavigations().Single())

                    Assert.Equal({derivedSkipNavigation.Inverse, derivedSkipNavigation}, principalDerived.GetSkipNavigations())

                    Dim joinType = derivedSkipNavigation.JoinEntityType

                    Assert.Equal("PrincipalBasePrincipalDerived<DependentBase<byte?>>", joinType.Name)
                    Assert.Equal(GetType(Dictionary(Of String, Object)), joinType.ClrType)
                    Assert.True(joinType.HasSharedClrType)
                    Assert.True(joinType.IsPropertyBag)
                    Assert.False(joinType.IsOwned())
                    Assert.Null(joinType.BaseType)
                    Assert.IsType(Of ConstructorBinding)(joinType.ConstructorBinding)
                    Assert.Equal("Item", joinType.FindIndexerPropertyInfo().Name)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, joinType.GetChangeTrackingStrategy())
                    Assert.Null(joinType(RelationalAnnotationNames.Comment))
                    Assert.Equal(CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() joinType.GetComment()).Message)
                    Assert.Null(joinType.GetQueryFilter())

                    Dim rowid = joinType.GetProperties().Single(Function(p) Not p.IsForeignKey())
                    Assert.Equal(GetType(Byte()), rowid.ClrType)
                    Assert.True(rowid.IsIndexerProperty())
                    Assert.Same(joinType.FindIndexerPropertyInfo(), rowid.PropertyInfo)
                    Assert.Null(rowid.FieldInfo)
                    Assert.True(rowid.IsNullable)
                    Assert.False(rowid.IsShadowProperty())
                    Assert.True(rowid.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.OnAddOrUpdate, rowid.ValueGenerated)
                    Assert.Equal("rowid", rowid.GetColumnName())
                    Assert.Equal("rowversion", rowid.GetColumnType())
                    Assert.Null(rowid(RelationalAnnotationNames.Comment))
                    Assert.Equal(CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() rowid.GetComment()).Message)
                    Assert.Null(rowid(RelationalAnnotationNames.ColumnOrder))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() rowid.GetColumnOrder()).Message)
                    Assert.Null(rowid(RelationalAnnotationNames.Collation))
                    Assert.Equal(CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() rowid.GetCollation()).Message)
                    Assert.Null(rowid.GetValueConverter())
                    Assert.NotNull(rowid.GetValueComparer())
                    Assert.NotNull(rowid.GetKeyValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.None, rowid.GetValueGenerationStrategy())

                    Dim dependentForeignKey = dependentNavigation.ForeignKey
                    Assert.False(dependentForeignKey.IsOwnership)
                    Assert.True(dependentForeignKey.IsRequired)
                    Assert.False(dependentForeignKey.IsRequiredDependent)
                    Assert.True(dependentForeignKey.IsUnique)
                    Assert.Same(dependentNavigation.Inverse, dependentForeignKey.DependentToPrincipal)
                    Assert.Same(dependentNavigation, dependentForeignKey.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.ClientNoAction, dependentForeignKey.DeleteBehavior)
                    Assert.Equal({"PrincipalId", "PrincipalAlternateId"}, dependentForeignKey.Properties.Select(Function(p) p.Name))
                    Assert.Same(principalKey, dependentForeignKey.PrincipalKey)

                    Dim dependentBase = dependentNavigation.TargetEntityType

                    Assert.False(dependentBase.GetIsDiscriminatorMappingComplete())
                    Dim principalDiscriminator = dependentBase.FindDiscriminatorProperty()
                    Assert.IsType(Of DiscriminatorValueGenerator)(
                        principalDiscriminator.GetValueGeneratorFactory()(principalDiscriminator, dependentBase))
                    Assert.Equal(Enum1.One, dependentBase.GetDiscriminatorValue())

                    Dim dependentBaseForeignKey = dependentBase.GetForeignKeys().Single(Function(fk) fk IsNot dependentForeignKey)
                    Dim dependentForeignKeyProperty = dependentBaseForeignKey.Properties.Single()

                    Assert.Equal({dependentBaseForeignKey, dependentForeignKey}, dependentForeignKeyProperty.GetContainingForeignKeys())

                    Dim dependentDerived = dependentBase.GetDerivedTypes().Single()
                    Assert.Equal(Enum1.Two, dependentDerived.GetDiscriminatorValue())

                    Assert.Equal(2, dependentDerived.GetDeclaredProperties().Count())

                    Dim dependentData = dependentDerived.GetDeclaredProperties().First()
                    Assert.Equal(GetType(String), dependentData.ClrType)
                    Assert.Equal("Data", dependentData.Name)
                    Assert.Equal("Data", dependentData.PropertyInfo.Name)
                    Assert.Equal("_Data", dependentData.FieldInfo.Name)
                    Assert.True(dependentData.IsNullable)
                    Assert.False(dependentData.IsShadowProperty())
                    Assert.False(dependentData.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.Never, dependentData.ValueGenerated)
                    Assert.Equal("Data", dependentData.GetColumnName())
                    Assert.Equal("char(20)", dependentData.GetColumnType())
                    Assert.Equal(20, dependentData.GetMaxLength())
                    Assert.False(dependentData.IsUnicode())
                    Assert.True(dependentData.IsFixedLength())
                    Assert.Null(dependentData.GetPrecision())
                    Assert.Null(dependentData.GetScale())

                    Dim dependentMoney = dependentDerived.GetDeclaredProperties().Last()
                    Assert.Equal(GetType(Decimal), dependentMoney.ClrType)
                    Assert.Equal("Money", dependentMoney.Name)
                    Assert.Null(dependentMoney.PropertyInfo)
                    Assert.Null(dependentMoney.FieldInfo)
                    Assert.False(dependentMoney.IsNullable)
                    Assert.True(dependentMoney.IsShadowProperty())
                    Assert.False(dependentMoney.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.Never, dependentMoney.ValueGenerated)
                    Assert.Equal("Money", dependentMoney.GetColumnName())
                    Assert.Equal("decimal(9,3)", dependentMoney.GetColumnType())
                    Assert.Null(dependentMoney.GetMaxLength())
                    Assert.Null(dependentMoney.IsUnicode())
                    Assert.Null(dependentMoney.IsFixedLength())
                    Assert.Equal(9, dependentMoney.GetPrecision())
                    Assert.Equal(3, dependentMoney.GetScale())

                    Assert.Equal(
                        {
                            derivedSkipNavigation.ForeignKey,
                            tptForeignKey,
                            referenceOwnership,
                            collectionOwnership,
                            dependentForeignKey,
                            derivedSkipNavigation.Inverse.ForeignKey
                        },
                        principalKey.GetReferencingForeignKeys())

                    Assert.Equal(
                        {
                            dependentBaseForeignKey,
                            tptForeignKey,
                            referenceOwnership,
                            derivedSkipNavigation.Inverse.ForeignKey
                        },
                        MyPrincipalBase.GetReferencingForeignKeys())

                    Assert.Equal(
                        {
                            derivedSkipNavigation.ForeignKey,
                            collectionOwnership,
                            dependentForeignKey
                        },
                        principalDerived.GetDeclaredReferencingForeignKeys())

                    Assert.Equal(
                        {
                            dependentBase,
                            dependentDerived,
                            MyPrincipalBase,
                            referenceOwnedType,
                            principalDerived,
                            collectionOwnedType,
                            joinType
                        },
                        Model.GetEntityTypes())
                End Sub,
                GetType(SqlServerNetTopologySuiteDesignTimeServices))
        End Sub

        Public Class BigContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    HasDatabaseMaxSize("20TB").
                    HasPerformanceLevel("High").
                    HasServiceTier("AB").
                    UseCollation("pi-PI").
                    UseIdentityColumns(3, 2)

                modelBuilder.Entity(Of PrincipalBase)(
                    Sub(eb)
                        eb.Property(Function(e) e.Id).
                            UseIdentityColumn(2, 3).
                            IsSparse().
                            Metadata.
                            SetColumnName("DerivedId", StoreObjectIdentifier.
                            Table("PrincipalDerived"))

                        eb.Property(Function(e) e.AlternateId).
                            IsRequired().
                            UsePropertyAccessMode(PropertyAccessMode.FieldDuringConstruction).
                            HasColumnType("geometry").
                            HasDefaultValue(NtsGeometryServices.Instance.CreateGeometryFactory(srid:=0).
                            CreatePoint(New CoordinateZM(0, 0, 0, 0))).
                            HasConversion(Of CastingConverter(Of Point, Point), CustomValueComparer(Of Point), CustomValueComparer(Of Point))()

                        eb.HasIndex(Function(e) e.AlternateId, "AlternateIndex").
                            IsUnique().
                            HasDatabaseName("AIX").
                            HasFilter("AlternateId <> NULL").
                            IsClustered().
                            IsCreatedOnline().
                            HasFillFactor(40).
                            IncludeProperties(Function(e) e.Id)

                        eb.HasIndex(Function(e) New With {e.AlternateId, e.Id})

                        eb.HasKey(Function(e) New With {e.Id, e.AlternateId}).HasName("PK").
                                                                              IsClustered()

                        eb.HasAlternateKey(Function(e) e.Id)

                        eb.OwnsOne(
                            Function(e) e.Owned,
                            Sub(ob)
                                ob.HasChangeTrackingStrategy(ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues)
                                ob.UsePropertyAccessMode(PropertyAccessMode.Field)

                                ob.ToTable("PrincipalBase", "mySchema",
                                    Sub(t) t.Property("PrincipalBaseId").UseIdentityColumn(2, 3))

                                ob.SplitToTable("Details", Sub(s) s.Property(Function(e) e.Details))
                            End Sub)

                        eb.Navigation(Function(e) e.Owned).
                           IsRequired().
                           HasField("_ownedField").
                           UsePropertyAccessMode(PropertyAccessMode.Field)

                        eb.HasData(New PrincipalBase With {.Id = 1, .AlternateId = New Point(0, 0)})

                        eb.ToTable("PrincipalBase", "mySchema")
                    End Sub)

                modelBuilder.Entity(Of PrincipalDerived(Of DependentBase(Of Byte?)))(
                    Sub(eb)
                        eb.HasOne(Function(e) e.Dependent).
                           WithOne(Function(e) e.Principal).
                           HasForeignKey(Of DependentBase(Of Byte?))().
                           OnDelete(DeleteBehavior.ClientNoAction)

                        eb.Navigation(Function(e) e.Dependent).AutoInclude()

                        eb.OwnsMany(GetType(OwnedType).FullName, "ManyOwned",
                                    Sub(ob)
                                        ob.IsMemoryOptimized()
                                        ob.ToTable("ManyOwned", Sub(t) t.ExcludeFromMigrations())
                                    End Sub)

                        eb.HasMany(Function(e) e.Principals).
                           WithMany(Function(e) DirectCast(e.Deriveds, ICollection(Of PrincipalDerived(Of DependentBase(Of Byte?))))).
                           UsingEntity(
                            Sub(jb)
                                jb.HasComment("Join table")
                                jb.Property(Of Byte())("rowid").
                                   IsRowVersion().
                                   HasComment("RowVersion").
                                   UseCollation("ri").
                                   HasColumnOrder(1)
                            End Sub)

                        eb.Navigation(Function(e) e.Principals).AutoInclude()

                        eb.ToTable("PrincipalDerived")
                    End Sub)

                modelBuilder.Entity(Of DependentBase(Of Byte?))(
                    Sub(eb)
                        eb.Property(Of Byte?)("Id")

                        eb.HasKey({"PrincipalId", "PrincipalAlternateId"})

                        eb.HasOne(Of PrincipalBase)().
                           WithOne().
                           HasForeignKey(Of DependentBase(Of Byte?))("PrincipalId").
                           HasPrincipalKey(Of PrincipalBase)(Function(e) e.Id)

                        eb.HasDiscriminator(Of Enum1)("EnumDiscriminator").
                           HasValue(Enum1.One).
                           HasValue(Of DependentDerived(Of Byte?))(Enum1.Two).
                           IsComplete(False)
                    End Sub)

                modelBuilder.Entity(Of DependentDerived(Of Byte?))(
                    Sub(eb)
                        eb.Property(Of String)("Data").
                            HasMaxLength(20).
                            IsFixedLength().
                            IsUnicode(False)

                        eb.Property(Of Decimal)("Money").
                            HasPrecision(9, 3)
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub TPC_model()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.TpcContext))>
    Public Partial Class TpcContextModel
        Inherits RuntimeModel

        Private Shared _Instance As TpcContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New TpcContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class TpcContextModel

        Private Sub Initialize()
            Dim dependentBase = DependentBaseEntityType.Create(Me)
            Dim principalBase = PrincipalBaseEntityType.Create(Me)
            Dim principalDerived = PrincipalDerivedEntityType.Create(Me, principalBase)

            DependentBaseEntityType.CreateForeignKey1(dependentBase, principalDerived)
            PrincipalBaseEntityType.CreateForeignKey1(principalBase, principalBase)
            PrincipalBaseEntityType.CreateForeignKey2(principalBase, principalDerived)

            DependentBaseEntityType.CreateAnnotations(dependentBase)
            PrincipalBaseEntityType.CreateAnnotations(principalBase)
            PrincipalDerivedEntityType.CreateAnnotations(principalDerived)

            Dim sequences As New SortedDictionary(Of (String, String), ISequence)()
            Dim principalBaseSequence As New RuntimeSequence(
                "PrincipalBaseSequence",
                Me,
                GetType(Long),
                schema:="TPC")

            sequences(("PrincipalBaseSequence", "TPC")) = principalBaseSequence

            Me.AddAnnotation("Relational:Sequences", sequences)
            Me.AddAnnotation("Relational:DefaultSchema", "TPC")
            Me.AddAnnotation("Relational:MaxIdentifierLength", 128)
            Me.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class DependentBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Byte?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalId = entityType.AddProperty(
                "PrincipalId",
                GetType(Long?),
                nullable:=True)
            principalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalId},
                unique:=True)

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientCascade,
                unique:=True,
                requiredDependent:=True)

            Dim principal = declaringEntityType.AddNavigation("Principal",
                runtimeForeignKey,
                onDependent:=True,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Principal", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Principal", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim dependent = principalEntityType.AddNavigation("Dependent",
                runtimeForeignKey,
                onDependent:=False,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Dependent", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Dependent", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", "TPC")
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "DependentBase<byte?>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class PrincipalBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase),
                baseEntityType,
                discriminatorValue:="PrincipalBase")

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Long?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)

            Dim [overrides] As New StoreObjectDictionary(Of RuntimeRelationalPropertyOverrides)()
            Dim idDerivedInsert As New RuntimeRelationalPropertyOverrides(
                id,
                StoreObjectIdentifier.InsertStoredProcedure("Derived_Insert", "TPC"),
                True,
                "DerivedId")
            idDerivedInsert.AddAnnotation("foo", "bar3")
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.InsertStoredProcedure("Derived_Insert", "TPC"), idDerivedInsert})
            Dim idPrincipalBaseView As New RuntimeRelationalPropertyOverrides(
                id,
                StoreObjectIdentifier.View("PrincipalBaseView", "TPC"),
                False,
                Nothing)
            idPrincipalBaseView.AddAnnotation("foo", "bar2")
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.View("PrincipalBaseView", "TPC"), idPrincipalBaseView})
            Dim idPrincipalBaseInsert As New RuntimeRelationalPropertyOverrides(
                id,
                StoreObjectIdentifier.InsertStoredProcedure("PrincipalBase_Insert", "TPC"),
                True,
                "BaseId")
            idPrincipalBaseInsert.AddAnnotation("foo", "bar")
            idPrincipalBaseInsert.AddAnnotation("Relational:ParameterDirection", ParameterDirection.Output)
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.InsertStoredProcedure("PrincipalBase_Insert", "TPC"), idPrincipalBaseInsert})
            id.AddAnnotation("Relational:RelationalOverrides", [overrides])

            id.AddAnnotation("Relational:DefaultValueSql", "NEXT VALUE FOR [TPC].[PrincipalBaseSequence]")
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.Sequence)

            Dim principalBaseId = entityType.AddProperty(
                "PrincipalBaseId",
                GetType(Long?),
                nullable:=True)
            principalBaseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalDerivedId = entityType.AddProperty(
                "PrincipalDerivedId",
                GetType(Long?),
                nullable:=True)
            principalDerivedId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalBaseId})

            Dim index0 = entityType.AddIndex(
                {principalDerivedId})

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalBaseId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
                principalEntityType)

            Dim deriveds = principalEntityType.AddNavigation("Deriveds",
                runtimeForeignKey,
                onDependent:=False,
                GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Deriveds", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Deriveds", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalDerivedId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
                principalEntityType)

            Dim principals = principalEntityType.AddNavigation("Principals",
                runtimeForeignKey,
                onDependent:=False,
                GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Principals", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Principals", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            Dim insertSproc As New RuntimeStoredProcedure(
                entityType,
                "PrincipalBase_Insert",
                "TPC",
                True)

            insertSproc.AddParameter("PrincipalBaseId")
            insertSproc.AddParameter("PrincipalDerivedId")
            insertSproc.AddParameter("Id")
            insertSproc.AddAnnotation("foo", "bar1")
            entityType.AddAnnotation("Relational:InsertStoredProcedure", insertSproc)

            Dim deleteSproc As New RuntimeStoredProcedure(
                entityType,
                "PrincipalBase_Delete",
                "TPC",
                False)

            deleteSproc.AddParameter("Id")
            entityType.AddAnnotation("Relational:DeleteStoredProcedure", deleteSproc)

            Dim updateSproc As New RuntimeStoredProcedure(
                entityType,
                "PrincipalBase_Update",
                "TPC",
                False)

            updateSproc.AddParameter("PrincipalBaseId")
            updateSproc.AddParameter("PrincipalDerivedId")
            updateSproc.AddParameter("Id")
            entityType.AddAnnotation("Relational:UpdateStoredProcedure", updateSproc)

            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:MappingStrategy", "TPC")
            entityType.AddAnnotation("Relational:Schema", "TPC")
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
            entityType.AddAnnotation("Relational:ViewDefinitionSql", Nothing)
            entityType.AddAnnotation("Relational:ViewName", "PrincipalBaseView")
            entityType.AddAnnotation("Relational:ViewSchema", "TPC")

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e3 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class PrincipalDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                baseEntityType,
                discriminatorValue:="PrincipalDerived<DependentBase<byte?>>")

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            Dim insertSproc As New RuntimeStoredProcedure(
                entityType,
                "Derived_Insert",
                "TPC",
                False)

            insertSproc.AddParameter("PrincipalBaseId")
            insertSproc.AddParameter("PrincipalDerivedId")
            insertSproc.AddResultColumn("Id")
            entityType.AddAnnotation("Relational:InsertStoredProcedure", insertSproc)

            Dim deleteSproc As New RuntimeStoredProcedure(
                entityType,
                "Derived_Delete",
                "TPC",
                False)

            deleteSproc.AddParameter("Id")
            entityType.AddAnnotation("Relational:DeleteStoredProcedure", deleteSproc)

            Dim updateSproc As New RuntimeStoredProcedure(
                entityType,
                "Derived_Update",
                "Derived",
                False)

            updateSproc.AddParameter("PrincipalBaseId")
            updateSproc.AddParameter("PrincipalDerivedId")
            updateSproc.AddParameter("Id")
            entityType.AddAnnotation("Relational:UpdateStoredProcedure", updateSproc)

            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", "TPC")
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalDerived")
            entityType.AddAnnotation("Relational:ViewDefinitionSql", Nothing)
            entityType.AddAnnotation("Relational:ViewName", "PrincipalDerivedView")
            entityType.AddAnnotation("Relational:ViewSchema", "TPC")

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New TpcContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(
                        code,
                        Sub(c) AssertFileContents("TpcContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("TpcContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DependentBaseEntityType.vb", e1, c),
                        Sub(c) AssertFileContents("PrincipalBaseEntityType.vb", e2, c),
                        Sub(c) AssertFileContents("PrincipalDerivedEntityType.vb", e3, c))
                End Sub,
                Sub(Model)
                    Assert.Equal("TPC", Model.GetDefaultSchema())

                    Dim PrincipalBase = Model.FindEntityType(GetType(PrincipalBase))
                    Dim id = PrincipalBase.FindProperty("Id")

                    Assert.Equal("Id", id.GetColumnName())
                    Assert.Equal("PrincipalBase", PrincipalBase.GetTableName())
                    Assert.Equal("TPC", PrincipalBase.GetSchema())
                    Assert.Equal("Id", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.Table).Value))
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.Table).Value))

                    Assert.Equal("PrincipalBaseView", PrincipalBase.GetViewName())
                    Assert.Equal("TPC", PrincipalBase.GetViewSchema())
                    Assert.Equal("Id", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.View).Value))
                    Assert.Equal("bar2",
                        id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.View).Value)("foo"))

                    Dim insertSproc = PrincipalBase.GetInsertStoredProcedure()
                    Assert.Equal("PrincipalBase_Insert", insertSproc.Name)
                    Assert.Equal("TPC", insertSproc.Schema)
                    Assert.Equal({"PrincipalBaseId", "PrincipalDerivedId", "Id"}, insertSproc.Parameters)
                    Assert.Empty(insertSproc.ResultColumns)
                    Assert.True(insertSproc.AreTransactionsSuppressed)
                    Assert.Equal("bar1", insertSproc("foo"))
                    Assert.Same(PrincipalBase, insertSproc.EntityType)
                    Assert.Equal("BaseId", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.InsertStoredProcedure).Value))
                    Assert.Equal("bar",
                        id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.InsertStoredProcedure).Value)("foo"))

                    Dim updateSproc = PrincipalBase.GetUpdateStoredProcedure()
                    Assert.Equal("PrincipalBase_Update", updateSproc.Name)
                    Assert.Equal("TPC", updateSproc.Schema)
                    Assert.Equal({"PrincipalBaseId", "PrincipalDerivedId", "Id"}, updateSproc.Parameters)
                    Assert.Empty(updateSproc.ResultColumns)
                    Assert.False(updateSproc.AreTransactionsSuppressed)
                    Assert.Empty(updateSproc.GetAnnotations())
                    Assert.Same(PrincipalBase, updateSproc.EntityType)
                    Assert.Equal("Id", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.UpdateStoredProcedure).Value))
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.UpdateStoredProcedure).Value))

                    Dim deleteSproc = PrincipalBase.GetDeleteStoredProcedure()
                    Assert.Equal("PrincipalBase_Delete", deleteSproc.Name)
                    Assert.Equal("TPC", deleteSproc.Schema)
                    Assert.Equal({"Id"}, deleteSproc.Parameters)
                    Assert.Empty(deleteSproc.ResultColumns)
                    Assert.Same(PrincipalBase, deleteSproc.EntityType)
                    Assert.Equal("Id", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.DeleteStoredProcedure).Value))
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.DeleteStoredProcedure).Value))

                    Assert.Equal("PrincipalBase", PrincipalBase.GetDiscriminatorValue())
                    Assert.Null(PrincipalBase.FindDiscriminatorProperty())
                    Assert.Equal("TPC", PrincipalBase.GetMappingStrategy())

                    Dim selfRefNavigation = PrincipalBase.GetDeclaredNavigations().Last()
                    Assert.Equal("Deriveds", selfRefNavigation.Name)
                    Assert.True(selfRefNavigation.IsCollection)
                    Assert.False(selfRefNavigation.IsOnDependent)
                    Assert.Equal(PrincipalBase, selfRefNavigation.TargetEntityType)
                    Assert.Null(selfRefNavigation.Inverse)

                    Dim PrincipalDerived = Model.FindEntityType(GetType(PrincipalDerived(Of DependentBase(Of Byte?))))
                    Assert.Equal(PrincipalBase, PrincipalDerived.BaseType)

                    Assert.Equal("PrincipalDerived", PrincipalDerived.GetTableName())
                    Assert.Equal("TPC", PrincipalDerived.GetSchema())
                    Assert.Equal("PrincipalDerivedView", PrincipalDerived.GetViewName())
                    Assert.Equal("TPC", PrincipalBase.GetViewSchema())

                    insertSproc = PrincipalDerived.GetInsertStoredProcedure()
                    Assert.Equal("Derived_Insert", insertSproc.Name)
                    Assert.Equal("TPC", insertSproc.Schema)
                    Assert.Equal({"PrincipalBaseId", "PrincipalDerivedId"}, insertSproc.Parameters)
                    Assert.Equal({"Id"}, insertSproc.ResultColumns)
                    Assert.False(insertSproc.AreTransactionsSuppressed)
                    Assert.Null(insertSproc("foo"))
                    Assert.Same(PrincipalDerived, insertSproc.EntityType)
                    Assert.Equal("DerivedId", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.InsertStoredProcedure).Value))
                    Assert.Equal("bar3",
                        id.FindOverrides(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.InsertStoredProcedure).Value)("foo"))

                    updateSproc = PrincipalDerived.GetUpdateStoredProcedure()
                    Assert.Equal("Derived_Update", updateSproc.Name)
                    Assert.Equal("Derived", updateSproc.Schema)
                    Assert.Equal({"PrincipalBaseId", "PrincipalDerivedId", "Id"}, updateSproc.Parameters)
                    Assert.Empty(updateSproc.ResultColumns)
                    Assert.False(updateSproc.AreTransactionsSuppressed)
                    Assert.Empty(updateSproc.GetAnnotations())
                    Assert.Same(PrincipalDerived, updateSproc.EntityType)
                    Assert.Equal("Id", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.UpdateStoredProcedure).Value))
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.UpdateStoredProcedure).Value))

                    deleteSproc = PrincipalDerived.GetDeleteStoredProcedure()
                    Assert.Equal("Derived_Delete", deleteSproc.Name)
                    Assert.Equal("TPC", deleteSproc.Schema)
                    Assert.Equal({"Id"}, deleteSproc.Parameters)
                    Assert.Empty(deleteSproc.ResultColumns)
                    Assert.False(deleteSproc.AreTransactionsSuppressed)
                    Assert.Same(PrincipalDerived, deleteSproc.EntityType)
                    Assert.Equal("Id", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.DeleteStoredProcedure).Value))
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.DeleteStoredProcedure).Value))

                    Assert.Equal("PrincipalDerived<DependentBase<byte?>>", PrincipalDerived.GetDiscriminatorValue())
                    Assert.Null(PrincipalDerived.FindDiscriminatorProperty())
                    Assert.Equal("TPC", PrincipalDerived.GetMappingStrategy())

                    Assert.Equal(2, PrincipalDerived.GetDeclaredNavigations().Count())
                    Dim derivedNavigation = PrincipalDerived.GetDeclaredNavigations().Last()
                    Assert.Equal("Principals", derivedNavigation.Name)
                    Assert.True(derivedNavigation.IsCollection)
                    Assert.False(derivedNavigation.IsOnDependent)
                    Assert.Equal(PrincipalBase, derivedNavigation.TargetEntityType)
                    Assert.Null(derivedNavigation.Inverse)

                    Dim dependentNavigation = PrincipalDerived.GetDeclaredNavigations().First()
                    Assert.Equal("Dependent", dependentNavigation.Name)
                    Assert.Equal("Dependent", dependentNavigation.PropertyInfo.Name)
                    Assert.Equal("_Dependent", dependentNavigation.FieldInfo.Name)
                    Assert.False(dependentNavigation.IsCollection)
                    Assert.False(dependentNavigation.IsEagerLoaded)
                    Assert.False(dependentNavigation.IsOnDependent)
                    Assert.Equal(PrincipalDerived, dependentNavigation.DeclaringEntityType)
                    Assert.Equal("Principal", dependentNavigation.Inverse.Name)

                    Dim dependentForeignKey = dependentNavigation.ForeignKey
                    Assert.False(dependentForeignKey.IsOwnership)
                    Assert.False(dependentForeignKey.IsRequired)
                    Assert.True(dependentForeignKey.IsRequiredDependent)
                    Assert.True(dependentForeignKey.IsUnique)
                    Assert.Same(PrincipalDerived, dependentForeignKey.PrincipalEntityType)
                    Assert.Same(dependentNavigation.Inverse, dependentForeignKey.DependentToPrincipal)
                    Assert.Same(dependentNavigation, dependentForeignKey.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.ClientCascade, dependentForeignKey.DeleteBehavior)
                    Assert.Equal({"PrincipalId"}, dependentForeignKey.Properties.Select(Function(p) p.Name))

                    Dim DependentBase = dependentNavigation.TargetEntityType

                    Assert.True(DependentBase.GetIsDiscriminatorMappingComplete())
                    Assert.Null(DependentBase.FindDiscriminatorProperty())

                    Assert.Same(dependentForeignKey, DependentBase.GetForeignKeys().Single())

                    Assert.Equal(
                        {
                            DependentBase,
                            PrincipalBase,
                            PrincipalDerived
                        },
                        Model.GetEntityTypes())
                End Sub,
                GetType(SqlServerNetTopologySuiteDesignTimeServices))
        End Sub

        Public Class TpcContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.HasDefaultSchema("TPC")

                modelBuilder.Entity(Of PrincipalBase)(
                    Sub(eb)
                        eb.Ignore(Function(e) e.Owned)

                        eb.UseTpcMappingStrategy()

                        eb.ToTable("PrincipalBase")
                        eb.ToView("PrincipalBaseView", Sub(tb) tb.Property(Function(e) e.Id).HasAnnotation("foo", "bar2"))

                        eb.InsertUsingStoredProcedure(Sub(s) s.SuppressTransactions().
                            HasParameter("PrincipalBaseId").
                            HasParameter("PrincipalDerivedId").
                            HasParameter(Function(p) p.Id, Function(pb) pb.HasName("BaseId").IsOutput().HasAnnotation("foo", "bar")).
                            HasAnnotation("foo", "bar1"))
                        eb.UpdateUsingStoredProcedure(Sub(s) s.
                            HasParameter("PrincipalBaseId").
                            HasParameter("PrincipalDerivedId").
                            HasParameter(Function(p) p.Id))
                        eb.DeleteUsingStoredProcedure(Sub(s) s.
                            HasParameter(Function(p) p.Id))
                    End Sub)

                modelBuilder.Entity(Of PrincipalDerived(Of DependentBase(Of Byte?)))(
                    Sub(eb)
                        eb.HasOne(Function(e) e.Dependent).WithOne(Function(e) e.Principal).
                            HasForeignKey(Of DependentBase(Of Byte?))().
                            OnDelete(DeleteBehavior.ClientCascade)

                        eb.Navigation(Function(e) e.Dependent).IsRequired()

                        eb.ToTable("PrincipalDerived")
                        eb.ToView("PrincipalDerivedView")

                        eb.InsertUsingStoredProcedure("Derived_Insert", Sub(s) s.
                            HasParameter("PrincipalBaseId").
                            HasParameter("PrincipalDerivedId").
                            HasResultColumn(Function(p) p.Id, Function(pb) pb.HasName("DerivedId").HasAnnotation("foo", "bar3")))
                        eb.UpdateUsingStoredProcedure("Derived_Update", "Derived", Sub(s) s.
                            HasParameter("PrincipalBaseId").
                            HasParameter("PrincipalDerivedId").
                            HasParameter(Function(p) p.Id))
                        eb.DeleteUsingStoredProcedure("Derived_Delete", Sub(s) s.
                            HasParameter(Function(p) p.Id))
                    End Sub)

                modelBuilder.Entity(Of DependentBase(Of Byte?))(
                    Sub(eb)
                        eb.Property(Of Byte?)("Id")
                    End Sub)
            End Sub
        End Class

        Public Class CustomValueComparer(Of T)
            Inherits ValueComparer(Of T)

            Public Sub New()
                MyBase.New(False)
            End Sub
        End Class

        Public MustInherit Class AbstractBase
            Public Property Id As Integer
        End Class

        Public Class PrincipalBase
            Inherits AbstractBase

            Public Shadows Property Id As Long?
            Public AlternateId As Point

            Private _ownedField As OwnedType
            Public Property Owned As OwnedType
                Get
                    Return _ownedField
                End Get
                Set
                    _ownedField = Value
                End Set
            End Property

            Public Property Deriveds As ICollection(Of PrincipalBase)
        End Class

        Public Class PrincipalDerived(Of TDependent)
            Inherits PrincipalBase

            Public Property Dependent As TDependent
            Protected ManyOwned As ICollection(Of OwnedType)
            Public Property Principals As ICollection(Of PrincipalBase)
        End Class

        Public Class DependentBase(Of TKey)
            Inherits AbstractBase
            Private Shadows Property Id As TKey
            Public Property Principal As PrincipalDerived(Of DependentBase(Of TKey))
        End Class

        Public Class DependentDerived(Of TKey)
            Inherits DependentBase(Of TKey)
            Private Property Data As String
        End Class

        Public Class OwnedType
            Implements INotifyPropertyChanged, INotifyPropertyChanging

            Private _context As Microsoft.EntityFrameworkCore.DbContext

            Public Sub New(context As Microsoft.EntityFrameworkCore.DbContext)
                Me.Context = context
            End Sub

            Public Property Context As Microsoft.EntityFrameworkCore.DbContext
                Get
                    Return _context
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("Context"))
                    _context = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs("Context"))
                End Set
            End Property

            Public Property Number As Integer
            Public Property Details As String

            Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
            Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        End Class

        <ConditionalFact>
        Public Sub DbFunctions()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext))>
    Public Partial Class DbFunctionContextModel
        Inherits RuntimeModel

        Private Shared _Instance As DbFunctionContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New DbFunctionContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class DbFunctionContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)
            Dim [object] = ObjectEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)
            ObjectEntityType.CreateAnnotations([object])

            Dim type = Me.AddTypeMappingConfiguration(
                GetType(String),
                maxLength:=256)
            type.AddAnnotation("Relational:IsFixedLength", True)

            Dim functions As New SortedDictionary(Of String, IDbFunction)()
            Dim getCount As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)",
                Me,
                GetType(Integer),
                "CustomerOrderCount",
                schema:="dbf",
                storeType:="int",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    "GetCount",
                    BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {GetType(Guid?), GetType(String)},
                    Nothing),
                scalar:=True)

            Dim id = getCount.AddParameter(
                "id",
                GetType(Guid?),
                True,
                "uniqueidentifier")
            id.AddAnnotation("MyAnnotation", {1L})

            Dim condition = getCount.AddParameter(
                "condition",
                GetType(String),
                False,
                "nchar(256)")

            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)") = getCount

            Dim getData As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()",
                Me,
                GetType(IQueryable(Of VisualBasicRuntimeModelCodeGeneratorTest.Data)),
                "GetAllData",
                schema:="dbo",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    "GetData",
                    BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {},
                    Nothing))

            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()") = getData

            Dim getData0 As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData(int)",
                Me,
                GetType(IQueryable(Of VisualBasicRuntimeModelCodeGeneratorTest.Data)),
                "GetData",
                schema:="dbo",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    "GetData",
                    BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {GetType(Integer)},
                    Nothing))

            Dim id0 = getData0.AddParameter(
                "id",
                GetType(Integer),
                False,
                "int")

            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData(int)") = getData0

            Dim isDateShared As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.IsDateShared(string)",
                Me,
                GetType(Boolean),
                "IsDate",
                storeType:="bit",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    "IsDateShared",
                    BindingFlags.Public Or BindingFlags.Static Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {GetType(String)},
                    Nothing),
                scalar:=True,
                nullable:=True,
                builtIn:=True)

            Dim aDate = isDateShared.AddParameter(
                "aDate",
                GetType(String),
                False,
                "nchar(256)")

            isDateShared.AddAnnotation("MyGuid", New Guid("00000000-0000-0000-0000-000000000000"))
            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.IsDateShared(string)") = isDateShared

            Dim getBlobs As New RuntimeDbFunction(
                "GetBlobs()",
                Me,
                GetType(IQueryable(Of Object)),
                "GetBlobs",
                schema:="dbo")

            functions("GetBlobs()") = getBlobs

            Me.AddAnnotation("Relational:DbFunctions", functions)
            Me.AddAnnotation("Relational:MaxIdentifierLength", 128)
            Me.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()")
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", Nothing)
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value
            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class ObjectEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "object",
                GetType(Object),
                baseEntityType)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", "GetBlobs()")
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", Nothing)
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New DbFunctionContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(code,
                                      Sub(c) AssertFileContents("DbFunctionContextModel.vb", rm1, c),
                                      Sub(c) AssertFileContents("DbFunctionContextModelBuilder.vb", rm2, c),
                                      Sub(c) AssertFileContents("DataEntityType.vb", e1, c),
                                      Sub(c) AssertFileContents("ObjectEntityType.vb", e2, c))
                End Sub,
                Sub(model)
                    Assert.Equal(5, model.GetDbFunctions().Count())

                    Dim getCount = model.FindDbFunction(GetType(DbFunctionContext).GetMethod("GetCount", BindingFlags.NonPublic Or BindingFlags.Instance))
                    Assert.Equal("CustomerOrderCount", getCount.Name)
                    Assert.Same(model, getCount.Model)
                    Assert.Same(model, (DirectCast(getCount, IReadOnlyDbFunction)).Model)
                    Assert.Equal(GetType(DbFunctionContext).FullName & ".GetCount(System.Guid?,string)", getCount.ModelName)
                    Assert.Equal("dbf", getCount.Schema)
                    Assert.False(getCount.IsNullable)
                    Assert.True(getCount.IsScalar)
                    Assert.False(getCount.IsBuiltIn)
                    Assert.False(getCount.IsAggregate)
                    Assert.Null(getCount.Translation)
                    Assert.Equal("int", getCount.TypeMapping?.StoreType)
                    Assert.Equal(GetType(Integer), getCount.ReturnType)
                    Assert.Equal("GetCount", getCount.MethodInfo.Name)
                    Assert.Empty(getCount.GetAnnotations())
                    Assert.Empty(getCount.GetRuntimeAnnotations())
                    Assert.Equal("CustomerOrderCount", getCount.StoreFunction.Name)
                    Assert.False(getCount.StoreFunction.IsShared)
                    Assert.NotNull(getCount.ToString())
                    Assert.Equal(getCount.Parameters, DirectCast(getCount, IReadOnlyDbFunction).Parameters)
                    Assert.Equal(2, getCount.Parameters.Count)

                    Dim getCountParameter1 = getCount.Parameters(0)
                    Assert.Same(getCount, getCountParameter1.Function)
                    Assert.Same(getCount, DirectCast(getCountParameter1, IReadOnlyDbFunctionParameter).Function)
                    Assert.Equal("id", getCountParameter1.Name)
                    Assert.Equal("uniqueidentifier", getCountParameter1.StoreType)
                    Assert.Equal("uniqueidentifier", DirectCast(getCountParameter1, IReadOnlyDbFunctionParameter).StoreType)
                    Assert.True(getCountParameter1.PropagatesNullability)
                    Assert.Equal(GetType(Guid?), getCountParameter1.ClrType)
                    Assert.Equal("uniqueidentifier", getCountParameter1.TypeMapping.StoreType)
                    Assert.Single(getCountParameter1.GetAnnotations())
                    Assert.Equal({1L}, getCountParameter1("MyAnnotation"))
                    Assert.Equal("id", getCountParameter1.StoreFunctionParameter.Name)
                    Assert.Equal("uniqueidentifier", getCountParameter1.StoreFunctionParameter.Type)
                    Assert.NotNull(getCountParameter1.ToString())

                    Dim getCountParameter2 = getCount.Parameters(1)
                    Assert.Same(getCount, getCountParameter2.Function)
                    Assert.Equal("condition", getCountParameter2.Name)
                    Assert.Equal("nchar(256)", getCountParameter2.StoreType)
                    Assert.False(getCountParameter2.PropagatesNullability)
                    Assert.Equal(GetType(String), getCountParameter2.ClrType)
                    Assert.Equal("nchar(256)", getCountParameter2.TypeMapping.StoreType)
                    Assert.Equal("condition", getCountParameter2.StoreFunctionParameter.Name)
                    Assert.Equal("nchar(256)", getCountParameter2.StoreFunctionParameter.Type)
                    Assert.NotNull(getCountParameter2.ToString())

                    Dim isDate = model.FindDbFunction(GetType(DbFunctionContext).GetMethod("IsDateShared"))
                    Assert.Equal("IsDate", isDate.Name)
                    Assert.Null(isDate.Schema)
                    Assert.Equal(GetType(DbFunctionContext).FullName & ".IsDateShared(string)", isDate.ModelName)
                    Assert.True(isDate.IsNullable)
                    Assert.True(isDate.IsScalar)
                    Assert.True(isDate.IsBuiltIn)
                    Assert.False(isDate.IsAggregate)
                    Assert.Null(isDate.Translation)
                    Assert.Equal(GetType(Boolean), isDate.ReturnType)
                    Assert.Equal("IsDateShared", isDate.MethodInfo.Name)
                    Assert.Single(isDate.GetAnnotations())
                    Assert.Equal(New Guid(), isDate("MyGuid"))
                    Assert.Empty(isDate.GetRuntimeAnnotations())
                    Assert.Equal("bit", isDate.StoreFunction.ReturnType)
                    Assert.Empty(isDate.StoreFunction.EntityTypeMappings)
                    Assert.Single(isDate.Parameters)

                    Dim isDateParameter = isDate.Parameters(0)
                    Assert.Same(isDate, isDateParameter.Function)
                    Assert.Equal("aDate", isDateParameter.Name)
                    Assert.Equal("nchar(256)", isDateParameter.StoreType)
                    Assert.False(isDateParameter.PropagatesNullability)
                    Assert.Equal(GetType(String), isDateParameter.ClrType)
                    Assert.Equal("nchar(256)", isDateParameter.TypeMapping.StoreType)
                    Assert.Equal("aDate", isDateParameter.StoreFunctionParameter.Name)
                    Assert.Equal("nchar(256)", isDateParameter.StoreFunctionParameter.Type)

                    Dim getData = model.FindDbFunction(
                                    GetType(DbFunctionContext).GetMethod("GetData", {GetType(Integer)}))

                    Assert.Equal("GetData", getData.Name)
                    Assert.Equal("dbo", getData.Schema)
                    Assert.Equal(GetType(DbFunctionContext).FullName & ".GetData(int)", getData.ModelName)
                    Assert.False(getData.IsNullable)
                    Assert.False(getData.IsScalar)
                    Assert.False(getData.IsBuiltIn)
                    Assert.False(getData.IsAggregate)
                    Assert.Null(getData.Translation)
                    Assert.Equal(GetType(IQueryable(Of Data)), getData.ReturnType)
                    Assert.Equal("GetData", getData.MethodInfo.Name)
                    Assert.Empty(getData.GetAnnotations())
                    Assert.Empty(getData.GetRuntimeAnnotations())
                    Assert.Null(getData.TypeMapping?.StoreType)
                    Assert.Null(getData.StoreFunction.ReturnType)
                    Assert.Equal(GetType(Data), getData.StoreFunction.EntityTypeMappings.Single().EntityType.ClrType)
                    Assert.Single(getData.Parameters)

                    Dim getDataParameter = getData.Parameters(0)
                    Assert.Same(getData, getDataParameter.Function)
                    Assert.Equal("id", getDataParameter.Name)
                    Assert.Equal("int", getDataParameter.StoreType)
                    Assert.False(getDataParameter.PropagatesNullability)
                    Assert.Equal(GetType(Integer), getDataParameter.ClrType)
                    Assert.Equal("int", getDataParameter.TypeMapping.StoreType)
                    Assert.Equal("id", getDataParameter.StoreFunctionParameter.Name)
                    Assert.Equal("int", getDataParameter.StoreFunctionParameter.Type)

                    Dim getDataParameterless = model.FindDbFunction(GetType(DbFunctionContext).
                                                                    GetMethod("GetData", Array.Empty(Of Type)))
                    Assert.Equal("GetAllData", getDataParameterless.Name)
                    Assert.Equal("dbo", getDataParameterless.Schema)
                    Assert.Equal(GetType(DbFunctionContext).FullName & ".GetData()", getDataParameterless.ModelName)
                    Assert.False(getDataParameterless.IsNullable)
                    Assert.False(getDataParameterless.IsScalar)
                    Assert.False(getDataParameterless.IsBuiltIn)
                    Assert.False(getDataParameterless.IsAggregate)
                    Assert.Null(getDataParameterless.Translation)
                    Assert.Equal(GetType(IQueryable(Of Data)), getDataParameterless.ReturnType)
                    Assert.Equal("GetData", getDataParameterless.MethodInfo.Name)
                    Assert.Empty(getDataParameterless.GetAnnotations())
                    Assert.Empty(getDataParameterless.GetRuntimeAnnotations())
                    Assert.False(getDataParameterless.StoreFunction.IsBuiltIn)
                    Assert.Equal(GetType(Data), getDataParameterless.StoreFunction.EntityTypeMappings.Single().EntityType.ClrType)
                    Assert.Equal(0, getDataParameterless.Parameters.Count)

                    Assert.Equal(2, model.GetEntityTypes().Count())
                    Dim dataEntity = model.FindEntityType(GetType(Data))
                    Assert.Null(dataEntity.FindPrimaryKey())
                    Dim dataEntityFunctionMapping = dataEntity.GetFunctionMappings().Single(Function(m) m.IsDefaultFunctionMapping)
                    Assert.True(dataEntityFunctionMapping.IncludesDerivedTypes)
                    Assert.Null(dataEntityFunctionMapping.IsSharedTablePrincipal)
                    Assert.Null(dataEntityFunctionMapping.IsSplitEntityTypePrincipal)
                    Assert.Same(getDataParameterless, dataEntityFunctionMapping.DbFunction)

                    Dim getDataStoreFunction = dataEntityFunctionMapping.StoreFunction
                    Assert.Same(getDataParameterless, getDataStoreFunction.DbFunctions.Single())
                    Assert.False(getDataStoreFunction.IsOptional(dataEntity))

                    Dim dataEntityOtherFunctionMapping = dataEntity.GetFunctionMappings().Single(Function(m) Not m.IsDefaultFunctionMapping)
                    Assert.True(dataEntityOtherFunctionMapping.IncludesDerivedTypes)
                    Assert.Null(dataEntityOtherFunctionMapping.IsSharedTablePrincipal)
                    Assert.Null(dataEntityOtherFunctionMapping.IsSplitEntityTypePrincipal)
                    Assert.Same(getData, dataEntityOtherFunctionMapping.DbFunction)

                    Dim getDataOtherStoreFunction = dataEntityOtherFunctionMapping.StoreFunction
                    Assert.Same(getData, getDataOtherStoreFunction.DbFunctions.Single())
                    Assert.False(getDataOtherStoreFunction.IsOptional(dataEntity))

                    Dim getBlobs = model.FindDbFunction("GetBlobs()")
                    Assert.Equal("dbo", getBlobs.Schema)
                    Assert.False(getBlobs.IsNullable)
                    Assert.False(getBlobs.IsScalar)
                    Assert.False(getBlobs.IsBuiltIn)
                    Assert.False(getBlobs.IsAggregate)
                    Assert.Null(getBlobs.Translation)
                    Assert.Null(getBlobs.TypeMapping)
                    Assert.Equal(GetType(IQueryable(Of Object)), getBlobs.ReturnType)
                    Assert.Null(getBlobs.MethodInfo)
                    Assert.Empty(getBlobs.GetAnnotations())
                    Assert.Empty(getBlobs.GetRuntimeAnnotations())
                    Assert.Equal("GetBlobs", getBlobs.StoreFunction.Name)
                    Assert.False(getBlobs.StoreFunction.IsShared)
                    Assert.NotNull(getBlobs.ToString())
                    Assert.Empty(getBlobs.Parameters)

                    Dim objectEntity = model.FindEntityType(GetType(Object))
                    Assert.Null(objectEntity.FindPrimaryKey())
                    Dim objectEntityFunctionMapping = objectEntity.GetFunctionMappings().Single(Function(m) m.IsDefaultFunctionMapping)
                    Assert.True(objectEntityFunctionMapping.IncludesDerivedTypes)
                    Assert.Null(objectEntityFunctionMapping.IsSharedTablePrincipal)
                    Assert.Null(objectEntityFunctionMapping.IsSplitEntityTypePrincipal)
                    Assert.Same(getBlobs, objectEntityFunctionMapping.DbFunction)
                End Sub)
        End Sub

        Public Class DbFunctionContext
            Inherits SqlServerContextBase

            Public Shared Function IsDateShared(aDate As String) As Boolean
                Throw New NotImplementedException()
            End Function

            Private Function GetCount(id As Guid?, condition As String) As Integer
                Throw New NotImplementedException()
            End Function

            Public Function GetData(id As Integer) As IQueryable(Of Data)
                Return FromExpression(Function() GetData(id))
            End Function

            Public Function GetData() As IQueryable(Of Data)
                Return FromExpression(Function() GetData())
            End Function

            Protected Overrides Sub ConfigureConventions(configurationBuilder As ModelConfigurationBuilder)
                configurationBuilder.DefaultTypeMapping(Of String)().HasMaxLength(256).IsFixedLength()
            End Sub

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    HasDbFunction(GetType(DbFunctionContext).
                    GetMethod(NameOf(GetCount), BindingFlags.NonPublic Or BindingFlags.Instance)).
                    HasName("CustomerOrderCount").HasSchema("dbf").IsNullable(False).
                    HasParameter("id").
                    PropagatesNullability().
                    Metadata.SetAnnotation("MyAnnotation", {1L})

                modelBuilder.
                    HasDbFunction(GetType(DbFunctionContext).
                    GetMethod(NameOf(IsDateShared))).
                    HasName("IsDate").
                    IsBuiltIn().
                    Metadata.
                    SetAnnotation("MyGuid", New Guid())

                modelBuilder.HasDbFunction(GetType(DbFunctionContext).GetMethod(NameOf(GetData), {GetType(Integer)}))
                modelBuilder.HasDbFunction(GetType(DbFunctionContext).GetMethod(NameOf(GetData), New Type() {}))

                modelBuilder.
                    Entity(Of Data)().
                    ToFunction(GetType(DbFunctionContext).
                    FullName & ".GetData()", Function(f) f.HasName("GetAllData")).
                    HasNoKey()

                modelBuilder.Entity(Of Object)().
                    ToFunction("GetBlobs()", Function(f) f.HasName("GetBlobs")).
                    HasNoKey()
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Sequences()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.SequencesContext))>
    Public Partial Class SequencesContextModel
        Inherits RuntimeModel

        Private Shared _Instance As SequencesContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New SequencesContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class SequencesContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            Dim sequences As New SortedDictionary(Of (String, String), ISequence)()
            Dim hL As New RuntimeSequence(
                "HL",
                Me,
                GetType(Long),
                schema:="S",
                incrementBy:=10)

            sequences(("HL", "S")) = hL

            Dim [long] As New RuntimeSequence(
                "Long",
                Me,
                GetType(Long),
                startValue:=-4L,
                incrementBy:=2,
                cyclic:=True,
                minValue:=-2L,
                maxValue:=2L)

            sequences(("Long", Nothing)) = [long]

            Me.AddAnnotation("Relational:Sequences", sequences)
            Me.AddAnnotation("Relational:MaxIdentifierLength", 128)
            Me.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.AddAnnotation("SqlServer:HiLoSequenceName", "HL")
            id.AddAnnotation("SqlServer:HiLoSequenceSchema", "S")
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New SequencesContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(code,
                        Sub(c) AssertFileContents("SequencesContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("SequencesContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DataEntityType.vb", e1, c))
                End Sub,
                Sub(model)
                    Assert.Equal(2, model.GetSequences().Count())

                    Dim longSequence = model.FindSequence("Long")
                    Assert.Same(model, longSequence.Model)
                    Assert.Equal(GetType(Long), longSequence.Type)
                    Assert.True(longSequence.IsCyclic)
                    Assert.Equal(-4, longSequence.StartValue)
                    Assert.Equal(-2, longSequence.MinValue)
                    Assert.Equal(2, longSequence.MaxValue)
                    Assert.Equal(2, longSequence.IncrementBy)
                    Assert.NotNull(longSequence.ToString())

                    Dim hiLo = model.FindSequence("HL", "S")
                    Assert.Same(model, DirectCast(hiLo, IReadOnlySequence).Model)
                    Assert.Equal("HL", hiLo.Name)
                    Assert.Equal("S", hiLo.Schema)
                    Assert.False(hiLo.IsCyclic)
                    Assert.Equal(1, hiLo.StartValue)
                    Assert.Null(hiLo.MinValue)
                    Assert.Null(hiLo.MaxValue)
                    Assert.Equal(10, hiLo.IncrementBy)
                    Assert.NotNull(hiLo.ToString())

                    Assert.Single(model.GetEntityTypes())
                    Dim dataEntity = model.FindEntityType(GetType(Data))
                    Assert.Same(hiLo, dataEntity.FindPrimaryKey().Properties.Single().FindHiLoSequence())
                End Sub)
        End Sub

        Public Class SequencesContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.HasSequence(Of Long)("Long").
                         HasMin(-2).
                         HasMax(2).
                         IsCyclic().
                         IncrementsBy(2).
                         StartsAt(-4)

                modelBuilder.Entity(Of Data)(Sub(eb)
                                                 eb.Property(Of Integer)("Id").UseHiLo("HL", "S")
                                                 eb.HasKey("Id")
                                             End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Key_sequences()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.KeySequencesContext))>
    Public Partial Class KeySequencesContextModel
        Inherits RuntimeModel

        Private Shared _Instance As KeySequencesContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New KeySequencesContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class KeySequencesContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            Dim sequences As New SortedDictionary(Of (String, String), ISequence)()
            Dim keySeq As New RuntimeSequence(
                "KeySeq",
                Me,
                GetType(Long),
                schema:="KeySeqSchema")

            sequences(("KeySeq", "KeySeqSchema")) = keySeq

            Me.AddAnnotation("Relational:Sequences", sequences)
            Me.AddAnnotation("Relational:MaxIdentifierLength", 128)
            Me.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.AddAnnotation("Relational:DefaultValueSql", "NEXT VALUE FOR [KeySeqSchema].[KeySeq]")
            id.AddAnnotation("SqlServer:SequenceName", "KeySeq")
            id.AddAnnotation("SqlServer:SequenceSchema", "KeySeqSchema")
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.Sequence)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New KeySequencesContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(
                    code,
                    Sub(c) AssertFileContents("KeySequencesContextModel.vb", rm1, c),
                    Sub(c) AssertFileContents("KeySequencesContextModelBuilder.vb", rm2, c),
                    Sub(c) AssertFileContents("DataEntityType.vb", e1, c))
                End Sub,
                Sub(Model)
                    Assert.Single(Model.GetSequences())

                    Dim keySequence = Model.FindSequence("KeySeq", "KeySeqSchema")
                    Assert.Same(Model, DirectCast(keySequence, IReadOnlySequence).Model)
                    Assert.Equal("KeySeq", keySequence.Name)
                    Assert.Equal("KeySeqSchema", keySequence.Schema)
                    Assert.False(keySequence.IsCyclic)
                    Assert.Equal(1, keySequence.StartValue)
                    Assert.Null(keySequence.MinValue)
                    Assert.Null(keySequence.MaxValue)
                    Assert.Equal(1, keySequence.IncrementBy)
                    Assert.NotNull(keySequence.ToString())

                    Assert.Single(DirectCast(Model.GetEntityTypes(), IEnumerable))
                    Dim dataEntity = Model.FindEntityType(GetType(Data))
                    Assert.Same(keySequence, dataEntity.FindPrimaryKey().Properties.Single().FindSequence())
                End Sub)
        End Sub

        Public Class KeySequencesContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of Data)(
                    Sub(eb)
                        eb.Property(Of Integer)("Id").UseSequence("KeySeq", "KeySeqSchema")
                        eb.HasKey("Id")
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub CheckConstraints()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.ConstraintsContext))>
    Public Partial Class ConstraintsContextModel
        Inherits RuntimeModel

        Private Shared _Instance As ConstraintsContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New ConstraintsContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class ConstraintsContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            Me.AddAnnotation("Relational:MaxIdentifierLength", 128)
            Me.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New ConstraintsContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(Code)
                    Assert.Collection(Code,
                                    Sub(c) AssertFileContents("ConstraintsContextModel.vb", rm1, c),
                                    Sub(c) AssertFileContents("ConstraintsContextModelBuilder.vb", rm2, c),
                                    Sub(c) AssertFileContents("DataEntityType.vb", e1, c))
                End Sub,
            Sub(model)
                Dim dataEntity = model.GetEntityTypes().Single()
                Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() dataEntity.GetCheckConstraints()).Message)
            End Sub)
        End Sub

        Public Class ConstraintsContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of Data)(Sub(eb)
                                                 eb.Property(Of Integer)("Id")
                                                 eb.HasKey("Id")
                                                 eb.HasCheckConstraint("idConstraint", "Id <> 0")
                                                 eb.HasCheckConstraint("anotherConstraint", "Id <> -1")
                                             End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Triggers()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.TriggersContext))>
    Public Partial Class TriggersContextModel
        Inherits RuntimeModel

        Private Shared _Instance As TriggersContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New TriggersContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class TriggersContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            Me.AddAnnotation("Relational:MaxIdentifierLength", 128)
            Me.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            Dim triggers As New SortedDictionary(Of String, ITrigger)()

            Dim trigger1 As New RuntimeTrigger(
                entityType,
                "Trigger1",
                "Trigger1",
                "Data",
                Nothing)

            triggers("Trigger1") = trigger1

            Dim trigger2 As New RuntimeTrigger(
                entityType,
                "Trigger2",
                "Trigger2",
                "Data",
                Nothing)

            triggers("Trigger2") = trigger2

            entityType.AddAnnotation("Relational:Triggers", triggers)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New TriggersContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(code,
                    Sub(c) AssertFileContents("TriggersContextModel.vb", rm1, c),
                    Sub(c) AssertFileContents("TriggersContextModelBuilder.vb", rm2, c),
                    Sub(c) AssertFileContents("DataEntityType.vb", e1, c))
                End Sub,
                Sub(Model)
                    Dim dataEntity = Model.GetEntityTypes().Single()

                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() dataEntity.GetCheckConstraints()).Message)
                End Sub)
        End Sub

        Public Class TriggersContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of Data)(
                    Sub(eb)
                        eb.Property(Of Integer)("Id")
                        eb.HasKey("Id")

                        eb.ToTable(
                            Sub(tb)
                                tb.HasTrigger("Trigger1")
                                tb.HasTrigger("Trigger2")
                            End Sub)
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
            Public Sub Sqlite()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure

Namespace Microsoft.EntityFrameworkCore.Metadata
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.SqliteContext))>
    Public Partial Class SqliteContextModel
        Inherits RuntimeModel

        Private Shared _Instance As SqliteContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New SqliteContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value
            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure

Namespace Microsoft.EntityFrameworkCore.Metadata
    Public Partial Class SqliteContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

        End Sub
    End Class
End Namespace
]]>.Value
            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports NetTopologySuite.Geometries

Namespace Microsoft.EntityFrameworkCore.Metadata
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)

            Dim point = entityType.AddProperty(
                "Point",
                GetType(Point),
                nullable:=True)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value
            Dim Options = CreateCompiledModelCodeGenerationOptions()
            Options.ModelNamespace = "Microsoft.EntityFrameworkCore.Metadata"

            Test(
                New SqliteContext(),
                Options,
                Sub(code)
                    Assert.Collection(code,
                Sub(c) AssertFileContents("SqliteContextModel.vb", rm1, c),
                Sub(c) AssertFileContents("SqliteContextModelBuilder.vb", rm2, c),
                Sub(c) AssertFileContents("DataEntityType.vb", e1, c))

                End Sub,
                Sub(model)
                    Assert.Single(model.GetEntityTypes())
                    Dim dataEntity = model.FindEntityType(GetType(Data))

                    Assert.Equal(GetType(Data).FullName, dataEntity.Name)
                    Assert.False(dataEntity.HasSharedClrType)
                    Assert.False(dataEntity.IsPropertyBag)
                    Assert.False(dataEntity.IsOwned())
                    Assert.IsType(Of ConstructorBinding)(dataEntity.ConstructorBinding)
                    Assert.Null(dataEntity.FindIndexerPropertyInfo())
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, dataEntity.GetChangeTrackingStrategy())
                    Assert.Equal("Data", dataEntity.GetTableName())
                    Assert.Null(dataEntity.GetSchema())

                    Dim point = dataEntity.FindProperty("Point")
                    Assert.Equal(GetType(Point), point.ClrType)
                    Assert.True(point.IsNullable)
                    Assert.Equal(ValueGenerated.Never, point.ValueGenerated)
                    Assert.Equal("Point", point.GetColumnName())
                    Assert.Equal("POINT", point.GetColumnType())
                    Assert.Null(point.GetValueConverter())
                    Assert.IsType(Of GeometryValueComparer(Of Point))(point.GetValueComparer())
                    Assert.IsType(Of GeometryValueComparer(Of Point))(point.GetKeyValueComparer())
                    Assert.Null(point.GetSrid())
                End Sub,
                GetType(SqliteNetTopologySuiteDesignTimeServices))
        End Sub

        Public Class SqliteContext
            Inherits Microsoft.EntityFrameworkCore.DbContext

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                options.
                    EnableServiceProviderCaching(False).
                    UseSqlite(Sub(o) o.UseNetTopologySuite())
            End Sub

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion)

                modelBuilder.Entity(Of Data)(
                    Sub(eb)
                        eb.Property(Of Integer)("Id")
                        eb.HasKey("Id")
                        eb.Property(Of Point)("Point").HasSrid(1101)
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Cosmos()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.CosmosContext))>
    Public Partial Class CosmosContextModel
        Inherits RuntimeModel

        Private Shared _Instance As CosmosContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New CosmosContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value


            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class CosmosContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            Me.AddAnnotation("Cosmos:ContainerName", "Default")
        End Sub
    End Class
End Namespace
]]>.Value


            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Newtonsoft.Json.Linq

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                afterSaveBehavior:=PropertySaveBehavior.Throw)

            Dim partitionId = entityType.AddProperty(
                "PartitionId",
                GetType(Long?),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                providerPropertyType:=GetType(String))

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.AddAnnotation("Cosmos:PropertyName", "JsonBlob")

            Dim id0 = entityType.AddProperty(
                "__id",
                GetType(String),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                valueGeneratorFactory:=AddressOf New IdValueGeneratorFactory().Create)
            id0.AddAnnotation("Cosmos:PropertyName", "id")

            Dim jObject = entityType.AddProperty(
                "__jObject",
                GetType(JObject),
                nullable:=True,
                valueGenerated:=ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior:=PropertySaveBehavior.Ignore,
                afterSaveBehavior:=PropertySaveBehavior.Ignore)
            jObject.AddAnnotation("Cosmos:PropertyName", "")

            Dim etag = entityType.AddProperty(
                "_etag",
                GetType(String),
                nullable:=True,
                concurrencyToken:=True,
                valueGenerated:=ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior:=PropertySaveBehavior.Ignore,
                afterSaveBehavior:=PropertySaveBehavior.Ignore)

            Dim key = entityType.AddKey(
                {id, partitionId})
            entityType.SetPrimaryKey(key)

            Dim key0 = entityType.AddKey(
                {id0, partitionId})

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Cosmos:ContainerName", "DataContainer")
            entityType.AddAnnotation("Cosmos:ETagName", "_etag")
            entityType.AddAnnotation("Cosmos:PartitionKeyName", "PartitionId")

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New CosmosContext(),
                CreateCompiledModelCodeGenerationOptions(),
            Sub(code)
                Assert.Collection(code,
                                  Sub(c) AssertFileContents("CosmosContextModel.vb", rm1, c),
                                  Sub(c) AssertFileContents("CosmosContextModelBuilder.vb", rm2, c),
                                  Sub(c) AssertFileContents("DataEntityType.vb", e2, c))
            End Sub,
        Sub(model)
            Assert.Single(model.GetEntityTypes())
            Dim dataEntity = model.FindEntityType(GetType(Data))
            Assert.Equal(GetType(Data).FullName, dataEntity.Name)
            Assert.False(dataEntity.HasSharedClrType)
            Assert.False(dataEntity.IsPropertyBag)
            Assert.False(dataEntity.IsOwned())
            Assert.IsType(Of ConstructorBinding)(dataEntity.ConstructorBinding)
            Assert.Null(dataEntity.FindIndexerPropertyInfo())
            Assert.Equal(ChangeTrackingStrategy.Snapshot, dataEntity.GetChangeTrackingStrategy())
            Assert.Equal("DataContainer", dataEntity.GetContainer())
            Assert.Null(dataEntity.FindDiscriminatorProperty())

            Dim id = dataEntity.FindProperty("Id")
            Assert.Equal(GetType(Integer), id.ClrType)
            Assert.Null(id.PropertyInfo)
            Assert.Null(id.FieldInfo)
            Assert.False(id.IsNullable)
            Assert.False(id.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.Never, id.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Throw, id.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Save, id.GetBeforeSaveBehavior())
            Assert.Equal("Id", id.GetJsonPropertyName())
            Assert.Null(id.GetValueGeneratorFactory())
            Assert.Null(id.GetValueConverter())
            Assert.NotNull(id.GetValueComparer())
            Assert.NotNull(id.GetKeyValueComparer())

            Dim storeId = dataEntity.FindProperty("__id")
            Assert.Equal(GetType(String), storeId.ClrType)
            Assert.Null(storeId.PropertyInfo)
            Assert.Null(storeId.FieldInfo)
            Assert.False(storeId.IsNullable)
            Assert.False(storeId.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.Never, storeId.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Throw, storeId.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Save, storeId.GetBeforeSaveBehavior())
            Assert.Equal("id", storeId.GetJsonPropertyName())
            Assert.IsType(Of IdValueGenerator)(storeId.GetValueGeneratorFactory()(storeId, dataEntity))
            Assert.Null(storeId.GetValueConverter())
            Assert.NotNull(storeId.GetValueComparer())
            Assert.NotNull(storeId.GetKeyValueComparer())

            Dim partitionId = dataEntity.FindProperty("PartitionId")
            Assert.Equal(GetType(Long?), partitionId.ClrType)
            Assert.Null(partitionId.PropertyInfo)
            Assert.Null(partitionId.FieldInfo)
            Assert.False(partitionId.IsNullable)
            Assert.False(partitionId.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.Never, partitionId.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Throw, partitionId.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Save, partitionId.GetBeforeSaveBehavior())
            Assert.Equal("PartitionId", partitionId.GetJsonPropertyName())
            Assert.Null(partitionId.GetValueGeneratorFactory())
            Assert.Null(partitionId.GetValueConverter())
            Assert.IsType(Of NumberToStringConverter(Of Long))(partitionId.FindTypeMapping().Converter)
            Assert.NotNull(partitionId.GetValueComparer())
            Assert.NotNull(partitionId.GetKeyValueComparer())

            Dim eTag = dataEntity.FindProperty("_etag")
            Assert.Equal(GetType(String), eTag.ClrType)
            Assert.Null(eTag.PropertyInfo)
            Assert.Null(eTag.FieldInfo)
            Assert.True(eTag.IsNullable)
            Assert.True(eTag.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.OnAddOrUpdate, eTag.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Ignore, eTag.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Ignore, eTag.GetBeforeSaveBehavior())
            Assert.Equal("_etag", eTag.GetJsonPropertyName())
            Assert.Null(eTag.GetValueGeneratorFactory())
            Assert.Null(eTag.GetValueConverter())
            Assert.NotNull(eTag.GetValueComparer())
            Assert.NotNull(eTag.GetKeyValueComparer())
            Assert.Equal("_etag", dataEntity.GetETagPropertyName())
            Assert.Same(eTag, dataEntity.GetETagProperty())

            Dim blob = dataEntity.FindProperty(NameOf(Data.Blob))
            Assert.Equal(GetType(Byte()), blob.ClrType)
            Assert.Equal(NameOf(Data.Blob), blob.PropertyInfo.Name)
            Assert.Equal("_Blob", blob.FieldInfo.Name)
            Assert.True(blob.IsNullable)
            Assert.False(blob.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.Never, blob.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Save, blob.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Save, blob.GetBeforeSaveBehavior())
            Assert.Equal("JsonBlob", blob.GetJsonPropertyName())
            Assert.Null(blob.GetValueGeneratorFactory())
            Assert.Null(blob.GetValueConverter())
            Assert.NotNull(blob.GetValueComparer())
            Assert.NotNull(blob.GetKeyValueComparer())

            Dim jObject = dataEntity.FindProperty("__jObject")
            Assert.Equal(GetType(JObject), jObject.ClrType)
            Assert.Null(jObject.PropertyInfo)
            Assert.Null(jObject.FieldInfo)
            Assert.True(jObject.IsNullable)
            Assert.False(jObject.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.OnAddOrUpdate, jObject.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Ignore, jObject.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Ignore, jObject.GetBeforeSaveBehavior())
            Assert.Equal("", jObject.GetJsonPropertyName())
            Assert.Null(jObject.GetValueGeneratorFactory())
            Assert.Null(jObject.GetValueConverter())
            Assert.NotNull(jObject.GetValueComparer())
            Assert.NotNull(jObject.GetKeyValueComparer())

            Assert.Equal(2, dataEntity.GetKeys().Count())

            Assert.Equal({id, partitionId, blob, storeId, jObject, eTag}, dataEntity.GetProperties())
        End Sub)
        End Sub

        Public Class CosmosContext
            Inherits DbContext

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                options.
                    EnableServiceProviderCaching(False).
                    UseCosmos("localhost", "_", "_")
            End Sub

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion)

                modelBuilder.HasDefaultContainer("Default")

                modelBuilder.Entity(Of Data)(Sub(eb)
                                                 eb.Property(Of Integer)("Id")
                                                 eb.Property(Of Long?)("PartitionId").HasConversion(Of String)()
                                                 eb.HasPartitionKey("PartitionId")
                                                 eb.HasKey("Id", "PartitionId")
                                                 eb.ToContainer("DataContainer")
                                                 eb.UseETagConcurrency()
                                                 eb.HasNoDiscriminator()
                                                 eb.Property(Function(d) d.Blob).ToJsonProperty("JsonBlob")
                                             End Sub)
            End Sub
        End Class

        Public Class Data
            Public Property Blob As Byte()
        End Class

        Public MustInherit Class ContextBase
            Inherits DbContext

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion)
            End Sub

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                options.EnableServiceProviderCaching(False).
                    UseInMemoryDatabase(NameOf(VisualBasicRuntimeModelCodeGeneratorTest))
            End Sub
        End Class

        Public MustInherit Class SqlServerContextBase
            Inherits DbContext

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion)
            End Sub

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                options.
                    EnableServiceProviderCaching(False).
                    UseSqlServer(Function(o) o.UseNetTopologySuite())
            End Sub
        End Class

        Protected Sub Test(context As DbContext,
                           options As CompiledModelCodeGenerationOptions,
                           Optional assertScaffold As Action(Of IReadOnlyCollection(Of ScaffoldedFile)) = Nothing,
                           Optional assertModel As Action(Of IModel) = Nothing,
                           Optional additionalDesignTimeServices As Type = Nothing,
                           Optional expectedExceptionMessage As String = Nothing)

            Dim Model = context.GetService(Of IDesignTimeModel)().Model

            Dim Services As New ServiceCollection()

            Services.AddEntityFrameworkDesignTimeServices()

            Dim vbServices As New EFCoreVisualBasicServices
            vbServices.ConfigureDesignTimeServices(Services)

            If additionalDesignTimeServices IsNot Nothing Then
                ConfigureDesignTimeServices(additionalDesignTimeServices, Services)
            End If

            ConfigureProviderServices(context.GetService(Of IDatabaseProvider)().Name, Services)
            ConfigureVisualBasicProviderServices(context.GetService(Of IDatabaseProvider)().Name, Services)

            options.ModelNamespace = If(options.ModelNamespace, "TestNamespace")
            options.ContextType = context.GetType()

            Dim generator = Services.
                                BuildServiceProvider(validateScopes:=True).
                                GetRequiredService(Of ICompiledModelCodeGeneratorSelector)().
                                Select(options)

            If expectedExceptionMessage IsNot Nothing Then
                Assert.Equal(expectedExceptionMessage,
                    Assert.Throws(Of InvalidOperationException)(Sub() generator.GenerateModel(Model, options)).Message)
                Exit Sub
            End If

            Dim scaffoldedFiles = generator.GenerateModel(Model, options)

            If assertScaffold IsNot Nothing Then
                assertScaffold(scaffoldedFiles)
            End If

            Dim build = New BuildSource With {
                .Sources = scaffoldedFiles.ToDictionary(Function(f) f.Path, Function(f) f.Code)
            }

            With build.References
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Abstractions"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Cosmos"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.InMemory"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Relational"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Sqlite"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.SqlServer"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Specification.Tests"))
                .Add(BuildReference.ByName("NetTopologySuite"))
                .Add(BuildReference.ByName("Newtonsoft.Json"))
                .Add(BuildReference.ByName(GetType(VisualBasicRuntimeModelCodeGeneratorTest).Assembly.GetName().Name))
            End With

            Dim Assembly = build.BuildInMemory()

            If assertModel IsNot Nothing Then
                Dim modelType = Assembly.GetType(options.ModelNamespace & "." & options.ContextType.Name & "Model")
                Dim instancePropertyInfo = modelType.GetProperty("Instance", BindingFlags.Public Or BindingFlags.Static)
                Dim compiledModel = DirectCast(instancePropertyInfo.GetValue(Nothing), IModel)

                Dim ModelRuntimeInitializer = context.GetService(Of IModelRuntimeInitializer)()
                assertModel(ModelRuntimeInitializer.Initialize(compiledModel, designTime:=False))
            End If

            If assertScaffold IsNot Nothing Then
                assertScaffold(scaffoldedFiles)
            End If
        End Sub

        Private Sub ConfigureProviderServices(provider As String, services As IServiceCollection)
            Dim providerAssembly = Assembly.Load(New AssemblyName(provider))

            Dim providerServicesAttribute = providerAssembly.GetCustomAttribute(Of DesignTimeProviderServicesAttribute)
            If providerServicesAttribute Is Nothing Then
                Throw New InvalidOperationException(DesignStrings.CannotFindDesignTimeProviderAssemblyAttribute(provider))
            End If

            Dim designTimeServicesType = providerAssembly.GetType(
                providerServicesAttribute.TypeName,
                throwOnError:=True,
                ignoreCase:=False)

            ConfigureDesignTimeServices(designTimeServicesType, services)
        End Sub

        Private Sub ConfigureVisualBasicProviderServices(provider As String, services As IServiceCollection)

            Dim VBAssembly = Assembly.Load("EntityFrameworkCore.VisualBasic")

            Dim Types = VBAssembly.GetTypes().
                                        Where(Function(t) t.GetCustomAttributes(Of VisualBasicDesignTimeProviderServicesAttribute).
                                                            Any(Function(x) x.ProviderName IsNot Nothing AndAlso
                                                                            x.ProviderName = provider)).
                                        ToList()

            Types.ForEach(Sub(t) ConfigureDesignTimeServices(t, services))
        End Sub

        Private Shared Sub ConfigureDesignTimeServices(designTimeServicesType As Type,
                                                       services As IServiceCollection)
            Dim designTimeServices = DirectCast(Activator.CreateInstance(designTimeServicesType), IDesignTimeServices)
            designTimeServices.ConfigureDesignTimeServices(services)
        End Sub

        Protected Shared Sub AssertFileContents(expectedPath As String,
                                                expectedCode As String,
                                                file As ScaffoldedFile)

            Assert.Equal(expectedPath, file.Path)
            Assert.Equal(expectedCode, file.Code, ignoreLineEndingDifferences:=True)
        End Sub

        Private Function CreateCompiledModelCodeGenerationOptions() As CompiledModelCodeGenerationOptions
            Return New CompiledModelCodeGenerationOptions With {.Language = "VB"}
        End Function

    End Class

    Public Class Internal
        Public Property Id As Long
    End Class

    Public Class Index
        Public Property Id As Guid
    End Class

    Public Class IdentityUser
        Inherits TestModels.AspNetIdentity.IdentityUser
    End Class

    Public Class SelfReferentialEntity
        Public Property Id As Long

        Public Property Collection As SelfReferentialProperty
    End Class

    Public Class SelfReferentialProperty
        Inherits List(Of SelfReferentialProperty)
    End Class
End Namespace

Namespace Scaffolding.TestModel.Internal
    Public Class DbContext
        Inherits ContextBase

        Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)

            MyBase.OnModelCreating(modelBuilder)

            modelBuilder.Entity(Of Scaffolding.Internal.Index)()
            modelBuilder.Entity(Of TestModels.AspNetIdentity.IdentityUser)()
            modelBuilder.Entity(Of IdentityUser)(
            Sub(eb)
                eb.HasDiscriminator().HasValue("DerivedIdentityUser")
            End Sub)
            modelBuilder.Entity(Of Scaffolding.Internal.Internal)()
        End Sub
    End Class

    Public Class SelfReferentialDbContext
        Inherits ContextBase

        Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
            MyBase.OnModelCreating(modelBuilder)

            modelBuilder.Entity(Of Scaffolding.Internal.SelfReferentialEntity)(
                Sub(eb)
                    eb.Property(Function(e) e.Collection).HasConversion(GetType(SelfReferentialPropertyValueConverter))
                End Sub)
        End sub
    End Class

    Public Class SelfReferentialPropertyValueConverter
        Inherits ValueConverter(Of Scaffolding.Internal.SelfReferentialProperty, String)

        Public Sub New()
            Me.New(Nothing)
        End Sub

        Public Sub New(hints As ConverterMappingHints)
            MyBase.New(Function(v) Nothing, Function(v) Nothing, hints)
        End Sub
    End Class
End Namespace
