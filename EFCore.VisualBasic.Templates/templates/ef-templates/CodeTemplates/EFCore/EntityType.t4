<# // For now, VB templates must be written in C# (see https://github.com/mono/t4/issues/94) #>
<#@ template language="C#" hostSpecific="true" linePragmas="false" #>
<#@ output extension=".vb" #>
<#@ assembly name="EntityFrameworkCore.VisualBasic" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="global::EntityFrameworkCore.VisualBasic.Design" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }

    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<IVisualBasicHelper>();

    var importsList = new List<string>
    {
        "System",
        "System.Collections.Generic"
    };

    if (Options.UseDataAnnotations)
    {
        importsList.Add("System.ComponentModel.DataAnnotations");
        importsList.Add("System.ComponentModel.DataAnnotations.Schema");
        importsList.Add("Microsoft.EntityFrameworkCore");
    }

    var FileNamespaceIdentifier = code.NamespaceIdentifier(Options.RootNamespace, NamespaceHint);

    if (!string.IsNullOrEmpty(FileNamespaceIdentifier))
    {
#>
Namespace <#= FileNamespaceIdentifier #>
<#
    }

    if (!string.IsNullOrEmpty(EntityType.GetComment()))
    {
#>
    ''' <summary>
    ''' <#= code.XmlComment(EntityType.GetComment(), indent: 1) #>
    ''' </summary>
<#
    }

    if (Options.UseDataAnnotations)
    {
        foreach (var dataAnnotation in EntityType.GetDataAnnotations(annotationCodeGenerator))
        {
#>
    <#= code.Fragment(dataAnnotation) #>
<#
        }
    }
#>
    Partial Public Class <#= EntityType.Name #>
<#
    var firstProperty = true;
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        if (!firstProperty)
        {
            WriteLine("");
        }

        if (!string.IsNullOrEmpty(property.GetComment()))
        {
#>
        ''' <summary>
        ''' <#= code.XmlComment(property.GetComment(), indent: 2) #>
        ''' </summary>
<#
        }

        if (Options.UseDataAnnotations)
        {
            var dataAnnotations = property.GetDataAnnotations(annotationCodeGenerator);

            foreach (var dataAnnotation in dataAnnotations)
            {
#>
        <#= code.Fragment(dataAnnotation) #>
<#
            }
        }

        importsList.AddRange(code.GetRequiredImports(property.ClrType));
#>
        Public Property <#= code.Identifier(property.Name) #> As <#= code.Reference(property.ClrType) #>
<#
        firstProperty = false;
    }

    foreach (var navigation in EntityType.GetNavigations())
    {
        WriteLine("");

        if (Options.UseDataAnnotations)
        {
            foreach (var dataAnnotation in navigation.GetDataAnnotations(annotationCodeGenerator))
            {
#>
        <#= code.Fragment(dataAnnotation) #>
<#
            }
        }

        var targetType = navigation.TargetEntityType.Name;
        if (navigation.IsCollection)
        {
#>
        Public Overridable Property <#= code.Identifier(navigation.Name) #> As ICollection(Of <#= targetType #>) = New List(Of <#= targetType #>)()
<#
        }
        else
        {
#>
        Public Overridable Property <#= code.Identifier(navigation.Name) #> As <#= targetType #>
<#
        }
    }

    foreach (var skipNavigation in EntityType.GetSkipNavigations())
    {
        WriteLine("");

        if (Options.UseDataAnnotations)
        {
            foreach (var dataAnnotation in skipNavigation.GetDataAnnotations(annotationCodeGenerator))
            {
#>
        <#= code.Fragment(dataAnnotation) #>
<#
            }
        }
#>
        Public Overridable Property <#= code.Identifier(skipNavigation.Name) #> As ICollection(Of <#= skipNavigation.TargetEntityType.Name #>) = New List(Of <#= skipNavigation.TargetEntityType.Name #>)()
<#
    }
#>
    End Class
<#
    if (!string.IsNullOrEmpty(FileNamespaceIdentifier))
    {
#>
End Namespace
<#
    }

    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();

    foreach (var ns in importsList.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
Imports <#= ns #>
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>
