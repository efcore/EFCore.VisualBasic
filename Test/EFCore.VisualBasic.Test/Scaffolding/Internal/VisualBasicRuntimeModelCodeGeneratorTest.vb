Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations.Schema
Imports System.Data
Imports System.IO
Imports System.Linq.Expressions
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Design
Imports EntityFrameworkCore.VisualBasic.Design.AnnotationCodeGeneratorProvider
Imports EntityFrameworkCore.VisualBasic.Design.Internal
Imports EntityFrameworkCore.VisualBasic.Migrations.Design.VisualBasicMigrationsGeneratorTests
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.ChangeTracking.Internal
Imports Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal
Imports Microsoft.EntityFrameworkCore.Design
Imports Microsoft.EntityFrameworkCore.Diagnostics
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Builders
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.Query.SqlExpressions
Imports Microsoft.EntityFrameworkCore.Scaffolding
Imports Microsoft.EntityFrameworkCore.Sqlite.Design.Internal
Imports Microsoft.EntityFrameworkCore.SqlServer.Design.Internal
Imports Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports Microsoft.EntityFrameworkCore.ValueGeneration.Internal
Imports Microsoft.Extensions.DependencyInjection
Imports NetTopologySuite
Imports NetTopologySuite.Geometries
Imports Newtonsoft.Json.Linq
Imports Xunit

Namespace Global
    Public Class GlobalNamespaceContext
        Inherits ContextBase

        Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
            MyBase.OnModelCreating(modelBuilder)

            modelBuilder.Entity("1",
                Sub(e)
                    e.Property(Of Integer)("Id")
                    e.HasKey("Id")
                End Sub)
        End Sub
    End Class
End Namespace

Namespace Scaffolding.Internal
    Public Class VisualBasicRuntimeModelCodeGeneratorTest

        <ConditionalFact>
        Public Sub Self_referential_property()
            Test(New TestModel.Internal.SelfReferentialDbContext(),
                CreateCompiledModelCodeGenerationOptions(),
                assertModel:=Sub(Model)
                                 Assert.Single(Model.GetEntityTypes())
                                 Assert.Same(Model, Model.FindRuntimeAnnotationValue("ReadOnlyModel"))
                             End Sub
            )
        End Sub

        <ConditionalFact>
        Public Sub Empty_model()

            Dim rm1 As String =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.EmptyContext))>
    Public Partial Class EmptyContextModel
        Inherits RuntimeModel

        Private Shared _Instance As EmptyContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New EmptyContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 As String =
            <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class EmptyContextModel

        Private Sub Initialize()
        End Sub
    End Class
End Namespace
]]>.Value

            Test(New EmptyContext(),
                 CreateCompiledModelCodeGenerationOptions(),
                 Sub(code)
                     Assert.
                        Collection(code,
                                   Sub(c) AssertFileContents("EmptyContextModel.vb", rm1, c),
                                   Sub(c) AssertFileContents("EmptyContextModelBuilder.vb", rm2, c))
                 End Sub,
                Sub(Model)
                    Assert.Empty(Model.GetEntityTypes())
                    Assert.Same(Model, Model.FindRuntimeAnnotationValue("ReadOnlyModel"))
                End Sub)
        End Sub

        Public Class EmptyContext
            Inherits ContextBase
        End Class

        <ConditionalFact>
        Public Sub Global_Namespace_works()
            Test(New GlobalNamespaceContext(),
                New CompiledModelCodeGenerationOptions With {
                    .Language = "VB",
                    .ModelNamespace = String.Empty
                },
                Sub(code)
                    Assert.All(code, Sub(f) Assert.DoesNotContain("Namespace ", f.Code))
                End Sub,
                Sub(Model)
                    Assert.NotNull(Model.FindEntityType("1"))
                End Sub)
        End Sub

        <ConditionalFact>
        Public Sub Throws_for_constructor_binding()
            Test(
                New ConstructorBindingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelConstructorBinding("Lazy", "Customize()", "LazyEntityType"))
        End Sub

        Public Class ConstructorBindingContext
            Inherits ContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "Lazy", Sub(e)
                                e.Property(Of Integer)("Id")
                                e.HasKey("Id")
                                DirectCast(e.Metadata, EntityType).ConstructorBinding = New ConstructorBinding(
                                    GetType(Object).GetConstructor(Type.EmptyTypes),
                                    Array.Empty(Of ParameterBinding)())
                            End Sub)
            End Sub

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                MyBase.OnConfiguring(options.UseLazyLoadingProxies())
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Manual_lazy_loading()
            Test(
                New LazyLoadingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                assertModel:=
                    Sub(Model)
                        Dim lazyConstructorEntity = Model.FindEntityType(GetType(LazyConstructorEntity))
                        Dim lazyParameterBinding = lazyConstructorEntity.ConstructorBinding.ParameterBindings.Single()
                        Assert.Equal(GetType(ILazyLoader), lazyParameterBinding.ParameterType)

                        Dim lazyPropertyEntity = Model.FindEntityType(GetType(LazyPropertyEntity))
                        Dim lazyServiceProperty = lazyPropertyEntity.GetServiceProperties().Single()
                        Assert.Equal(GetType(ILazyLoader), lazyServiceProperty.ClrType)

                        Dim lazyPropertyDelegateEntity = Model.FindEntityType(GetType(LazyPropertyDelegateEntity))
                        Assert.Equal(2, lazyPropertyDelegateEntity.GetServiceProperties().Count())
                        Assert.Contains(lazyPropertyDelegateEntity.GetServiceProperties(), Function(p) p.ClrType = GetType(ILazyLoader))
                        Assert.Contains(lazyPropertyDelegateEntity.GetServiceProperties(), Function(p) p.ClrType = GetType(Action(Of Object, String)))
                    End Sub)
        End Sub

        Public Class LazyLoadingContext
            Inherits ContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of LazyConstructorEntity)()

                modelBuilder.Entity(Of LazyPropertyDelegateEntity)(
                    Sub(b)
                        Dim ServiceProperty = DirectCast(b.Metadata.AddServiceProperty(
                                                    GetType(LazyPropertyDelegateEntity).GetAnyProperty("LoaderState"),
                                                    GetType(ILazyLoader)),
                                                ServiceProperty)

                        ServiceProperty.SetParameterBinding(
                            New DependencyInjectionParameterBinding(GetType(Object), GetType(ILazyLoader), ServiceProperty),
                            ConfigurationSource.Explicit)
                    End Sub)
            End Sub
        End Class

        Public Class LazyConstructorEntity
            Private ReadOnly _loader As ILazyLoader

            Public Sub New(loader As ILazyLoader)
                _loader = loader
            End Sub

            Public Property Id As Integer

            Public Property LazyPropertyEntity As LazyPropertyEntity
            Public Property LazyPropertyDelegateEntity As LazyPropertyDelegateEntity
        End Class

        Public Class LazyPropertyEntity
            Public Property Loader As ILazyLoader
            Public Property Id As Integer
            Public Property LazyConstructorEntityId As Integer

            Public Property LazyConstructorEntity As LazyConstructorEntity
        End Class

        Public Class LazyPropertyDelegateEntity
            Public Property LoaderState As Object
            Private Property LazyLoader As Action(Of Object, String)

            Public Property Id As Integer
            Public Property LazyConstructorEntityId As Integer

            Public Property LazyConstructorEntity As LazyConstructorEntity
        End Class

        <ConditionalFact>
        Public Sub Lazy_loading_proxies()
            Test(
                New LazyLoadingProxiesContext(),
                CreateCompiledModelCodeGenerationOptions(),
                assertModel:=
                    Sub(Model)
                        Assert.Equal(
                            GetType(ILazyLoader), Model.FindEntityType(GetType(LazyProxiesEntity1)).GetServiceProperties().Single().ClrType)
                        Assert.Equal(
                            GetType(ILazyLoader), Model.FindEntityType(GetType(LazyProxiesEntity1)).GetServiceProperties().Single().ClrType)
                    End Sub)
        End Sub

        Public Class LazyLoadingProxiesContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of LazyProxiesEntity1)()
            End Sub

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                MyBase.OnConfiguring(options.UseLazyLoadingProxies())
            End Sub
        End Class

        Public Class LazyProxiesEntity1
            Public Property Id As Integer

            Public Overridable Property ReferenceNavigation As LazyProxiesEntity2
        End Class

        Public Class LazyProxiesEntity2
            Public Property Loader As ILazyLoader

            Public Property Id As Integer
            Public Overridable Property CollectionNavigation As ICollection(Of LazyProxiesEntity1)
        End Class

        <ConditionalFact>
        Public Sub Throws_for_query_filter()
            Test(New QueryFilterContext(),
                 CreateCompiledModelCodeGenerationOptions(),
                 expectedExceptionMessage:=DesignStrings.CompiledModelQueryFilter("QueryFilter"))
        End Sub

        Public Class QueryFilterContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "QueryFilter", Sub(e)
                                       e.Property(Of Integer)("Id")
                                       e.HasKey("Id")
                                       e.HasQueryFilter(DirectCast(Function(x) x IsNot Nothing, Expression(Of Func(Of Dictionary(Of String, Object), Boolean))))
                                   End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_defining_query()
            Test(
                New DefiningQueryContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelDefiningQuery("object"))
        End Sub

        Public Class DefiningQueryContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                Dim expr As Expression(Of Func(Of IQueryable(Of Object))) =
                    Function() DirectCast([Set](Of Object)(), IQueryable(Of Object))

                modelBuilder.Entity(Of Object)(Sub(e)
                                                   e.Property(Of Integer)("Id")
                                                   e.HasKey("Id")
                                                   e.Metadata.SetInMemoryQuery(expr)
                                               End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_value_generator()
            Test(
                New ValueGeneratorContext(),
                CreateCompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=DesignStrings.CompiledModelValueGenerator(
                    "MyEntity", "Id", NameOf(PropertyBuilder.HasValueGeneratorFactory)))
        End Sub

        Public Class ValueGeneratorContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity", Sub(e)
                                    e.Property(Of Integer)("Id").
                                         HasValueGenerator(Function(p, en) Nothing)
                                    e.HasKey("Id")
                                End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Custom_value_converter()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.ValueConverterContext))>
    Public Partial Class ValueConverterContextModel
        Inherits RuntimeModel

        Private Shared _Instance As ValueConverterContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New ValueConverterContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 = <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class ValueConverterContextModel

        Private Sub Initialize()
            Dim myEntity = MyEntityEntityType.Create(Me)

            MyEntityEntityType.CreateAnnotations(myEntity)

        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion

Namespace TestNamespace
    Friend Partial Class MyEntityEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "MyEntity",
                GetType(Dictionary(Of String, Object)),
                baseEntityType,
                sharedClrType:=True,
                indexerPropertyInfo:=RuntimeEntityType.FindIndexerProperty(GetType(Dictionary(Of String, Object))),
                propertyBag:=True)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of Integer, Integer)(
                    Function(i As Integer) i,
                    Function(i As Integer) i),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of Integer, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of Integer, Integer)(
                        Function(i As Integer) i,
                        Function(i As Integer) i)))

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(New ValueConverterContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.
                        Collection(code,
                        Sub(c) AssertFileContents("ValueConverterContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("ValueConverterContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("MyEntityEntityType.vb", e1, c))
                End Sub,
                Sub(model)
                    Dim EntityType = model.GetEntityTypes().Single()

                    Dim Converter = EntityType.FindProperty("Id").GetTypeMapping().Converter
                    Assert.Equal(1, Converter.ConvertToProvider(1))
                End Sub)
        End Sub

        Public Class ValueConverterContext
            Inherits ContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity", Sub(e)
                                    e.Property(Of Integer)("Id").HasConversion(Function(i) i, Function(i) i)
                                    e.HasKey("Id")
                                End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Custom_value_comparer()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.ValueComparerContext))>
    Public Partial Class ValueComparerContextModel
        Inherits RuntimeModel

        Private Shared _Instance As ValueComparerContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New ValueComparerContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class ValueComparerContextModel

        Private Sub Initialize()
            Dim myEntity = MyEntityEntityType.Create(Me)

            MyEntityEntityType.CreateAnnotations(myEntity)

        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.Json

Namespace TestNamespace
    Friend Partial Class MyEntityEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "MyEntity",
                GetType(Dictionary(Of String, Object)),
                baseEntityType,
                sharedClrType:=True,
                indexerPropertyInfo:=RuntimeEntityType.FindIndexerProperty(GetType(Dictionary(Of String, Object))),
                propertyBag:=True)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                providerPropertyType:=GetType(Integer))
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(l As Integer, r As Integer) False,
                    Function(v As Integer) 0,
                    Function(v As Integer) 1),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(l As Integer, r As Integer) False,
                    Function(v As Integer) 0,
                    Function(v As Integer) 1),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(l As Integer, r As Integer) False,
                    Function(v As Integer) 0,
                    Function(v As Integer) 1),
                clrType:=GetType(Integer),
                jsonValueReaderWriter:=JsonInt32ReaderWriter.Instance)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value


            Test(New ValueComparerContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.
                        Collection(code,
                        Sub(c) AssertFileContents("ValueComparerContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("ValueComparerContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("MyEntityEntityType.vb", e1, c))
                End Sub,
                Sub(model)
                    Dim entityType = model.GetEntityTypes().Single()

                    Dim lambda = TryCast(entityType.FindProperty("Id").GetValueComparer().SnapshotExpression, Expression(Of Func(Of Integer, Integer)))
                    Dim constant = TryCast(lambda?.Body, ConstantExpression)
                    Assert.True(lambda IsNot Nothing AndAlso constant IsNot Nothing AndAlso CInt(constant.Value) = 1)
                End Sub)
        End Sub

        Public Class ValueComparerContext
            Inherits ContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)

                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity", Sub(e)
                                    e.Property(Of Integer)("Id").
                                            HasConversion(GetType(Integer), New FakeValueComparer())
                                    e.HasKey("Id")
                                End Sub)
            End Sub
        End Class

        Private Class FakeValueComparer
            Inherits ValueComparer(Of Integer)

            Public Sub New()
                MyBase.New(Function(l, r) False, Function(v) 0, Function(v) 1)
            End Sub

            Public Overrides ReadOnly Property Type As Type = GetType(Integer)

            Public Overrides Function Equals(left As Object, right As Object) As Boolean
                Throw New NotImplementedException()
            End Function

            Public Overrides Function GetHashCode(instance As Object) As Integer
                Throw New NotImplementedException()
            End Function

            Public Overrides Function Snapshot(instance As Object) As Object
                Throw New NotImplementedException()
            End Function
        End Class

        <ConditionalFact>
        Public Sub Custom_provider_value_comparer()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.ProviderValueComparerContext))>
    Public Partial Class ProviderValueComparerContextModel
        Inherits RuntimeModel

        Private Shared _Instance As ProviderValueComparerContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New ProviderValueComparerContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class ProviderValueComparerContextModel

        Private Sub Initialize()
            Dim myEntity = MyEntityEntityType.Create(Me)

            MyEntityEntityType.CreateAnnotations(myEntity)

        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.Json

Namespace TestNamespace
    Friend Partial Class MyEntityEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "MyEntity",
                GetType(Dictionary(Of String, Object)),
                baseEntityType,
                sharedClrType:=True,
                indexerPropertyInfo:=RuntimeEntityType.FindIndexerProperty(GetType(Dictionary(Of String, Object))),
                propertyBag:=True)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                providerPropertyType:=GetType(Integer))
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(l As Integer, r As Integer) False,
                    Function(v As Integer) 0,
                    Function(v As Integer) 1),
                clrType:=GetType(Integer),
                jsonValueReaderWriter:=JsonInt32ReaderWriter.Instance)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New ProviderValueComparerContext,
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.
                        Collection(code,
                            Sub(c) AssertFileContents("ProviderValueComparerContextModel.vb", rm1, c),
                            Sub(c) AssertFileContents("ProviderValueComparerContextModelBuilder.vb", rm2, c),
                            Sub(c) AssertFileContents("MyEntityEntityType.vb", e1, c))
                End Sub,
                Sub(model)
                    Dim entityType = model.GetEntityTypes().Single()

                    Dim lambda = TryCast(entityType.FindProperty("Id").GetProviderValueComparer().SnapshotExpression, Expression(Of Func(Of Integer, Integer)))
                    Dim constant = TryCast(lambda?.Body, ConstantExpression)

                    Assert.True(lambda IsNot Nothing AndAlso constant IsNot Nothing AndAlso CInt(constant.Value) = 1)
                End Sub)
        End Sub

        Public Class ProviderValueComparerContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity",
                    Sub(e)
                        e.Property(Of Integer)("Id").HasConversion(GetType(Integer), Nothing, New FakeValueComparer())
                        e.HasKey("Id")
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Custom_type_mapping()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.TypeMappingContext))>
    Public Partial Class TypeMappingContextModel
        Inherits RuntimeModel

        Private Shared _Instance As TypeMappingContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New TypeMappingContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class TypeMappingContextModel

        Private Sub Initialize()
            Dim myEntity = MyEntityEntityType.Create(Me)

            MyEntityEntityType.CreateAnnotations(myEntity)

        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.Json

Namespace TestNamespace
    Friend Partial Class MyEntityEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "MyEntity",
                GetType(Dictionary(Of String, Object)),
                baseEntityType,
                sharedClrType:=True,
                indexerPropertyInfo:=RuntimeEntityType.FindIndexerProperty(GetType(Dictionary(Of String, Object))),
                propertyBag:=True)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                clrType:=GetType(Integer),
                jsonValueReaderWriter:=JsonInt32ReaderWriter.Instance)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New TypeMappingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.
                        Collection(code,
                            Sub(c) AssertFileContents("TypeMappingContextModel.vb", rm1, c),
                            Sub(c) AssertFileContents("TypeMappingContextModelBuilder.vb", rm2, c),
                            Sub(c) AssertFileContents("MyEntityEntityType.vb", e1, c))
                End Sub,
                Sub(model)
                    Dim entityType = model.GetEntityTypes().Single()

                    Dim typeMapping = entityType.FindProperty("Id").FindTypeMapping()
                    Assert.IsType(Of InMemoryTypeMapping)(typeMapping)
                    Assert.IsType(Of JsonInt32ReaderWriter)(typeMapping.JsonValueReaderWriter)
                End Sub)
        End Sub

        Public Class TypeMappingContext
            Inherits ContextBase
            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(
                    "MyEntity",
                    Sub(e)
                        e.Property(Of Integer)("Id").Metadata.SetTypeMapping(
                            New InMemoryTypeMapping(GetType(Integer), jsonValueReaderWriter:=JsonInt32ReaderWriter.Instance))
                        e.HasKey("Id")
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Custom_function_type_mapping()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.FunctionTypeMappingContext))>
    Public Partial Class FunctionTypeMappingContextModel
        Inherits RuntimeModel

        Private Shared _Instance As FunctionTypeMappingContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New FunctionTypeMappingContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Public Partial Class FunctionTypeMappingContextModel

        Private Sub Initialize()
            Dim functions As New SortedDictionary(Of String, IDbFunction)()
            Dim getSqlFragmentShared As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+FunctionTypeMappingContext.GetSqlFragmentShared(string)",
                Me,
                GetType(String),
                "GetSqlFragmentShared",
                schema:="dbo",
                storeType:="varchar",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.FunctionTypeMappingContext).GetMethod(
                    "GetSqlFragmentShared",
                    BindingFlags.Public Or BindingFlags.Static Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {GetType(String)},
                    Nothing),
                scalar:=True,
                nullable:=True)

            Dim param = getSqlFragmentShared.AddParameter(
                "param",
                GetType(String),
                False,
                "nvarchar(max)")
            param.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nvarchar(max)",
                    dbType:=System.Data.DbType.String),
                storeTypePostfix:=StoreTypePostfix.None)

            getSqlFragmentShared.TypeMapping = StringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="varchar",
                    dbType:=System.Data.DbType.AnsiString))
            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+FunctionTypeMappingContext.GetSqlFragmentShared(string)") = getSqlFragmentShared

            AddAnnotation("Relational:DbFunctions", functions)
            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)
            Dim getSqlFragmentShared = DirectCast(Me.FindDbFunction("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+FunctionTypeMappingContext.GetSqlFragmentShared(string)"), IRuntimeDbFunction)
            Dim getSqlFragmentSharedFunction As New StoreFunction(getSqlFragmentShared, relationalModel)
            Dim paramFunctionParameter = getSqlFragmentSharedFunction.FindParameter("param")
            relationalModel.Functions.Add(
                ("GetSqlFragmentShared", "dbo", {"nvarchar(max)"}),
                getSqlFragmentSharedFunction)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Test(
                New FunctionTypeMappingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.
                        Collection(code,
                            Sub(c) AssertFileContents("FunctionTypeMappingContextModel.vb", rm1, c),
                            Sub(c) AssertFileContents("FunctionTypeMappingContextModelBuilder.vb", rm2, c))
                End Sub,
                Sub(model)
                    Dim [function] = model.GetDbFunctions().Single()

                    Dim typeMapping = [function].TypeMapping
                    Assert.IsType(Of StringTypeMapping)(typeMapping)
                    Assert.Equal("varchar", typeMapping.StoreType)
                End Sub)
        End Sub

        Public Class FunctionTypeMappingContext
            Inherits SqlServerContextBase

            Public Shared Function GetSqlFragmentShared(param As String) As String
                Throw New NotImplementedException()
            End Function

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    HasDbFunction(GetType(FunctionTypeMappingContext).
                    GetMethod(NameOf(GetSqlFragmentShared))).
                    Metadata.TypeMapping = New StringTypeMapping("varchar", DbType.AnsiString)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Custom_function_parameter_type_mapping()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.FunctionParameterTypeMappingContext))>
    Public Partial Class FunctionParameterTypeMappingContextModel
        Inherits RuntimeModel

        Private Shared _Instance As FunctionParameterTypeMappingContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New FunctionParameterTypeMappingContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Public Partial Class FunctionParameterTypeMappingContextModel

        Private Sub Initialize()
            Dim functions As New SortedDictionary(Of String, IDbFunction)()
            Dim getSqlFragmentShared As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+FunctionParameterTypeMappingContext.GetSqlFragmentShared(string)",
                Me,
                GetType(String),
                "GetSqlFragmentShared",
                schema:="dbo",
                storeType:="nvarchar(max)",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.FunctionParameterTypeMappingContext).GetMethod(
                    "GetSqlFragmentShared",
                    BindingFlags.Public Or BindingFlags.Static Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {GetType(String)},
                    Nothing),
                scalar:=True,
                nullable:=True)

            Dim param = getSqlFragmentShared.AddParameter(
                "param",
                GetType(String),
                False,
                "varchar")
            param.TypeMapping = StringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="varchar",
                    dbType:=System.Data.DbType.AnsiString))

            getSqlFragmentShared.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nvarchar(max)",
                    dbType:=System.Data.DbType.String),
                storeTypePostfix:=StoreTypePostfix.None)
            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+FunctionParameterTypeMappingContext.GetSqlFragmentShared(string)") = getSqlFragmentShared

            AddAnnotation("Relational:DbFunctions", functions)
            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)
            Dim getSqlFragmentShared = DirectCast(Me.FindDbFunction("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+FunctionParameterTypeMappingContext.GetSqlFragmentShared(string)"), IRuntimeDbFunction)
            Dim getSqlFragmentSharedFunction As New StoreFunction(getSqlFragmentShared, relationalModel)
            Dim paramFunctionParameter = getSqlFragmentSharedFunction.FindParameter("param")
            relationalModel.Functions.Add(
                ("GetSqlFragmentShared", "dbo", {"varchar"}),
                getSqlFragmentSharedFunction)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Test(
                New FunctionParameterTypeMappingContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.
                        Collection(code,
                            Sub(c) AssertFileContents("FunctionParameterTypeMappingContextModel.vb", rm1, c),
                            Sub(c) AssertFileContents("FunctionParameterTypeMappingContextModelBuilder.vb", rm2, c))
                End Sub,
                Sub(model)
                    Dim [function] = model.GetDbFunctions().Single()
                    Dim parameter = [function].Parameters.Single()

                    Dim typeMapping = parameter.TypeMapping
                    Assert.IsType(Of StringTypeMapping)(typeMapping)
                    Assert.Equal("varchar", typeMapping.StoreType)
                End Sub)
        End Sub

        Public Class FunctionParameterTypeMappingContext
            Inherits SqlServerContextBase

            Public Shared Function GetSqlFragmentShared(param As String) As String
                Throw New NotImplementedException()
            End Function

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    HasDbFunction(GetType(FunctionParameterTypeMappingContext).
                    GetMethod(NameOf(GetSqlFragmentShared))).
                    HasParameter("param").Metadata.TypeMapping = New StringTypeMapping("varchar", DbType.AnsiString)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Throws_for_custom_function_translation()
            Test(
                New FunctionTranslationContext(),
                New CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage:=RelationalStrings.CompiledModelFunctionTranslation("GetSqlFragmentStatic"))
        End Sub

        Public Class FunctionTranslationContext
            Inherits SqlServerContextBase

            Public Shared Function GetSqlFragmentStatic() As String
                Throw New NotImplementedException()
            End Function

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.HasDbFunction(GetType(FunctionTranslationContext).GetMethod(NameOf(GetSqlFragmentStatic))).
                             HasTranslation(Function(args) New SqlFragmentExpression("NULL"))
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Fully_qualified_model()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.TestModel.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace Internal
    <DbContext(GetType(DbContext))>
    Public Partial Class DbContextModel
        Inherits RuntimeModel

        Private Shared _Instance As DbContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New DbContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim DbContext =
            <![CDATA[' <auto-generated />
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace Internal
    Public Partial Class DbContextModel

        Private Sub Initialize()
            Dim index = IndexEntityType.Create(Me)
            Dim internal = InternalEntityType.Create(Me)
            Dim identityUser = IdentityUserEntityType.Create(Me)
            Dim identityUser0 = IdentityUser0EntityType.Create(Me, identityUser)

            IndexEntityType.CreateAnnotations(index)
            InternalEntityType.CreateAnnotations(internal)
            IdentityUserEntityType.CreateAnnotations(identityUser)
            IdentityUser0EntityType.CreateAnnotations(identityUser0)

        End Sub
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.Json

Namespace Internal
    Friend Partial Class IndexEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Index",
                GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Index),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Guid),
                propertyInfo:=GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Index).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Index).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"))
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                clrType:=GetType(Guid),
                jsonValueReaderWriter:=JsonGuidReaderWriter.Instance)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.Json

Namespace Internal
    Friend Partial Class InternalEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Internal",
                GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Internal),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Long),
                propertyInfo:=GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Internal).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(EntityFrameworkCore.VisualBasic.Scaffolding.Internal.Internal).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0L)
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                clrType:=GetType(Long),
                jsonValueReaderWriter:=JsonInt64ReaderWriter.Instance)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e3 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.InMemory.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.TestModels.AspNetIdentity
Imports Microsoft.EntityFrameworkCore.ValueGeneration

Namespace Internal
    Friend Partial Class IdentityUserEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.TestModels.AspNetIdentity.IdentityUser",
                GetType(IdentityUser),
                baseEntityType,
                discriminatorProperty:="Discriminator",
                discriminatorValue:="IdentityUser")

            Dim id = entityType.AddProperty(
                "Id",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<Id>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim accessFailedCount = entityType.AddProperty(
                "AccessFailedCount",
                GetType(Integer),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("AccessFailedCount", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<AccessFailedCount>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=0)
            accessFailedCount.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                clrType:=GetType(Integer),
                jsonValueReaderWriter:=JsonInt32ReaderWriter.Instance)

            Dim concurrencyStamp = entityType.AddProperty(
                "ConcurrencyStamp",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("ConcurrencyStamp", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<ConcurrencyStamp>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            concurrencyStamp.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim discriminator = entityType.AddProperty(
                "Discriminator",
                GetType(String),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                valueGeneratorFactory:=AddressOf New DiscriminatorValueGeneratorFactory().Create)
            discriminator.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim email = entityType.AddProperty(
                "Email",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("Email", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<Email>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            email.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim emailConfirmed = entityType.AddProperty(
                "EmailConfirmed",
                GetType(Boolean),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("EmailConfirmed", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<EmailConfirmed>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=False)
            emailConfirmed.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                keyComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                providerValueComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                clrType:=GetType(Boolean),
                jsonValueReaderWriter:=JsonBoolReaderWriter.Instance)

            Dim lockoutEnabled = entityType.AddProperty(
                "LockoutEnabled",
                GetType(Boolean),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("LockoutEnabled", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<LockoutEnabled>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=False)
            lockoutEnabled.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                keyComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                providerValueComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                clrType:=GetType(Boolean),
                jsonValueReaderWriter:=JsonBoolReaderWriter.Instance)

            Dim lockoutEnd = entityType.AddProperty(
                "LockoutEnd",
                GetType(DateTimeOffset?),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("LockoutEnd", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<LockoutEnd>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            lockoutEnd.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of DateTimeOffset?)(
                    Function(v1 As Nullable(Of DateTimeOffset), v2 As Nullable(Of DateTimeOffset)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, DateTimeOffset).EqualsExact(CType(v2, DateTimeOffset)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of DateTimeOffset)) If(v.HasValue, CType(v, DateTimeOffset).GetHashCode(), 0),
                    Function(v As Nullable(Of DateTimeOffset)) If(v.HasValue, CType(CType(v, DateTimeOffset), Nullable(Of DateTimeOffset)), CType(Nothing, Nullable(Of DateTimeOffset)))),
                keyComparer:=New ValueComparer(Of DateTimeOffset?)(
                    Function(v1 As Nullable(Of DateTimeOffset), v2 As Nullable(Of DateTimeOffset)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, DateTimeOffset).EqualsExact(CType(v2, DateTimeOffset)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of DateTimeOffset)) If(v.HasValue, CType(v, DateTimeOffset).GetHashCode(), 0),
                    Function(v As Nullable(Of DateTimeOffset)) If(v.HasValue, CType(CType(v, DateTimeOffset), Nullable(Of DateTimeOffset)), CType(Nothing, Nullable(Of DateTimeOffset)))),
                providerValueComparer:=New ValueComparer(Of DateTimeOffset?)(
                    Function(v1 As Nullable(Of DateTimeOffset), v2 As Nullable(Of DateTimeOffset)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, DateTimeOffset).EqualsExact(CType(v2, DateTimeOffset)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of DateTimeOffset)) If(v.HasValue, CType(v, DateTimeOffset).GetHashCode(), 0),
                    Function(v As Nullable(Of DateTimeOffset)) If(v.HasValue, CType(CType(v, DateTimeOffset), Nullable(Of DateTimeOffset)), CType(Nothing, Nullable(Of DateTimeOffset)))),
                clrType:=GetType(DateTimeOffset),
                jsonValueReaderWriter:=JsonDateTimeOffsetReaderWriter.Instance)

            Dim normalizedEmail = entityType.AddProperty(
                "NormalizedEmail",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("NormalizedEmail", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<NormalizedEmail>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            normalizedEmail.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim normalizedUserName = entityType.AddProperty(
                "NormalizedUserName",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("NormalizedUserName", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<NormalizedUserName>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            normalizedUserName.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim passwordHash = entityType.AddProperty(
                "PasswordHash",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("PasswordHash", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<PasswordHash>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            passwordHash.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim phoneNumber = entityType.AddProperty(
                "PhoneNumber",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("PhoneNumber", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<PhoneNumber>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            phoneNumber.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim phoneNumberConfirmed = entityType.AddProperty(
                "PhoneNumberConfirmed",
                GetType(Boolean),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("PhoneNumberConfirmed", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<PhoneNumberConfirmed>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=False)
            phoneNumberConfirmed.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                keyComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                providerValueComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                clrType:=GetType(Boolean),
                jsonValueReaderWriter:=JsonBoolReaderWriter.Instance)

            Dim securityStamp = entityType.AddProperty(
                "SecurityStamp",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("SecurityStamp", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<SecurityStamp>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            securityStamp.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim twoFactorEnabled = entityType.AddProperty(
                "TwoFactorEnabled",
                GetType(Boolean),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("TwoFactorEnabled", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<TwoFactorEnabled>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=False)
            twoFactorEnabled.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                keyComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                providerValueComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                clrType:=GetType(Boolean),
                jsonValueReaderWriter:=JsonBoolReaderWriter.Instance)

            Dim userName = entityType.AddProperty(
                "UserName",
                GetType(String),
                propertyInfo:=GetType(IdentityUser(Of String)).GetProperty("UserName", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(IdentityUser(Of String)).GetField("<UserName>k__BackingField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            userName.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e4 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace Internal
    Friend Partial Class IdentityUser0EntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.IdentityUser",
                GetType(IdentityUser),
                baseEntityType,
                discriminatorProperty:="Discriminator",
                discriminatorValue:="DerivedIdentityUser")

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim CompiledModelCodeGenerationOptions = CreateCompiledModelCodeGenerationOptions()
            CompiledModelCodeGenerationOptions.ModelNamespace = "Internal"

            Test(
                New TestModel.Internal.DbContext(),
                CompiledModelCodeGenerationOptions,
                Sub(code)
                    Assert.Collection(
                        code,
                        Sub(c) AssertFileContents("DbContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("DbContextModelBuilder.vb", DbContext, c),
                        Sub(c) AssertFileContents("IndexEntityType.vb", e1, c),
                        Sub(c) AssertFileContents("InternalEntityType.vb", e2, c),
                        Sub(c) AssertFileContents("IdentityUserEntityType.vb", e3, c),
                        Sub(c) AssertFileContents("IdentityUser0EntityType.vb", e4, c))
                End Sub,
                Sub(Model)
                    Assert.Equal(4, Model.GetEntityTypes().Count())
                    Assert.Same(Model, Model.FindRuntimeAnnotationValue("ReadOnlyModel"))
                End Sub,
                additionalDesignTimeServices:=GetType(FullyQualifiedDesignTimeServices))
        End Sub

        Private Class FullyQualifiedDesignTimeServices
            Implements IDesignTimeServices
            Public Sub ConfigureDesignTimeServices(serviceCollection As IServiceCollection) _
                Implements IDesignTimeServices.ConfigureDesignTimeServices

                serviceCollection.AddSingleton(Of IVisualBasicHelper, FullyQualifiedVisualBasicHelper)()
            End Sub
        End Class

        Private Class FullyQualifiedVisualBasicHelper
            Inherits VisualBasicHelper

            Public Sub New(typeMappingSource As ITypeMappingSource)
                MyBase.New(typeMappingSource)
            End Sub

            Protected Overrides Function ShouldUseFullName(type As Type) As Boolean
                Return MyBase.ShouldUseFullName(type)
            End Function

            Protected Overrides Function ShouldUseFullName(shortTypeName As String) As Boolean
                Return MyBase.ShouldUseFullName(shortTypeName) OrElse
                       shortTypeName = NameOf(Index) OrElse
                       shortTypeName = NameOf(Internal)
            End Function
        End Class

        <ConditionalFact>
        Public Sub BigModel()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.BigContext))>
    Public Partial Class BigContextModel
        Inherits RuntimeModel

        Private Shared _Instance As BigContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New BigContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.Migrations

Namespace TestNamespace
    Public Partial Class BigContextModel

        Private Sub Initialize()
            Dim dependentBase = DependentBaseEntityType.Create(Me)
            Dim principalBase = PrincipalBaseEntityType.Create(Me)
            Dim ownedType = OwnedTypeEntityType.Create(Me)
            Dim ownedType0 = OwnedType0EntityType.Create(Me)
            Dim principalBasePrincipalDerivedDependentBasebyte = PrincipalBasePrincipalDerivedDependentBasebyteEntityType.Create(Me)
            Dim dependentDerived = DependentDerivedEntityType.Create(Me, dependentBase)
            Dim principalDerived = PrincipalDerivedEntityType.Create(Me, principalBase)

            DependentBaseEntityType.CreateForeignKey1(dependentBase, principalBase)
            DependentBaseEntityType.CreateForeignKey2(dependentBase, principalDerived)
            OwnedTypeEntityType.CreateForeignKey1(ownedType, principalBase)
            OwnedTypeEntityType.CreateForeignKey2(ownedType, ownedType)
            OwnedType0EntityType.CreateForeignKey1(ownedType0, principalDerived)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey1(principalBasePrincipalDerivedDependentBasebyte, principalDerived)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey2(principalBasePrincipalDerivedDependentBasebyte, principalBase)
            PrincipalDerivedEntityType.CreateForeignKey1(principalDerived, principalBase)

            PrincipalBaseEntityType.CreateSkipNavigation1(principalBase, principalDerived, principalBasePrincipalDerivedDependentBasebyte)
            PrincipalDerivedEntityType.CreateSkipNavigation1(principalDerived, principalBase, principalBasePrincipalDerivedDependentBasebyte)

            DependentBaseEntityType.CreateAnnotations(dependentBase)
            PrincipalBaseEntityType.CreateAnnotations(principalBase)
            OwnedTypeEntityType.CreateAnnotations(ownedType)
            OwnedType0EntityType.CreateAnnotations(ownedType0)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateAnnotations(principalBasePrincipalDerivedDependentBasebyte)
            DependentDerivedEntityType.CreateAnnotations(dependentDerived)
            PrincipalDerivedEntityType.CreateAnnotations(principalDerived)

            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim dependentBase = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            dependentBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>", Nothing, relationalModel)
            Dim dataColumnBase As New ColumnBase(Of ColumnMappingBase)("Data", "char(20)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Data", dataColumnBase)
            Dim enumDiscriminatorColumnBase As New ColumnBase(Of ColumnMappingBase)("EnumDiscriminator", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("EnumDiscriminator", enumDiscriminatorColumnBase)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "tinyint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Id", idColumnBase)
            Dim moneyColumnBase As New ColumnBase(Of ColumnMappingBase)("Money", "decimal(9,3)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Money", moneyColumnBase)
            Dim principalAlternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalAlternateId", "uniqueidentifier", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("PrincipalAlternateId", principalAlternateIdColumnBase)
            Dim principalIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalId", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("PrincipalId", principalIdColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase As New TableMappingBase(Of ColumnMappingBase)(dependentBase, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("PrincipalAlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("PrincipalId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enumDiscriminatorColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("EnumDiscriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            dependentBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim dependentBasebyteTable As New Table("DependentBase<byte?>", Nothing, relationalModel)
            Dim principalIdColumn As New Column("PrincipalId", "bigint", dependentBasebyteTable)
            dependentBasebyteTable.Columns.Add("PrincipalId", principalIdColumn)
            Dim principalAlternateIdColumn As New Column("PrincipalAlternateId", "uniqueidentifier", dependentBasebyteTable)
            dependentBasebyteTable.Columns.Add("PrincipalAlternateId", principalAlternateIdColumn)
            Dim dataColumn As New Column("Data", "char(20)", dependentBasebyteTable) With {
                .IsNullable = True
            }
            dependentBasebyteTable.Columns.Add("Data", dataColumn)
            Dim enumDiscriminatorColumn As New Column("EnumDiscriminator", "int", dependentBasebyteTable)
            dependentBasebyteTable.Columns.Add("EnumDiscriminator", enumDiscriminatorColumn)
            Dim idColumn As New Column("Id", "tinyint", dependentBasebyteTable) With {
                .IsNullable = True
            }
            dependentBasebyteTable.Columns.Add("Id", idColumn)
            Dim moneyColumn As New Column("Money", "decimal(9,3)", dependentBasebyteTable) With {
                .IsNullable = True
            }
            dependentBasebyteTable.Columns.Add("Money", moneyColumn)
            Dim pK_DependentBasebyte As New UniqueConstraint("PK_DependentBase<byte?>", dependentBasebyteTable, {principalIdColumn, principalAlternateIdColumn})
            dependentBasebyteTable.PrimaryKey = pK_DependentBasebyte
            Dim pK_DependentBasebyteUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId", "PrincipalAlternateId"})
            pK_DependentBasebyte.MappedKeys.Add(pK_DependentBasebyteUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DependentBasebyteUc).Add(pK_DependentBasebyte)
            dependentBasebyteTable.UniqueConstraints.Add("PK_DependentBase<byte?>", pK_DependentBasebyte)
            Dim iX_DependentBasebyte_PrincipalId As New TableIndex(
            "IX_DependentBase<byte?>_PrincipalId", dependentBasebyteTable, {principalIdColumn}, True)
            Dim iX_DependentBasebyte_PrincipalIdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId"})
            iX_DependentBasebyte_PrincipalId.MappedIndexes.Add(iX_DependentBasebyte_PrincipalIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_DependentBasebyte_PrincipalIdIx).Add(iX_DependentBasebyte_PrincipalId)
            dependentBasebyteTable.Indexes.Add("IX_DependentBase<byte?>_PrincipalId", iX_DependentBasebyte_PrincipalId)
            relationalModel.Tables.Add(("DependentBase<byte?>", Nothing), dependentBasebyteTable)
            Dim dependentBasebyteTableMapping As New TableMapping(dependentBase, dependentBasebyteTable, True) With {
                .IsSharedTablePrincipal = True
            }
            dependentBasebyteTable.AddTypeMapping(dependentBasebyteTableMapping, False)
            tableMappings.Add(dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalAlternateIdColumn, dependentBase.FindProperty("PrincipalAlternateId"), dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalIdColumn, dependentBase.FindProperty("PrincipalId"), dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(enumDiscriminatorColumn, dependentBase.FindProperty("EnumDiscriminator"), dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, dependentBase.FindProperty("Id"), dependentBasebyteTableMapping)

            Dim dependentDerived = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentDerived<byte?>")

            Dim defaultTableMappings0 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            dependentDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0 As New TableMappingBase(Of ColumnMappingBase)(dependentDerived, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0, False)
            defaultTableMappings0.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(principalAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("PrincipalAlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(principalIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("PrincipalId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(dataColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("Data"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(enumDiscriminatorColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("EnumDiscriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(moneyColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("Money"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)

            Dim tableMappings0 As New List(Of TableMapping)()
            dependentDerived.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0)
            Dim dependentBasebyteTableMapping0 As New TableMapping(dependentDerived, dependentBasebyteTable, True) With {
                .IsSharedTablePrincipal = False
            }
            dependentBasebyteTable.AddTypeMapping(dependentBasebyteTableMapping0, False)
            tableMappings0.Add(dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(principalAlternateIdColumn, dependentDerived.FindProperty("PrincipalAlternateId"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(principalIdColumn, dependentDerived.FindProperty("PrincipalId"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(dataColumn, dependentDerived.FindProperty("Data"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(enumDiscriminatorColumn, dependentDerived.FindProperty("EnumDiscriminator"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(idColumn, dependentDerived.FindProperty("Id"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(moneyColumn, dependentDerived.FindProperty("Money"), dependentBasebyteTableMapping0)

            Dim principalBase = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase")

            Dim defaultTableMappings1 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase", Nothing, relationalModel)
            Dim alternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("AlternateId", "uniqueidentifier", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("AlternateId", alternateIdColumnBase)
            Dim enum1ColumnBase As New ColumnBase(Of ColumnMappingBase)("Enum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Enum1", enum1ColumnBase)
            Dim enum2ColumnBase As New ColumnBase(Of ColumnMappingBase)("Enum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Enum2", enum2ColumnBase)
            Dim flagsEnum1ColumnBase As New ColumnBase(Of ColumnMappingBase)("FlagsEnum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("FlagsEnum1", flagsEnum1ColumnBase)
            Dim flagsEnum2ColumnBase As New ColumnBase(Of ColumnMappingBase)("FlagsEnum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("FlagsEnum2", flagsEnum2ColumnBase)
            Dim idColumnBase0 As New ColumnBase(Of ColumnMappingBase)("Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Id", idColumnBase0)
            Dim pointColumnBase As New ColumnBase(Of ColumnMappingBase)("Point", "geometry", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Point", pointColumnBase)
            Dim refTypeArrayColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeArray", refTypeArrayColumnBase)
            Dim refTypeEnumerableColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumnBase)
            Dim refTypeIListColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeIList", refTypeIListColumnBase)
            Dim refTypeListColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeList", refTypeListColumnBase)
            Dim valueTypeArrayColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeArray", valueTypeArrayColumnBase)
            Dim valueTypeEnumerableColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumnBase)
            Dim valueTypeIListColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeIList", valueTypeIListColumnBase)
            Dim valueTypeListColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeList", valueTypeListColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase As New TableMappingBase(Of ColumnMappingBase)(principalBase, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase, False)
            defaultTableMappings1.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(alternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("AlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase0, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(pointColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Point"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)

            Dim tableMappings1 As New List(Of TableMapping)()
            principalBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1)
            Dim principalBaseTable As New Table("PrincipalBase", "mySchema", relationalModel)
            Dim idColumn0 As New Column("Id", "bigint", principalBaseTable)
            principalBaseTable.Columns.Add("Id", idColumn0)
            Dim alternateIdColumn As New Column("AlternateId", "uniqueidentifier", principalBaseTable)
            principalBaseTable.Columns.Add("AlternateId", alternateIdColumn)
            Dim enum1Column As New Column("Enum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Enum1", enum1Column)
            Dim enum2Column As New Column("Enum2", "int", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Enum2", enum2Column)
            Dim flagsEnum1Column As New Column("FlagsEnum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("FlagsEnum1", flagsEnum1Column)
            Dim flagsEnum2Column As New Column("FlagsEnum2", "int", principalBaseTable)
            principalBaseTable.Columns.Add("FlagsEnum2", flagsEnum2Column)
            Dim owned_NumberColumn As New Column("Owned_Number", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Owned_Number", owned_NumberColumn)
            Dim owned_RefTypeArrayColumn As New Column("Owned_RefTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_RefTypeArray", owned_RefTypeArrayColumn)
            Dim owned_RefTypeEnumerableColumn As New Column("Owned_RefTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_RefTypeEnumerable", owned_RefTypeEnumerableColumn)
            Dim owned_RefTypeIListColumn As New Column("Owned_RefTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_RefTypeIList", owned_RefTypeIListColumn)
            Dim owned_RefTypeListColumn As New Column("Owned_RefTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_RefTypeList", owned_RefTypeListColumn)
            Dim owned_ValueTypeArrayColumn As New Column("Owned_ValueTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_ValueTypeArray", owned_ValueTypeArrayColumn)
            Dim owned_ValueTypeEnumerableColumn As New Column("Owned_ValueTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_ValueTypeEnumerable", owned_ValueTypeEnumerableColumn)
            Dim owned_ValueTypeIListColumn As New Column("Owned_ValueTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_ValueTypeIList", owned_ValueTypeIListColumn)
            Dim owned_ValueTypeListColumn As New Column("Owned_ValueTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_ValueTypeList", owned_ValueTypeListColumn)
            Dim pointColumn As New Column("Point", "geometry", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Point", pointColumn)
            Dim refTypeArrayColumn As New Column("RefTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeArray", refTypeArrayColumn)
            Dim refTypeEnumerableColumn As New Column("RefTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumn)
            Dim refTypeIListColumn As New Column("RefTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeIList", refTypeIListColumn)
            Dim refTypeListColumn As New Column("RefTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeList", refTypeListColumn)
            Dim valueTypeArrayColumn As New Column("ValueTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeArray", valueTypeArrayColumn)
            Dim valueTypeEnumerableColumn As New Column("ValueTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumn)
            Dim valueTypeIListColumn As New Column("ValueTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeIList", valueTypeIListColumn)
            Dim valueTypeListColumn As New Column("ValueTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeList", valueTypeListColumn)
            Dim aK_PrincipalBase_Id As New UniqueConstraint("AK_PrincipalBase_Id", principalBaseTable, {idColumn0})
            Dim aK_PrincipalBase_IdUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            aK_PrincipalBase_Id.MappedKeys.Add(aK_PrincipalBase_IdUc)
            RelationalModel.GetOrCreateUniqueConstraints(aK_PrincipalBase_IdUc).Add(aK_PrincipalBase_Id)
            principalBaseTable.UniqueConstraints.Add("AK_PrincipalBase_Id", aK_PrincipalBase_Id)
            Dim pK As New UniqueConstraint("PK", principalBaseTable, {idColumn0, alternateIdColumn})
            principalBaseTable.PrimaryKey = pK
            Dim pKUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id", "AlternateId"})
            pK.MappedKeys.Add(pKUc)
            RelationalModel.GetOrCreateUniqueConstraints(pKUc).Add(pK)
            Dim pKUc0 = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                {"PrincipalBaseId", "PrincipalBaseAlternateId"})
            pK.MappedKeys.Add(pKUc0)
            RelationalModel.GetOrCreateUniqueConstraints(pKUc0).Add(pK)
            principalBaseTable.UniqueConstraints.Add("PK", pK)
            Dim iX_PrincipalBase_AlternateId_Id As New TableIndex(
            "IX_PrincipalBase_AlternateId_Id", principalBaseTable, {alternateIdColumn, idColumn0}, False)
            Dim iX_PrincipalBase_AlternateId_IdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"AlternateId", "Id"})
            iX_PrincipalBase_AlternateId_Id.MappedIndexes.Add(iX_PrincipalBase_AlternateId_IdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalBase_AlternateId_IdIx).Add(iX_PrincipalBase_AlternateId_Id)
            principalBaseTable.Indexes.Add("IX_PrincipalBase_AlternateId_Id", iX_PrincipalBase_AlternateId_Id)
            relationalModel.Tables.Add(("PrincipalBase", "mySchema"), principalBaseTable)
            Dim principalBaseTableMapping As New TableMapping(principalBase, principalBaseTable, True) With {
                .IsSharedTablePrincipal = True
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping, False)
            tableMappings1.Add(principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(alternateIdColumn, principalBase.FindProperty("AlternateId"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(idColumn0, principalBase.FindProperty("Id"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(enum1Column, principalBase.FindProperty("Enum1"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(enum2Column, principalBase.FindProperty("Enum2"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalBase.FindProperty("FlagsEnum1"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalBase.FindProperty("FlagsEnum2"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(pointColumn, principalBase.FindProperty("Point"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalBase.FindProperty("RefTypeArray"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalBase.FindProperty("RefTypeEnumerable"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalBase.FindProperty("RefTypeIList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalBase.FindProperty("RefTypeList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalBase.FindProperty("ValueTypeArray"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalBase.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalBase.FindProperty("ValueTypeIList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalBase.FindProperty("ValueTypeList"), principalBaseTableMapping)

            Dim ownedType = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType")

            Dim defaultTableMappings2 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            ownedType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType", Nothing, relationalModel)
            Dim detailsColumnBase As New ColumnBase(Of ColumnMappingBase)("Details", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("Details", detailsColumnBase)
            Dim numberColumnBase As New ColumnBase(Of ColumnMappingBase)("Number", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("Number", numberColumnBase)
            Dim principalBaseAlternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalBaseAlternateId", "uniqueidentifier", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("PrincipalBaseAlternateId", principalBaseAlternateIdColumnBase)
            Dim principalBaseIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalBaseId", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("PrincipalBaseId", principalBaseIdColumnBase)
            Dim refTypeArrayColumnBase0 As New ColumnBase(Of ColumnMappingBase)("RefTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("RefTypeArray", refTypeArrayColumnBase0)
            Dim refTypeEnumerableColumnBase0 As New ColumnBase(Of ColumnMappingBase)("RefTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumnBase0)
            Dim refTypeIListColumnBase0 As New ColumnBase(Of ColumnMappingBase)("RefTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("RefTypeIList", refTypeIListColumnBase0)
            Dim refTypeListColumnBase0 As New ColumnBase(Of ColumnMappingBase)("RefTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("RefTypeList", refTypeListColumnBase0)
            Dim valueTypeArrayColumnBase0 As New ColumnBase(Of ColumnMappingBase)("ValueTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("ValueTypeArray", valueTypeArrayColumnBase0)
            Dim valueTypeEnumerableColumnBase0 As New ColumnBase(Of ColumnMappingBase)("ValueTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumnBase0)
            Dim valueTypeIListColumnBase0 As New ColumnBase(Of ColumnMappingBase)("ValueTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("ValueTypeIList", valueTypeIListColumnBase0)
            Dim valueTypeListColumnBase0 As New ColumnBase(Of ColumnMappingBase)("ValueTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("ValueTypeList", valueTypeListColumnBase0)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase As New TableMappingBase(Of ColumnMappingBase)(ownedType, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase, False)
            defaultTableMappings2.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalBaseAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("PrincipalBaseAlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalBaseIdColumnBase, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("PrincipalBaseId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(detailsColumnBase, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("Details"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(numberColumnBase, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("Number"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)

            Dim tableMappings2 As New List(Of TableMapping)()
            ownedType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2)
            Dim principalBaseTableMapping0 As New TableMapping(ownedType, principalBaseTable, True) With {
                .IsSharedTablePrincipal = False,
                .IsSplitEntityTypePrincipal = True
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping0, False)
            tableMappings2.Add(principalBaseTableMapping0)
            principalBaseTable.AddRowInternalForeignKey(ownedType, RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                {"PrincipalBaseId", "PrincipalBaseAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id", "AlternateId"}))
            RelationalModel.CreateColumnMapping(alternateIdColumn, ownedType.FindProperty("PrincipalBaseAlternateId"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(idColumn0, ownedType.FindProperty("PrincipalBaseId"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_NumberColumn, ownedType.FindProperty("Number"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_RefTypeArrayColumn, ownedType.FindProperty("RefTypeArray"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_RefTypeEnumerableColumn, ownedType.FindProperty("RefTypeEnumerable"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_RefTypeIListColumn, ownedType.FindProperty("RefTypeIList"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_RefTypeListColumn, ownedType.FindProperty("RefTypeList"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_ValueTypeArrayColumn, ownedType.FindProperty("ValueTypeArray"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_ValueTypeEnumerableColumn, ownedType.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_ValueTypeIListColumn, ownedType.FindProperty("ValueTypeIList"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_ValueTypeListColumn, ownedType.FindProperty("ValueTypeList"), principalBaseTableMapping0)
            Dim detailsTable As New Table("Details", Nothing, relationalModel)
            Dim principalBaseIdColumn As New Column("PrincipalBaseId", "bigint", detailsTable)
            detailsTable.Columns.Add("PrincipalBaseId", principalBaseIdColumn)
            Dim principalBaseAlternateIdColumn As New Column("PrincipalBaseAlternateId", "uniqueidentifier", detailsTable)
            detailsTable.Columns.Add("PrincipalBaseAlternateId", principalBaseAlternateIdColumn)
            Dim detailsColumn As New Column("Details", "nvarchar(max)", detailsTable) With {
                .IsNullable = True
            }
            detailsTable.Columns.Add("Details", detailsColumn)
            Dim pK_Details As New UniqueConstraint("PK_Details", detailsTable, {principalBaseIdColumn, principalBaseAlternateIdColumn})
            detailsTable.PrimaryKey = pK_Details
            Dim pK_DetailsUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                {"PrincipalBaseId", "PrincipalBaseAlternateId"})
            pK_Details.MappedKeys.Add(pK_DetailsUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DetailsUc).Add(pK_Details)
            detailsTable.UniqueConstraints.Add("PK_Details", pK_Details)
            relationalModel.Tables.Add(("Details", Nothing), detailsTable)
            Dim detailsTableMapping As New TableMapping(ownedType, detailsTable, True) With {
                .IsSplitEntityTypePrincipal = False
            }
            detailsTable.AddTypeMapping(detailsTableMapping, False)
            tableMappings2.Add(detailsTableMapping)
            RelationalModel.CreateColumnMapping(principalBaseAlternateIdColumn, ownedType.FindProperty("PrincipalBaseAlternateId"), detailsTableMapping)
            RelationalModel.CreateColumnMapping(principalBaseIdColumn, ownedType.FindProperty("PrincipalBaseId"), detailsTableMapping)
            RelationalModel.CreateColumnMapping(detailsColumn, ownedType.FindProperty("Details"), detailsTableMapping)

            Dim principalDerived = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>")

            Dim defaultTableMappings3 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0 As New TableMappingBase(Of ColumnMappingBase)(principalDerived, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase, False)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0, False)
            defaultTableMappings3.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(alternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("AlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(enum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(enum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(pointColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Point"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)

            Dim defaultTableMappings4 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>", Nothing, relationalModel)
            Dim alternateIdColumnBase0 As New ColumnBase(Of ColumnMappingBase)("AlternateId", "uniqueidentifier", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("AlternateId", alternateIdColumnBase0)
            Dim idColumnBase1 As New ColumnBase(Of ColumnMappingBase)("Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Id", idColumnBase1)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase As New TableMappingBase(Of ColumnMappingBase)(principalDerived, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase, False)
            defaultTableMappings4.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(alternateIdColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("AlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase1, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)

            Dim tableMappings3 As New List(Of TableMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3)
            Dim principalBaseTableMapping1 As New TableMapping(principalDerived, principalBaseTable, False) With {
                .IsSharedTablePrincipal = False
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping1, False)
            tableMappings3.Add(principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(alternateIdColumn, principalDerived.FindProperty("AlternateId"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(idColumn0, principalDerived.FindProperty("Id"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(enum1Column, principalDerived.FindProperty("Enum1"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(enum2Column, principalDerived.FindProperty("Enum2"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalDerived.FindProperty("FlagsEnum1"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalDerived.FindProperty("FlagsEnum2"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(pointColumn, principalDerived.FindProperty("Point"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalDerived.FindProperty("RefTypeArray"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalDerived.FindProperty("RefTypeEnumerable"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalDerived.FindProperty("RefTypeIList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalDerived.FindProperty("RefTypeList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalDerived.FindProperty("ValueTypeArray"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalDerived.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalDerived.FindProperty("ValueTypeIList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalDerived.FindProperty("ValueTypeList"), principalBaseTableMapping1)
            Dim principalDerivedTable As New Table("PrincipalDerived", Nothing, relationalModel)
            Dim derivedIdColumn As New Column("DerivedId", "bigint", principalDerivedTable)
            principalDerivedTable.Columns.Add("DerivedId", derivedIdColumn)
            Dim alternateIdColumn0 As New Column("AlternateId", "uniqueidentifier", principalDerivedTable)
            principalDerivedTable.Columns.Add("AlternateId", alternateIdColumn0)
            Dim aK_PrincipalDerived_DerivedId As New UniqueConstraint("AK_PrincipalDerived_DerivedId", principalDerivedTable, {derivedIdColumn})
            Dim aK_PrincipalDerived_DerivedIdUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            aK_PrincipalDerived_DerivedId.MappedKeys.Add(aK_PrincipalDerived_DerivedIdUc)
            RelationalModel.GetOrCreateUniqueConstraints(aK_PrincipalDerived_DerivedIdUc).Add(aK_PrincipalDerived_DerivedId)
            principalDerivedTable.UniqueConstraints.Add("AK_PrincipalDerived_DerivedId", aK_PrincipalDerived_DerivedId)
            Dim pK0 As New UniqueConstraint("PK", principalDerivedTable, {derivedIdColumn, alternateIdColumn0})
            principalDerivedTable.PrimaryKey = pK0
            Dim pK0Uc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id", "AlternateId"})
            pK0.MappedKeys.Add(pK0Uc)
            RelationalModel.GetOrCreateUniqueConstraints(pK0Uc).Add(pK0)
            principalDerivedTable.UniqueConstraints.Add("PK", pK0)
            Dim iX_PrincipalDerived_AlternateId_DerivedId As New TableIndex(
            "IX_PrincipalDerived_AlternateId_DerivedId", principalDerivedTable, {alternateIdColumn0, derivedIdColumn}, False)
            Dim iX_PrincipalDerived_AlternateId_DerivedIdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"AlternateId", "Id"})
            iX_PrincipalDerived_AlternateId_DerivedId.MappedIndexes.Add(iX_PrincipalDerived_AlternateId_DerivedIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalDerived_AlternateId_DerivedIdIx).Add(iX_PrincipalDerived_AlternateId_DerivedId)
            principalDerivedTable.Indexes.Add("IX_PrincipalDerived_AlternateId_DerivedId", iX_PrincipalDerived_AlternateId_DerivedId)
            relationalModel.Tables.Add(("PrincipalDerived", Nothing), principalDerivedTable)
            Dim principalDerivedTableMapping As New TableMapping(principalDerived, principalDerivedTable, True)
            principalDerivedTable.AddTypeMapping(principalDerivedTableMapping, False)
            tableMappings3.Add(principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(alternateIdColumn0, principalDerived.FindProperty("AlternateId"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(derivedIdColumn, principalDerived.FindProperty("Id"), principalDerivedTableMapping)

            Dim ownedType0 = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType")

            Dim defaultTableMappings5 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            ownedType0.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType", Nothing, relationalModel)
            Dim detailsColumnBase0 As New ColumnBase(Of ColumnMappingBase)("Details", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("Details", detailsColumnBase0)
            Dim idColumnBase2 As New ColumnBase(Of ColumnMappingBase)("Id", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("Id", idColumnBase2)
            Dim numberColumnBase0 As New ColumnBase(Of ColumnMappingBase)("Number", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("Number", numberColumnBase0)
            Dim principalDerivedDependentBasebyteAlternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalDerived<DependentBase<byte?>>AlternateId", "uniqueidentifier", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("PrincipalDerived<DependentBase<byte?>>AlternateId", principalDerivedDependentBasebyteAlternateIdColumnBase)
            Dim principalDerivedDependentBasebyteIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalDerived<DependentBase<byte?>>Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("PrincipalDerived<DependentBase<byte?>>Id", principalDerivedDependentBasebyteIdColumnBase)
            Dim refTypeArrayColumnBase1 As New ColumnBase(Of ColumnMappingBase)("RefTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("RefTypeArray", refTypeArrayColumnBase1)
            Dim refTypeEnumerableColumnBase1 As New ColumnBase(Of ColumnMappingBase)("RefTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumnBase1)
            Dim refTypeIListColumnBase1 As New ColumnBase(Of ColumnMappingBase)("RefTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("RefTypeIList", refTypeIListColumnBase1)
            Dim refTypeListColumnBase1 As New ColumnBase(Of ColumnMappingBase)("RefTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("RefTypeList", refTypeListColumnBase1)
            Dim valueTypeArrayColumnBase1 As New ColumnBase(Of ColumnMappingBase)("ValueTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("ValueTypeArray", valueTypeArrayColumnBase1)
            Dim valueTypeEnumerableColumnBase1 As New ColumnBase(Of ColumnMappingBase)("ValueTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumnBase1)
            Dim valueTypeIListColumnBase1 As New ColumnBase(Of ColumnMappingBase)("ValueTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("ValueTypeIList", valueTypeIListColumnBase1)
            Dim valueTypeListColumnBase1 As New ColumnBase(Of ColumnMappingBase)("ValueTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("ValueTypeList", valueTypeListColumnBase1)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase As New TableMappingBase(Of ColumnMappingBase)(ownedType0, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase, False)
            defaultTableMappings5.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase2, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalDerivedDependentBasebyteAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("PrincipalDerivedAlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalDerivedDependentBasebyteIdColumnBase, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("PrincipalDerivedId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(detailsColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("Details"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(numberColumnBase0, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("Number"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase1, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase1, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase1, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase1, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase1, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase1, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase1, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase1, ColumnBase(Of ColumnMappingBase)), ownedType0.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)

            Dim tableMappings4 As New List(Of TableMapping)()
            ownedType0.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4)
            Dim manyOwnedTable As New Table("ManyOwned", Nothing, relationalModel)
            Dim principalDerivedDependentBasebyteIdColumn As New Column("PrincipalDerived<DependentBase<byte?>>Id", "bigint", manyOwnedTable)
            manyOwnedTable.Columns.Add("PrincipalDerived<DependentBase<byte?>>Id", principalDerivedDependentBasebyteIdColumn)
            Dim principalDerivedDependentBasebyteAlternateIdColumn As New Column("PrincipalDerived<DependentBase<byte?>>AlternateId", "uniqueidentifier", manyOwnedTable)
            manyOwnedTable.Columns.Add("PrincipalDerived<DependentBase<byte?>>AlternateId", principalDerivedDependentBasebyteAlternateIdColumn)
            Dim idColumn1 As New Column("Id", "int", manyOwnedTable)
            manyOwnedTable.Columns.Add("Id", idColumn1)
            Dim detailsColumn0 As New Column("Details", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("Details", detailsColumn0)
            Dim numberColumn As New Column("Number", "int", manyOwnedTable)
            manyOwnedTable.Columns.Add("Number", numberColumn)
            Dim refTypeArrayColumn0 As New Column("RefTypeArray", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("RefTypeArray", refTypeArrayColumn0)
            Dim refTypeEnumerableColumn0 As New Column("RefTypeEnumerable", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumn0)
            Dim refTypeIListColumn0 As New Column("RefTypeIList", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("RefTypeIList", refTypeIListColumn0)
            Dim refTypeListColumn0 As New Column("RefTypeList", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("RefTypeList", refTypeListColumn0)
            Dim valueTypeArrayColumn0 As New Column("ValueTypeArray", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("ValueTypeArray", valueTypeArrayColumn0)
            Dim valueTypeEnumerableColumn0 As New Column("ValueTypeEnumerable", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumn0)
            Dim valueTypeIListColumn0 As New Column("ValueTypeIList", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("ValueTypeIList", valueTypeIListColumn0)
            Dim valueTypeListColumn0 As New Column("ValueTypeList", "nvarchar(max)", manyOwnedTable) With {
                .IsNullable = True
            }
            manyOwnedTable.Columns.Add("ValueTypeList", valueTypeListColumn0)
            Dim pK_ManyOwned As New UniqueConstraint("PK_ManyOwned", manyOwnedTable, {principalDerivedDependentBasebyteIdColumn, principalDerivedDependentBasebyteAlternateIdColumn, idColumn1})
            manyOwnedTable.PrimaryKey = pK_ManyOwned
            Dim pK_ManyOwnedUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType",
                {"PrincipalDerivedId", "PrincipalDerivedAlternateId", "Id"})
            pK_ManyOwned.MappedKeys.Add(pK_ManyOwnedUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_ManyOwnedUc).Add(pK_ManyOwned)
            manyOwnedTable.UniqueConstraints.Add("PK_ManyOwned", pK_ManyOwned)
            relationalModel.Tables.Add(("ManyOwned", Nothing), manyOwnedTable)
            Dim manyOwnedTableMapping As New TableMapping(ownedType0, manyOwnedTable, True)
            manyOwnedTable.AddTypeMapping(manyOwnedTableMapping, False)
            tableMappings4.Add(manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(idColumn1, ownedType0.FindProperty("Id"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(principalDerivedDependentBasebyteAlternateIdColumn, ownedType0.FindProperty("PrincipalDerivedAlternateId"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(principalDerivedDependentBasebyteIdColumn, ownedType0.FindProperty("PrincipalDerivedId"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(detailsColumn0, ownedType0.FindProperty("Details"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(numberColumn, ownedType0.FindProperty("Number"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn0, ownedType0.FindProperty("RefTypeArray"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn0, ownedType0.FindProperty("RefTypeEnumerable"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(refTypeIListColumn0, ownedType0.FindProperty("RefTypeIList"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(refTypeListColumn0, ownedType0.FindProperty("RefTypeList"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn0, ownedType0.FindProperty("ValueTypeArray"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn0, ownedType0.FindProperty("ValueTypeEnumerable"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn0, ownedType0.FindProperty("ValueTypeIList"), manyOwnedTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeListColumn0, ownedType0.FindProperty("ValueTypeList"), manyOwnedTableMapping)

            Dim principalBasePrincipalDerivedDependentBasebyte = FindEntityType("PrincipalBasePrincipalDerived<DependentBase<byte?>>")

            Dim defaultTableMappings6 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalBasePrincipalDerivedDependentBasebyte.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6)
            Dim principalBasePrincipalDerivedDependentBasebyteTableBase As New TableBase("PrincipalBasePrincipalDerived<DependentBase<byte?>>", Nothing, relationalModel)
            Dim derivedsAlternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("DerivedsAlternateId", "uniqueidentifier", principalBasePrincipalDerivedDependentBasebyteTableBase)
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("DerivedsAlternateId", derivedsAlternateIdColumnBase)
            Dim derivedsIdColumnBase As New ColumnBase(Of ColumnMappingBase)("DerivedsId", "bigint", principalBasePrincipalDerivedDependentBasebyteTableBase)
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("DerivedsId", derivedsIdColumnBase)
            Dim principalsAlternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalsAlternateId", "uniqueidentifier", principalBasePrincipalDerivedDependentBasebyteTableBase)
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("PrincipalsAlternateId", principalsAlternateIdColumnBase)
            Dim principalsIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalsId", "bigint", principalBasePrincipalDerivedDependentBasebyteTableBase)
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("PrincipalsId", principalsIdColumnBase)
            Dim rowidColumnBase As New ColumnBase(Of ColumnMappingBase)("rowid", "rowversion", principalBasePrincipalDerivedDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("rowid", rowidColumnBase)
            relationalModel.DefaultTables.Add("PrincipalBasePrincipalDerived<DependentBase<byte?>>", principalBasePrincipalDerivedDependentBasebyteTableBase)
            Dim principalBasePrincipalDerivedDependentBasebyteMappingBase As New TableMappingBase(Of ColumnMappingBase)(principalBasePrincipalDerivedDependentBasebyte, principalBasePrincipalDerivedDependentBasebyteTableBase, True)
            principalBasePrincipalDerivedDependentBasebyteTableBase.AddTypeMapping(principalBasePrincipalDerivedDependentBasebyteMappingBase, False)
            defaultTableMappings6.Add(principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(derivedsAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsAlternateId"), principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(derivedsIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsId"), principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalsAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsAlternateId"), principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalsIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsId"), principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(rowidColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("rowid"), principalBasePrincipalDerivedDependentBasebyteMappingBase)

            Dim tableMappings5 As New List(Of TableMapping)()
            principalBasePrincipalDerivedDependentBasebyte.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5)
            Dim principalBasePrincipalDerivedDependentBasebyteTable As New Table("PrincipalBasePrincipalDerived<DependentBase<byte?>>", Nothing, relationalModel)
            Dim derivedsIdColumn As New Column("DerivedsId", "bigint", principalBasePrincipalDerivedDependentBasebyteTable)
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("DerivedsId", derivedsIdColumn)
            Dim derivedsAlternateIdColumn As New Column("DerivedsAlternateId", "uniqueidentifier", principalBasePrincipalDerivedDependentBasebyteTable)
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("DerivedsAlternateId", derivedsAlternateIdColumn)
            Dim principalsIdColumn As New Column("PrincipalsId", "bigint", principalBasePrincipalDerivedDependentBasebyteTable)
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("PrincipalsId", principalsIdColumn)
            Dim principalsAlternateIdColumn As New Column("PrincipalsAlternateId", "uniqueidentifier", principalBasePrincipalDerivedDependentBasebyteTable)
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("PrincipalsAlternateId", principalsAlternateIdColumn)
            Dim rowidColumn As New Column("rowid", "rowversion", principalBasePrincipalDerivedDependentBasebyteTable) With {
                .IsNullable = True
            }
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("rowid", rowidColumn)
            Dim pK_PrincipalBasePrincipalDerivedDependentBasebyte As New UniqueConstraint("PK_PrincipalBasePrincipalDerived<DependentBase<byte?>>", principalBasePrincipalDerivedDependentBasebyteTable, {derivedsIdColumn, derivedsAlternateIdColumn, principalsIdColumn, principalsAlternateIdColumn})
            principalBasePrincipalDerivedDependentBasebyteTable.PrimaryKey = pK_PrincipalBasePrincipalDerivedDependentBasebyte
            Dim pK_PrincipalBasePrincipalDerivedDependentBasebyteUc = RelationalModel.GetKey(Me,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                {"DerivedsId", "DerivedsAlternateId", "PrincipalsId", "PrincipalsAlternateId"})
            pK_PrincipalBasePrincipalDerivedDependentBasebyte.MappedKeys.Add(pK_PrincipalBasePrincipalDerivedDependentBasebyteUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_PrincipalBasePrincipalDerivedDependentBasebyteUc).Add(pK_PrincipalBasePrincipalDerivedDependentBasebyte)
            principalBasePrincipalDerivedDependentBasebyteTable.UniqueConstraints.Add("PK_PrincipalBasePrincipalDerived<DependentBase<byte?>>", pK_PrincipalBasePrincipalDerivedDependentBasebyte)
            Dim iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId As New TableIndex(
            "IX_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalsId_PrincipalsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, {principalsIdColumn, principalsAlternateIdColumn}, False)
            Dim iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx = RelationalModel.GetIndex(Me,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                {"PrincipalsId", "PrincipalsAlternateId"})
            iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId.MappedIndexes.Add(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx).Add(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId)
            principalBasePrincipalDerivedDependentBasebyteTable.Indexes.Add("IX_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalsId_PrincipalsAlternateId", iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId)
            relationalModel.Tables.Add(("PrincipalBasePrincipalDerived<DependentBase<byte?>>", Nothing), principalBasePrincipalDerivedDependentBasebyteTable)
            Dim principalBasePrincipalDerivedDependentBasebyteTableMapping As New TableMapping(principalBasePrincipalDerivedDependentBasebyte, principalBasePrincipalDerivedDependentBasebyteTable, True)
            principalBasePrincipalDerivedDependentBasebyteTable.AddTypeMapping(principalBasePrincipalDerivedDependentBasebyteTableMapping, False)
            tableMappings5.Add(principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(derivedsAlternateIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsAlternateId"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(derivedsIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsId"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalsAlternateIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsAlternateId"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalsIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsId"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(rowidColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("rowid"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            Dim fK_DependentBasebyte_PrincipalBase_PrincipalId As New ForeignKeyConstraint(
                "FK_DependentBase<byte?>_PrincipalBase_PrincipalId", dependentBasebyteTable, principalBaseTable,
                {principalIdColumn},
                principalBaseTable.FindUniqueConstraint("AK_PrincipalBase_Id"), ReferentialAction.Cascade)
            Dim fK_DependentBasebyte_PrincipalBase_PrincipalIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            fK_DependentBasebyte_PrincipalBase_PrincipalId.MappedForeignKeys.Add(fK_DependentBasebyte_PrincipalBase_PrincipalIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DependentBasebyte_PrincipalBase_PrincipalIdFk).Add(fK_DependentBasebyte_PrincipalBase_PrincipalId)
            dependentBasebyteTable.ForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId)
            Dim fK_DependentBasebyte_PrincipalDerived_PrincipalId_PrincipalAlternateId As New ForeignKeyConstraint(
                "FK_DependentBase<byte?>_PrincipalDerived_PrincipalId_PrincipalAlternateId", dependentBasebyteTable, principalDerivedTable,
                {principalIdColumn, principalAlternateIdColumn},
                principalDerivedTable.FindUniqueConstraint("PK"), ReferentialAction.NoAction)
            Dim fK_DependentBasebyte_PrincipalDerived_PrincipalId_PrincipalAlternateIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId", "PrincipalAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id", "AlternateId"})
            fK_DependentBasebyte_PrincipalDerived_PrincipalId_PrincipalAlternateId.MappedForeignKeys.Add(fK_DependentBasebyte_PrincipalDerived_PrincipalId_PrincipalAlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DependentBasebyte_PrincipalDerived_PrincipalId_PrincipalAlternateIdFk).Add(fK_DependentBasebyte_PrincipalDerived_PrincipalId_PrincipalAlternateId)
            dependentBasebyteTable.ForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalDerived_PrincipalId_PrincipalAlternateId)
            principalDerivedTable.ReferencingForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalDerived_PrincipalId_PrincipalAlternateId)
            Dim fK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateId As New ForeignKeyConstraint(
                "FK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateId", detailsTable, principalBaseTable,
                {principalBaseIdColumn, principalBaseAlternateIdColumn},
                principalBaseTable.FindUniqueConstraint("PK"), ReferentialAction.Cascade)
            Dim fK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                {"PrincipalBaseId", "PrincipalBaseAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                {"PrincipalBaseId", "PrincipalBaseAlternateId"})
            fK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateId.MappedForeignKeys.Add(fK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateIdFk).Add(fK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateId)
            detailsTable.ForeignKeyConstraints.Add(fK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_Details_PrincipalBase_PrincipalBaseId_PrincipalBaseAlternateId)
            Dim fK_ManyOwned_PrincipalDerived_PrincipalDerivedDependentBasebyteId_PrincipalDerivedDependentBasebyteAlternateId As New ForeignKeyConstraint(
                "FK_ManyOwned_PrincipalDerived_PrincipalDerived<DependentBase<byte?>>Id_PrincipalDerived<DependentBase<byte?>>AlternateId", manyOwnedTable, principalDerivedTable,
                {principalDerivedDependentBasebyteIdColumn, principalDerivedDependentBasebyteAlternateIdColumn},
                principalDerivedTable.FindUniqueConstraint("PK"), ReferentialAction.Cascade)
            Dim fK_ManyOwned_PrincipalDerived_PrincipalDerivedDependentBasebyteId_PrincipalDerivedDependentBasebyteAlternateIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType",
                {"PrincipalDerivedId", "PrincipalDerivedAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id", "AlternateId"})
            fK_ManyOwned_PrincipalDerived_PrincipalDerivedDependentBasebyteId_PrincipalDerivedDependentBasebyteAlternateId.MappedForeignKeys.Add(fK_ManyOwned_PrincipalDerived_PrincipalDerivedDependentBasebyteId_PrincipalDerivedDependentBasebyteAlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ManyOwned_PrincipalDerived_PrincipalDerivedDependentBasebyteId_PrincipalDerivedDependentBasebyteAlternateIdFk).Add(fK_ManyOwned_PrincipalDerived_PrincipalDerivedDependentBasebyteId_PrincipalDerivedDependentBasebyteAlternateId)
            manyOwnedTable.ForeignKeyConstraints.Add(fK_ManyOwned_PrincipalDerived_PrincipalDerivedDependentBasebyteId_PrincipalDerivedDependentBasebyteAlternateId)
            principalDerivedTable.ReferencingForeignKeyConstraints.Add(fK_ManyOwned_PrincipalDerived_PrincipalDerivedDependentBasebyteId_PrincipalDerivedDependentBasebyteAlternateId)
            Dim fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId As New ForeignKeyConstraint(
                "FK_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalBase_PrincipalsId_PrincipalsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, principalBaseTable,
                {principalsIdColumn, principalsAlternateIdColumn},
                principalBaseTable.FindUniqueConstraint("PK"), ReferentialAction.NoAction)
            Dim fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk = RelationalModel.GetForeignKey(Me,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                {"PrincipalsId", "PrincipalsAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id", "AlternateId"})
            fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId.MappedForeignKeys.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk).Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId)
            principalBasePrincipalDerivedDependentBasebyteTable.ForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId)
            Dim fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalDerived_DerivedsId_DerivedsAlternateId As New ForeignKeyConstraint(
                "FK_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalDerived_DerivedsId_DerivedsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, principalDerivedTable,
                {derivedsIdColumn, derivedsAlternateIdColumn},
                principalDerivedTable.FindUniqueConstraint("PK"), ReferentialAction.Cascade)
            Dim fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalDerived_DerivedsId_DerivedsAlternateIdFk = RelationalModel.GetForeignKey(Me,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                {"DerivedsId", "DerivedsAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id", "AlternateId"})
            fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalDerived_DerivedsId_DerivedsAlternateId.MappedForeignKeys.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalDerived_DerivedsId_DerivedsAlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalDerived_DerivedsId_DerivedsAlternateIdFk).Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalDerived_DerivedsId_DerivedsAlternateId)
            principalBasePrincipalDerivedDependentBasebyteTable.ForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalDerived_DerivedsId_DerivedsAlternateId)
            principalDerivedTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalDerived_DerivedsId_DerivedsAlternateId)
            Dim fK_PrincipalDerived_PrincipalBase_DerivedId_AlternateId As New ForeignKeyConstraint(
                "FK_PrincipalDerived_PrincipalBase_DerivedId_AlternateId", principalDerivedTable, principalBaseTable,
                {derivedIdColumn, alternateIdColumn0},
                principalBaseTable.FindUniqueConstraint("PK"), ReferentialAction.Cascade)
            Dim fK_PrincipalDerived_PrincipalBase_DerivedId_AlternateIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id", "AlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id", "AlternateId"})
            fK_PrincipalDerived_PrincipalBase_DerivedId_AlternateId.MappedForeignKeys.Add(fK_PrincipalDerived_PrincipalBase_DerivedId_AlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalDerived_PrincipalBase_DerivedId_AlternateIdFk).Add(fK_PrincipalDerived_PrincipalBase_DerivedId_AlternateId)
            principalDerivedTable.ForeignKeyConstraints.Add(fK_PrincipalDerived_PrincipalBase_DerivedId_AlternateId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalDerived_PrincipalBase_DerivedId_AlternateId)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value
            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Migrations.Design
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports Microsoft.EntityFrameworkCore.ValueGeneration

Namespace TestNamespace
    Friend Partial Class DependentBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                baseEntityType,
                discriminatorProperty:="EnumDiscriminator",
                discriminatorValue:=VisualBasicMigrationsGeneratorTests.Enum1.One)

            Dim principalId = entityType.AddProperty(
                "PrincipalId",
                GetType(Long),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0L)
            principalId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            principalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalAlternateId = entityType.AddProperty(
                "PrincipalAlternateId",
                GetType(Guid),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"))
            principalAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            principalAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enumDiscriminator = entityType.AddProperty(
                "EnumDiscriminator",
                GetType(VisualBasicMigrationsGeneratorTests.Enum1),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                valueGeneratorFactory:=AddressOf New DiscriminatorValueGeneratorFactory().Create,
                sentinel:=VisualBasicMigrationsGeneratorTests.Enum1.Default)
            enumDiscriminator.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicMigrationsGeneratorTests.Enum1)(
                    Function(v1 As VisualBasicMigrationsGeneratorTests.Enum1, v2 As VisualBasicMigrationsGeneratorTests.Enum1) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicMigrationsGeneratorTests.Enum1) v.GetHashCode(),
                    Function(v As VisualBasicMigrationsGeneratorTests.Enum1) v),
                keyComparer:=New ValueComparer(Of VisualBasicMigrationsGeneratorTests.Enum1)(
                    Function(v1 As VisualBasicMigrationsGeneratorTests.Enum1, v2 As VisualBasicMigrationsGeneratorTests.Enum1) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicMigrationsGeneratorTests.Enum1) v.GetHashCode(),
                    Function(v As VisualBasicMigrationsGeneratorTests.Enum1) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicMigrationsGeneratorTests.Enum1, Integer)(
                    Function(value As VisualBasicMigrationsGeneratorTests.Enum1) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicMigrationsGeneratorTests.Enum1)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicMigrationsGeneratorTests.Enum1, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicMigrationsGeneratorTests.Enum1, Integer)(
                        Function(value As VisualBasicMigrationsGeneratorTests.Enum1) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicMigrationsGeneratorTests.Enum1))))
            enumDiscriminator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Byte?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            id.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))),
                keyComparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))),
                providerValueComparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {principalId, principalAlternateId})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalId},
                unique:=True)

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                unique:=True,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalId"), declaringEntityType.FindProperty("PrincipalAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientNoAction,
                unique:=True,
                required:=True)

            Dim principal = declaringEntityType.AddNavigation("Principal",
                runtimeForeignKey,
                onDependent:=True,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Principal", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Principal", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim dependent = principalEntityType.AddNavigation("Dependent",
                runtimeForeignKey,
                onDependent:=False,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Dependent", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Dependent", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                eagerLoaded:=True,
                lazyLoadingEnabled:=False)

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("DiscriminatorMappingComplete", False)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:MappingStrategy", "TPH")
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "DependentBase<byte?>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports NetTopologySuite.Geometries

Namespace TestNamespace
    Friend Partial Class PrincipalBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase),
                baseEntityType,
                discriminatorValue:="PrincipalBase")

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Long?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))

            Dim [overrides] As New StoreObjectDictionary(Of RuntimeRelationalPropertyOverrides)()
            Dim idPrincipalDerived As New RuntimeRelationalPropertyOverrides(
                id,
                StoreObjectIdentifier.Table("PrincipalDerived", Nothing),
                True,
                "DerivedId")
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.Table("PrincipalDerived", Nothing), idPrincipalDerived})
            id.AddAnnotation("Relational:RelationalOverrides", [overrides])

            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim alternateId = entityType.AddProperty(
                "AlternateId",
                GetType(Guid),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("AlternateId", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.FieldDuringConstruction,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"),
                jsonValueReaderWriter:=JsonGuidReaderWriter.Instance)
            alternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            alternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum1 = entityType.AddProperty(
                "Enum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))
            enum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum2 = entityType.AddProperty(
                "Enum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            enum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum1 = entityType.AddProperty(
                "FlagsEnum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum2 = entityType.AddProperty(
                "FlagsEnum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(6, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim point = entityType.AddProperty(
                "Point",
                GetType(Point),
                nullable:=True,
                valueGenerated:=ValueGenerated.OnAdd,
                valueConverter:=New CastingConverter(Of Point, Point)(),
                valueComparer:=New VisualBasicRuntimeModelCodeGeneratorTest.CustomValueComparer(Of Point)(),
                providerValueComparer:=New VisualBasicRuntimeModelCodeGeneratorTest.CustomValueComparer(Of Point)())
            point.TypeMapping = Nothing
            point.AddAnnotation("Relational:ColumnType", "geometry")
            point.AddAnnotation("Relational:DefaultValue", CType(New NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT Z(0 0 0)"), NetTopologySuite.Geometries.Point))
            point.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = entityType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = entityType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = entityType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = entityType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = entityType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = entityType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = entityType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = entityType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim key = entityType.AddKey(
    {id})

Dim key0 = entityType.AddKey(
    {id, alternateId})
entityType.SetPrimaryKey(key0)
key0.AddAnnotation("Relational:Name", "PK")

Dim index = entityType.AddIndex(
    {alternateId, id})

Return entityType
End Function

Public Shared Function CreateSkipNavigation1(declaringEntityType As RuntimeEntityType, targetEntityType As RuntimeEntityType, joinEntityType As RuntimeEntityType) As RuntimeSkipNavigation
    Dim skipNavigation = declaringEntityType.AddSkipNavigation(
        "Deriveds",
        targetEntityType,
        joinEntityType.FindForeignKey(
            {joinEntityType.FindProperty("PrincipalsId"), joinEntityType.FindProperty("PrincipalsAlternateId")},
            declaringEntityType.FindKey({declaringEntityType.FindProperty("Id"), declaringEntityType.FindProperty("AlternateId")}),
            declaringEntityType),
        True,
        False,
        GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
        propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Deriveds", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Deriveds", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

    Dim inverse = targetEntityType.FindSkipNavigation("Principals")
    If inverse IsNot Nothing Then
        skipNavigation.Inverse = inverse
        inverse.Inverse = skipNavigation
    End If

    Return skipNavigation
End Function

Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
    entityType.AddAnnotation("Relational:FunctionName", Nothing)
    entityType.AddAnnotation("Relational:MappingStrategy", "TPT")
    entityType.AddAnnotation("Relational:Schema", "mySchema")
    entityType.AddAnnotation("Relational:SqlQuery", Nothing)
    entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
    entityType.AddAnnotation("Relational:ViewName", Nothing)
    entityType.AddAnnotation("Relational:ViewSchema", Nothing)

    Customize(entityType)
End Sub

Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
End Sub
End Class
End Namespace
]]>.Value

            Dim e3 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion

Namespace TestNamespace
    Friend Partial Class OwnedTypeEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
                baseEntityType,
                sharedClrType:=True,
                changeTrackingStrategy:=ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues)

            Dim principalBaseId = entityType.AddProperty(
                "PrincipalBaseId",
                GetType(Long),
                propertyAccessMode:=PropertyAccessMode.Field,
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0L)
            principalBaseId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))

            Dim [overrides] As New StoreObjectDictionary(Of RuntimeRelationalPropertyOverrides)()
            Dim principalBaseIdPrincipalBase As New RuntimeRelationalPropertyOverrides(
                principalBaseId,
                StoreObjectIdentifier.Table("PrincipalBase", "mySchema"),
                False,
                Nothing)
            principalBaseIdPrincipalBase.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.Table("PrincipalBase", "mySchema"), principalBaseIdPrincipalBase})
            principalBaseId.AddAnnotation("Relational:RelationalOverrides", [overrides])

            principalBaseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim principalBaseAlternateId = entityType.AddProperty(
                "PrincipalBaseAlternateId",
                GetType(Guid),
                propertyAccessMode:=PropertyAccessMode.Field,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"))
            principalBaseAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            principalBaseAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim details = entityType.AddProperty(
                "Details",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Details", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_details", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field,
                nullable:=True)
            details.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nvarchar(max)",
                    dbType:=System.Data.DbType.String),
                storeTypePostfix:=StoreTypePostfix.None)

            Dim overrides0 As New StoreObjectDictionary(Of RuntimeRelationalPropertyOverrides)()
            Dim detailsDetails As New RuntimeRelationalPropertyOverrides(
                details,
                StoreObjectIdentifier.Table("Details", Nothing),
                False,
                Nothing)
            overrides0.GetType().GetMethod("Add").Invoke(overrides0, {StoreObjectIdentifier.Table("Details", Nothing), detailsDetails})
            details.AddAnnotation("Relational:RelationalOverrides", overrides0)

            details.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim number = entityType.AddProperty(
                "Number",
                GetType(Integer),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Number", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Number", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field,
                sentinel:=0)
            number.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            number.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = entityType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field,
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = entityType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = entityType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = entityType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = entityType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = entityType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = entityType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = entityType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim context = entityType.AddServiceProperty(
    "Context",
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Context", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    serviceType:=GetType(DbContext))

Dim key = entityType.AddKey(
    {principalBaseId, principalBaseAlternateId})
entityType.SetPrimaryKey(key)

Return entityType
End Function

Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
    Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalBaseId"), declaringEntityType.FindProperty("PrincipalBaseAlternateId")},
        principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
        principalEntityType,
        deleteBehavior:=DeleteBehavior.Cascade,
        unique:=True,
        required:=True,
        requiredDependent:=True,
        ownership:=True)

    Dim owned = principalEntityType.AddNavigation("Owned",
        runtimeForeignKey,
        onDependent:=False,
        GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
        propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Owned", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ownedField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        propertyAccessMode:=PropertyAccessMode.Field,
        eagerLoaded:=True)

    Return runtimeForeignKey
End Function

Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
    Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalBaseId"), declaringEntityType.FindProperty("PrincipalBaseAlternateId")},
        principalEntityType.FindKey({principalEntityType.FindProperty("PrincipalBaseId"), principalEntityType.FindProperty("PrincipalBaseAlternateId")}),
        principalEntityType,
        deleteBehavior:=DeleteBehavior.Cascade,
        unique:=True,
        required:=True,
        requiredDependent:=True)

    Return runtimeForeignKey
End Function

Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
    Dim fragments As New StoreObjectDictionary(Of RuntimeEntityTypeMappingFragment)()
    Dim detailsFragment As New RuntimeEntityTypeMappingFragment(
        entityType,
        StoreObjectIdentifier.Table("Details", Nothing),
        Nothing)
    fragments.GetType().GetMethod("Add").Invoke(fragments, {StoreObjectIdentifier.Table("Details", Nothing), detailsFragment})
    entityType.AddAnnotation("Relational:MappingFragments", fragments)
    entityType.AddAnnotation("Relational:FunctionName", Nothing)
    entityType.AddAnnotation("Relational:Schema", "mySchema")
    entityType.AddAnnotation("Relational:SqlQuery", Nothing)
    entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
    entityType.AddAnnotation("Relational:ViewName", Nothing)
    entityType.AddAnnotation("Relational:ViewSchema", Nothing)

    Customize(entityType)
End Sub

Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
End Sub
End Class
End Namespace
]]>.Value
            Dim e4 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion

Namespace TestNamespace
    Friend Partial Class OwnedType0EntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
                baseEntityType,
                sharedClrType:=True)

            Dim principalDerivedId = entityType.AddProperty(
                "PrincipalDerivedId",
                GetType(Long),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0L)
            principalDerivedId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            principalDerivedId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalDerivedAlternateId = entityType.AddProperty(
                "PrincipalDerivedAlternateId",
                GetType(Guid),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"))
            principalDerivedAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            principalDerivedAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0)
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim details = entityType.AddProperty(
                "Details",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Details", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_details", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            details.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nvarchar(max)",
                    dbType:=System.Data.DbType.String),
                storeTypePostfix:=StoreTypePostfix.None)
            details.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim number = entityType.AddProperty(
                "Number",
                GetType(Integer),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Number", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Number", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=0)
            number.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            number.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = entityType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = entityType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = entityType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = entityType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = entityType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = entityType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = entityType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = entityType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim context = entityType.AddServiceProperty(
    "Context",
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Context", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    serviceType:=GetType(DbContext))

Dim key = entityType.AddKey(
    {principalDerivedId, principalDerivedAlternateId, id})
entityType.SetPrimaryKey(key)

Return entityType
End Function

Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
    Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalDerivedId"), declaringEntityType.FindProperty("PrincipalDerivedAlternateId")},
        principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
        principalEntityType,
        deleteBehavior:=DeleteBehavior.Cascade,
        required:=True,
        ownership:=True)

    Dim manyOwned = principalEntityType.AddNavigation("ManyOwned",
        runtimeForeignKey,
        onDependent:=False,
        GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.OwnedType)),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("ManyOwned", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        eagerLoaded:=True)

    Return runtimeForeignKey
End Function

Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
    entityType.AddAnnotation("Relational:FunctionName", Nothing)
    entityType.AddAnnotation("Relational:Schema", Nothing)
    entityType.AddAnnotation("Relational:SqlQuery", Nothing)
    entityType.AddAnnotation("Relational:TableName", "ManyOwned")
    entityType.AddAnnotation("Relational:ViewName", Nothing)
    entityType.AddAnnotation("Relational:ViewSchema", Nothing)
    entityType.AddAnnotation("SqlServer:MemoryOptimized", True)

    Customize(entityType)
End Sub

Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
End Sub
End Class
End Namespace
]]>.Value

            Dim e5 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.Linq
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class PrincipalBasePrincipalDerivedDependentBasebyteEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                GetType(Dictionary(Of String, Object)),
                baseEntityType,
                sharedClrType:=True,
                indexerPropertyInfo:=RuntimeEntityType.FindIndexerProperty(GetType(Dictionary(Of String, Object))),
                propertyBag:=True)

            Dim derivedsId = entityType.AddProperty(
                "DerivedsId",
                GetType(Long),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            derivedsId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            derivedsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim derivedsAlternateId = entityType.AddProperty(
                "DerivedsAlternateId",
                GetType(Guid),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            derivedsAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            derivedsAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalsId = entityType.AddProperty(
                "PrincipalsId",
                GetType(Long),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalsId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            principalsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalsAlternateId = entityType.AddProperty(
                "PrincipalsAlternateId",
                GetType(Guid),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalsAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            principalsAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim rowid = entityType.AddProperty(
                "rowid",
                GetType(Byte()),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                nullable:=True,
                concurrencyToken:=True,
                valueGenerated:=ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior:=PropertySaveBehavior.Ignore,
                afterSaveBehavior:=PropertySaveBehavior.Ignore)
            rowid.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(v1, v2),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(v),
                    Function(v As Byte()) v.ToArray()),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="rowversion",
                    size:=8),
                storeTypePostfix:=StoreTypePostfix.None)
            rowid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {derivedsId, derivedsAlternateId, principalsId, principalsAlternateId})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalsId, principalsAlternateId})

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("DerivedsId"), declaringEntityType.FindProperty("DerivedsAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalsId"), declaringEntityType.FindProperty("PrincipalsAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientCascade,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalBasePrincipalDerived<DependentBase<byte?>>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e6 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Migrations.Design
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class DependentDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentDerived<byte?>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)),
                baseEntityType,
                discriminatorProperty:="EnumDiscriminator",
                discriminatorValue:=VisualBasicMigrationsGeneratorTests.Enum1.Two)

            Dim data = entityType.AddProperty(
                "Data",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)).GetProperty("Data", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)).GetField("_Data", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True,
                maxLength:=20,
                unicode:=False)
            data.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="char(20)",
                    size:=20,
                    dbType:=System.Data.DbType.AnsiStringFixedLength))
            data.AddAnnotation("Relational:IsFixedLength", True)
            data.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim money = entityType.AddProperty(
                "Money",
                GetType(Decimal),
                precision:=9,
                scale:=3,
                sentinel:=0D)
            money.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Decimal)(
                    Function(v1 As Decimal, v2 As Decimal) v1 = v2,
                    Function(v As Decimal) v.GetHashCode(),
                    Function(v As Decimal) v),
                keyComparer:=New ValueComparer(Of Decimal)(
                    Function(v1 As Decimal, v2 As Decimal) v1 = v2,
                    Function(v As Decimal) v.GetHashCode(),
                    Function(v As Decimal) v),
                providerValueComparer:=New ValueComparer(Of Decimal)(
                    Function(v1 As Decimal, v2 As Decimal) v1 = v2,
                    Function(v As Decimal) v.GetHashCode(),
                    Function(v As Decimal) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="decimal(9,3)",
                    precision:=9,
                    scale:=3))
            money.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "DependentBase<byte?>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e7 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class PrincipalDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                baseEntityType,
                discriminatorValue:="PrincipalDerived<DependentBase<byte?>>")

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("Id"), declaringEntityType.FindProperty("AlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                unique:=True,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateSkipNavigation1(declaringEntityType As RuntimeEntityType, targetEntityType As RuntimeEntityType, joinEntityType As RuntimeEntityType) As RuntimeSkipNavigation
            Dim skipNavigation = declaringEntityType.AddSkipNavigation(
                "Principals",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    {joinEntityType.FindProperty("DerivedsId"), joinEntityType.FindProperty("DerivedsAlternateId")},
                    declaringEntityType.FindKey({declaringEntityType.FindProperty("Id"), declaringEntityType.FindProperty("AlternateId")}),
                    declaringEntityType),
                True,
                False,
                GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Principals", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Principals", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                eagerLoaded:=True,
                lazyLoadingEnabled:=False)

            Dim inverse = targetEntityType.FindSkipNavigation("Deriveds")
            If inverse IsNot Nothing Then
                skipNavigation.Inverse = inverse
                inverse.Inverse = skipNavigation
            End If

            Return skipNavigation
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalDerived")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New BigContext(),
                CreateCompiledModelCodeGenerationOptions,
                Sub(code)
                    Assert.
                        Collection(code,
                        Sub(c) AssertFileContents("BigContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("BigContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DependentBaseEntityType.vb", e1, c),
                        Sub(c) AssertFileContents("PrincipalBaseEntityType.vb", e2, c),
                        Sub(c) AssertFileContents("OwnedTypeEntityType.vb", e3, c),
                        Sub(c) AssertFileContents("OwnedType0EntityType.vb", e4, c),
                        Sub(c) AssertFileContents("PrincipalBasePrincipalDerivedDependentBasebyteEntityType.vb", e5, c),
                        Sub(c) AssertFileContents("DependentDerivedEntityType.vb", e6, c),
                        Sub(c) AssertFileContents("PrincipalDerivedEntityType.vb", e7, c))
                End Sub,
                Sub(Model)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() Model.GetCollation()).Message)
                    Assert.Equal(
                        {RelationalAnnotationNames.MaxIdentifierLength, SqlServerAnnotationNames.ValueGenerationStrategy},
                        Model.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(SqlServerValueGenerationStrategy.IdentityColumn, Model.GetValueGenerationStrategy())
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetPropertyAccessMode()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.IdentitySeed))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetIdentitySeed()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.IdentityIncrement))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetIdentityIncrement()).Message)

                    Assert.Null(Model.FindEntityType(GetType(AbstractBase)))
                    Dim MyPrincipalBase = Model.FindEntityType(GetType(PrincipalBase))
                    Assert.Equal(GetType(PrincipalBase).FullName, MyPrincipalBase.Name)
                    Assert.False(MyPrincipalBase.HasSharedClrType)
                    Assert.False(MyPrincipalBase.IsPropertyBag)
                    Assert.False(MyPrincipalBase.IsOwned())
                    Assert.Null(MyPrincipalBase.BaseType)
                    Assert.IsType(Of ConstructorBinding)(MyPrincipalBase.ConstructorBinding)
                    Assert.Null(MyPrincipalBase.FindIndexerPropertyInfo())
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, MyPrincipalBase.GetChangeTrackingStrategy())
                    Assert.Null(MyPrincipalBase.GetQueryFilter())
                    Assert.Equal("PrincipalBase", MyPrincipalBase.GetTableName())
                    Assert.Equal("mySchema", MyPrincipalBase.GetSchema())
                    Assert.Equal(CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() MyPrincipalBase.GetSeedData()).Message)

                    Dim PrincipalId = MyPrincipalBase.FindProperty(NameOf(PrincipalBase.Id))
                    Assert.Equal(
                        {RelationalAnnotationNames.RelationalOverrides, SqlServerAnnotationNames.ValueGenerationStrategy},
                        PrincipalId.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(GetType(Long?), PrincipalId.ClrType)
                    Assert.Equal(GetType(Long?), PrincipalId.PropertyInfo.PropertyType)
                    Assert.Equal(GetType(Long?), PrincipalId.FieldInfo.FieldType)
                    Assert.False(PrincipalId.IsNullable)
                    Assert.Equal(ValueGenerated.OnAdd, PrincipalId.ValueGenerated)
                    Assert.Equal(PropertySaveBehavior.Throw, PrincipalId.GetAfterSaveBehavior())
                    Assert.Equal(PropertySaveBehavior.Save, PrincipalId.GetBeforeSaveBehavior())
                    Assert.Null(PrincipalId(CoreAnnotationNames.BeforeSaveBehavior))
                    Assert.Null(PrincipalId(CoreAnnotationNames.AfterSaveBehavior))
                    Assert.Equal("Id", PrincipalId.GetColumnName())
                    Assert.Equal("Id", PrincipalId.GetColumnName(StoreObjectIdentifier.Table("PrincipalBase", "mySchema")))
                    Assert.Equal("DerivedId", PrincipalId.GetColumnName(StoreObjectIdentifier.Table("PrincipalDerived")))
                    Assert.Equal("bigint", PrincipalId.GetColumnType())
                    Assert.Null(PrincipalId.GetValueConverter())
                    Assert.NotNull(PrincipalId.GetValueComparer())
                    Assert.NotNull(PrincipalId.GetKeyValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.IdentityColumn, PrincipalId.GetValueGenerationStrategy())
                    Assert.Null(PrincipalId(SqlServerAnnotationNames.IdentitySeed))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.GetIdentitySeed()).Message)
                    Assert.Null(PrincipalId(SqlServerAnnotationNames.IdentityIncrement))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.GetIdentityIncrement()).Message)

                    Dim pointProperty = MyPrincipalBase.FindProperty("Point")
                    Assert.Equal(GetType(Point), pointProperty.ClrType)
                    Assert.True(pointProperty.IsNullable)
                    Assert.Equal(ValueGenerated.OnAdd, pointProperty.ValueGenerated)
                    Assert.Equal("Point", pointProperty.GetColumnName())
                    Assert.Equal("geometry", pointProperty.GetColumnType())
                    Assert.Equal(0, DirectCast(pointProperty.GetDefaultValue(), Point).SRID)
                    Assert.IsType(Of CastingConverter(Of Point, Point))(pointProperty.GetValueConverter())
                    Assert.IsType(Of CustomValueComparer(Of Point))(pointProperty.GetValueComparer())
                    Assert.IsType(Of CustomValueComparer(Of Point))(pointProperty.GetKeyValueComparer())
                    Assert.IsType(Of CustomValueComparer(Of Point))(pointProperty.GetProviderValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.None, pointProperty.GetValueGenerationStrategy())
                    Assert.Null(pointProperty(CoreAnnotationNames.PropertyAccessMode))

                    Assert.Null(MyPrincipalBase.FindDiscriminatorProperty())

                    Dim principalAlternateId = MyPrincipalBase.FindProperty(NameOf(PrincipalBase.AlternateId))
                    Dim compositeIndex = MyPrincipalBase.GetIndexes().Single()
                    Assert.Equal(PropertyAccessMode.FieldDuringConstruction, principalAlternateId.GetPropertyAccessMode())
                    Assert.Empty(compositeIndex.GetAnnotations())
                    Assert.Equal({principalAlternateId, PrincipalId}, compositeIndex.Properties)
                    Assert.False(compositeIndex.IsUnique)
                    Assert.Null(compositeIndex.Name)
                    Assert.Equal("IX_PrincipalBase_AlternateId_Id", compositeIndex.GetDatabaseName())

                    Assert.Equal({compositeIndex}, principalAlternateId.GetContainingIndexes())

                    Assert.Equal(2, MyPrincipalBase.GetKeys().Count())

                    Dim principalAlternateKey = MyPrincipalBase.GetKeys().First()
                    Assert.Same(PrincipalId, principalAlternateKey.Properties.Single())
                    Assert.False(principalAlternateKey.IsPrimaryKey())
                    Assert.Equal("AK_PrincipalBase_Id", principalAlternateKey.GetName())

                    Dim principalKey = MyPrincipalBase.GetKeys().Last()
                    Assert.Equal(
                        {RelationalAnnotationNames.Name},
                        principalKey.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal({PrincipalId, principalAlternateId}, principalKey.Properties)
                    Assert.True(principalKey.IsPrimaryKey())
                    Assert.Equal("PK", principalKey.GetName())
                    Assert.Null(principalKey(SqlServerAnnotationNames.Clustered))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() principalKey.IsClustered()).Message)

                    Assert.Equal({principalAlternateKey, principalKey}, PrincipalId.GetContainingKeys())

                    Dim referenceOwnedNavigation = MyPrincipalBase.GetNavigations().Single()
                    Assert.Equal(
                        {CoreAnnotationNames.EagerLoaded},
                        referenceOwnedNavigation.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(NameOf(PrincipalBase.Owned), referenceOwnedNavigation.Name)
                    Assert.False(referenceOwnedNavigation.IsCollection)
                    Assert.True(referenceOwnedNavigation.IsEagerLoaded)
                    Assert.False(referenceOwnedNavigation.IsOnDependent)
                    Assert.Equal(GetType(OwnedType), referenceOwnedNavigation.ClrType)
                    Assert.Equal("_ownedField", referenceOwnedNavigation.FieldInfo.Name)
                    Assert.Equal(NameOf(PrincipalBase.Owned), referenceOwnedNavigation.PropertyInfo.Name)
                    Assert.Null(referenceOwnedNavigation.Inverse)
                    Assert.Equal(MyPrincipalBase, referenceOwnedNavigation.DeclaringEntityType)
                    Assert.Equal(PropertyAccessMode.Field, referenceOwnedNavigation.GetPropertyAccessMode())
                    Assert.Null(referenceOwnedNavigation(CoreAnnotationNames.PropertyAccessMode))

                    Dim referenceOwnedType = referenceOwnedNavigation.TargetEntityType
                    Assert.Equal(GetType(PrincipalBase).FullName & ".Owned#OwnedType", referenceOwnedType.Name)
                    Assert.Equal(GetType(OwnedType), referenceOwnedType.ClrType)
                    Assert.True(referenceOwnedType.HasSharedClrType)
                    Assert.False(referenceOwnedType.IsPropertyBag)
                    Assert.True(referenceOwnedType.IsOwned())
                    Assert.Null(referenceOwnedType.BaseType)
                    Assert.False(referenceOwnedType.IsMemoryOptimized())
                    Assert.IsType(Of ConstructorBinding)(referenceOwnedType.ConstructorBinding)
                    Assert.Null(referenceOwnedType.FindIndexerPropertyInfo())
                    Assert.Equal(
                        ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues,
                        referenceOwnedType.GetChangeTrackingStrategy())
                    Assert.Null(referenceOwnedType.GetQueryFilter())
                    Assert.Null(referenceOwnedType(CoreAnnotationNames.PropertyAccessMode))
                    Assert.Null(referenceOwnedType(CoreAnnotationNames.NavigationAccessMode))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() referenceOwnedType.GetPropertyAccessMode()).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() referenceOwnedType.GetNavigationAccessMode()).Message)

                    Dim principalTable = StoreObjectIdentifier.Create(referenceOwnedType, StoreObjectType.Table).Value

                    Dim ownedId = referenceOwnedType.FindProperty("PrincipalBaseId")
                    Assert.True(ownedId.IsPrimaryKey())
                    Assert.Equal(
                        SqlServerValueGenerationStrategy.IdentityColumn,
                        PrincipalId.GetValueGenerationStrategy(principalTable))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.GetIdentityIncrement(principalTable)).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() PrincipalId.GetIdentitySeed(principalTable)).Message)

                    Dim detailsProperty = referenceOwnedType.FindProperty(NameOf(OwnedType.Details))
                    Assert.Null(detailsProperty(SqlServerAnnotationNames.Sparse))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() detailsProperty.IsSparse()).Message)
                    Assert.Null(detailsProperty(RelationalAnnotationNames.Collation))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() detailsProperty.GetCollation()).Message)

                    Dim ownedFragment = referenceOwnedType.GetMappingFragments().Single()
                    Assert.Equal(NameOf(OwnedType.Details), detailsProperty.GetColumnName(ownedFragment.StoreObject))
                    Assert.Null(detailsProperty.GetColumnName(principalTable))

                    Dim referenceOwnership = referenceOwnedNavigation.ForeignKey
                    Assert.Empty(referenceOwnership.GetAnnotations())
                    Assert.Same(referenceOwnership, referenceOwnedType.FindOwnership())
                    Assert.True(referenceOwnership.IsOwnership)
                    Assert.True(referenceOwnership.IsRequired)
                    Assert.True(referenceOwnership.IsRequiredDependent)
                    Assert.True(referenceOwnership.IsUnique)
                    Assert.Null(referenceOwnership.DependentToPrincipal)
                    Assert.Same(referenceOwnedNavigation, referenceOwnership.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.Cascade, referenceOwnership.DeleteBehavior)
                    Assert.Equal(2, referenceOwnership.Properties.Count())
                    Assert.Same(principalKey, referenceOwnership.PrincipalKey)

                    Dim ownedServiceProperty = referenceOwnedType.GetServiceProperties().Single()
                    Assert.Empty(ownedServiceProperty.GetAnnotations())
                    Assert.Equal(GetType(DbContext), ownedServiceProperty.ClrType)
                    Assert.Equal(GetType(DbContext), ownedServiceProperty.PropertyInfo.PropertyType)
                    Assert.Null(ownedServiceProperty.FieldInfo)
                    Assert.Same(referenceOwnedType, ownedServiceProperty.DeclaringEntityType)
                    Dim ownedServicePropertyBinding = ownedServiceProperty.ParameterBinding
                    Assert.IsType(Of ContextParameterBinding)(ownedServicePropertyBinding)
                    Assert.Equal(GetType(DbContext), ownedServicePropertyBinding.ServiceType)
                    Assert.Equal(ownedServiceProperty, ownedServicePropertyBinding.ConsumedProperties.Single())
                    Assert.Equal(PropertyAccessMode.PreferField, ownedServiceProperty.GetPropertyAccessMode())
                    Assert.Null(ownedServiceProperty(CoreAnnotationNames.PropertyAccessMode))

                    Dim principalDerived = Model.FindEntityType(GetType(PrincipalDerived(Of DependentBase(Of Byte?))))
                    Assert.Equal(MyPrincipalBase, principalDerived.BaseType)
                    Assert.Equal("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+" &
                        "PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                        principalDerived.Name)
                    Assert.False(principalDerived.IsOwned())
                    Assert.IsType(Of ConstructorBinding)(principalDerived.ConstructorBinding)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, principalDerived.GetChangeTrackingStrategy())
                    Assert.Equal("PrincipalDerived<DependentBase<byte?>>", principalDerived.GetDiscriminatorValue())

                    Dim tptForeignKey = principalDerived.GetForeignKeys().Single()
                    Assert.False(tptForeignKey.IsOwnership)
                    Assert.True(tptForeignKey.IsRequired)
                    Assert.False(tptForeignKey.IsRequiredDependent)
                    Assert.True(tptForeignKey.IsUnique)
                    Assert.Null(tptForeignKey.DependentToPrincipal)
                    Assert.Null(tptForeignKey.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.Cascade, tptForeignKey.DeleteBehavior)
                    Assert.Equal(principalKey.Properties, tptForeignKey.Properties)
                    Assert.Same(principalKey, tptForeignKey.PrincipalKey)

                    Assert.Equal(2, principalDerived.GetDeclaredNavigations().Count())
                    Dim dependentNavigation = principalDerived.GetDeclaredNavigations().First()
                    Assert.Equal("Dependent", dependentNavigation.Name)
                    Assert.Equal("Dependent", dependentNavigation.PropertyInfo.Name)
                    Assert.Equal("_Dependent", dependentNavigation.FieldInfo.Name)
                    Assert.False(dependentNavigation.IsCollection)
                    Assert.True(dependentNavigation.IsEagerLoaded)
                    Assert.False(dependentNavigation.LazyLoadingEnabled)
                    Assert.False(dependentNavigation.IsOnDependent)
                    Assert.Equal(principalDerived, dependentNavigation.DeclaringEntityType)
                    Assert.Equal("Principal", dependentNavigation.Inverse.Name)

                    Dim ownedCollectionNavigation = principalDerived.GetDeclaredNavigations().Last()
                    Assert.Equal("ManyOwned", ownedCollectionNavigation.Name)
                    Assert.Null(ownedCollectionNavigation.PropertyInfo)
                    Assert.Equal("ManyOwned", ownedCollectionNavigation.FieldInfo.Name)
                    Assert.Equal(GetType(ICollection(Of OwnedType)), ownedCollectionNavigation.ClrType)
                    Assert.True(ownedCollectionNavigation.IsCollection)
                    Assert.True(ownedCollectionNavigation.IsEagerLoaded)
                    Assert.False(ownedCollectionNavigation.IsOnDependent)
                    Assert.Null(ownedCollectionNavigation.Inverse)
                    Assert.Equal(principalDerived, ownedCollectionNavigation.DeclaringEntityType)

                    Dim collectionOwnedType = ownedCollectionNavigation.TargetEntityType
                    Assert.Equal(principalDerived.Name & ".ManyOwned#OwnedType", collectionOwnedType.Name)
                    Assert.Equal(GetType(OwnedType), collectionOwnedType.ClrType)
                    Assert.True(collectionOwnedType.HasSharedClrType)
                    Assert.False(collectionOwnedType.IsPropertyBag)
                    Assert.True(collectionOwnedType.IsOwned())
                    Assert.True(collectionOwnedType.IsMemoryOptimized())
                    Assert.Null(collectionOwnedType(RelationalAnnotationNames.IsTableExcludedFromMigrations))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() collectionOwnedType.IsTableExcludedFromMigrations()).Message)
                    Assert.Null(collectionOwnedType.BaseType)
                    Assert.IsType(Of ConstructorBinding)(collectionOwnedType.ConstructorBinding)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, collectionOwnedType.GetChangeTrackingStrategy())

                    Dim collectionOwnership = ownedCollectionNavigation.ForeignKey
                    Assert.Same(collectionOwnership, collectionOwnedType.FindOwnership())
                    Assert.True(collectionOwnership.IsOwnership)
                    Assert.True(collectionOwnership.IsRequired)
                    Assert.False(collectionOwnership.IsRequiredDependent)
                    Assert.False(collectionOwnership.IsUnique)
                    Assert.Null(collectionOwnership.DependentToPrincipal)
                    Assert.Same(ownedCollectionNavigation, collectionOwnership.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.Cascade, collectionOwnership.DeleteBehavior)
                    Assert.Equal(2, collectionOwnership.Properties.Count())

                    Dim derivedSkipNavigation = principalDerived.GetDeclaredSkipNavigations().Single()
                    Assert.Equal("Principals", derivedSkipNavigation.Name)
                    Assert.Equal("Principals", derivedSkipNavigation.PropertyInfo.Name)
                    Assert.Equal("_Principals", derivedSkipNavigation.FieldInfo.Name)
                    Assert.Equal(GetType(ICollection(Of PrincipalBase)), derivedSkipNavigation.ClrType)
                    Assert.True(derivedSkipNavigation.IsCollection)
                    Assert.True(derivedSkipNavigation.IsEagerLoaded)
                    Assert.False(derivedSkipNavigation.LazyLoadingEnabled)
                    Assert.False(derivedSkipNavigation.IsOnDependent)
                    Assert.Equal(principalDerived, derivedSkipNavigation.DeclaringEntityType)
                    Assert.Equal("Deriveds", derivedSkipNavigation.Inverse.Name)
                    Assert.Same(MyPrincipalBase.GetSkipNavigations().Single(), derivedSkipNavigation.Inverse)

                    Assert.Same(derivedSkipNavigation, derivedSkipNavigation.ForeignKey.GetReferencingSkipNavigations().Single())
                    Assert.Same(derivedSkipNavigation.Inverse, derivedSkipNavigation.Inverse.ForeignKey.GetReferencingSkipNavigations().Single())

                    Assert.Equal({derivedSkipNavigation.Inverse, derivedSkipNavigation}, principalDerived.GetSkipNavigations())

                    Dim joinType = derivedSkipNavigation.JoinEntityType

                    Assert.Equal("PrincipalBasePrincipalDerived<DependentBase<byte?>>", joinType.Name)
                    Assert.Equal(GetType(Dictionary(Of String, Object)), joinType.ClrType)
                    Assert.True(joinType.HasSharedClrType)
                    Assert.True(joinType.IsPropertyBag)
                    Assert.False(joinType.IsOwned())
                    Assert.Null(joinType.BaseType)
                    Assert.IsType(Of ConstructorBinding)(joinType.ConstructorBinding)
                    Assert.Equal("Item", joinType.FindIndexerPropertyInfo().Name)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, joinType.GetChangeTrackingStrategy())
                    Assert.Null(joinType(RelationalAnnotationNames.Comment))
                    Assert.Equal(CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() joinType.GetComment()).Message)
                    Assert.Null(joinType.GetQueryFilter())

                    Dim rowid = joinType.GetProperties().Single(Function(p) Not p.IsForeignKey())
                    Assert.Equal(GetType(Byte()), rowid.ClrType)
                    Assert.True(rowid.IsIndexerProperty())
                    Assert.Same(joinType.FindIndexerPropertyInfo(), rowid.PropertyInfo)
                    Assert.Null(rowid.FieldInfo)
                    Assert.True(rowid.IsNullable)
                    Assert.False(rowid.IsShadowProperty())
                    Assert.True(rowid.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.OnAddOrUpdate, rowid.ValueGenerated)
                    Assert.Equal("rowid", rowid.GetColumnName())
                    Assert.Equal("rowversion", rowid.GetColumnType())
                    Assert.Null(rowid(RelationalAnnotationNames.Comment))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() rowid.GetComment()).Message)
                    Assert.Null(rowid(RelationalAnnotationNames.ColumnOrder))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() rowid.GetColumnOrder()).Message)
                    Assert.Null(rowid.GetValueConverter())
                    Assert.NotNull(rowid.GetValueComparer())
                    Assert.NotNull(rowid.GetKeyValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.None, rowid.GetValueGenerationStrategy())

                    Dim dependentForeignKey = dependentNavigation.ForeignKey
                    Assert.False(dependentForeignKey.IsOwnership)
                    Assert.True(dependentForeignKey.IsRequired)
                    Assert.False(dependentForeignKey.IsRequiredDependent)
                    Assert.True(dependentForeignKey.IsUnique)
                    Assert.Same(dependentNavigation.Inverse, dependentForeignKey.DependentToPrincipal)
                    Assert.Same(dependentNavigation, dependentForeignKey.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.ClientNoAction, dependentForeignKey.DeleteBehavior)
                    Assert.Equal({"PrincipalId", "PrincipalAlternateId"}, dependentForeignKey.Properties.Select(Function(p) p.Name))
                    Assert.Same(principalKey, dependentForeignKey.PrincipalKey)

                    Dim dependentBase = dependentNavigation.TargetEntityType

                    Assert.False(dependentBase.GetIsDiscriminatorMappingComplete())
                    Dim principalDiscriminator = dependentBase.FindDiscriminatorProperty()
                    Assert.IsType(Of DiscriminatorValueGenerator)(
                        principalDiscriminator.GetValueGeneratorFactory()(principalDiscriminator, dependentBase))
                    Assert.Equal(Enum1.One, dependentBase.GetDiscriminatorValue())

                    Dim dependentBaseForeignKey = dependentBase.GetForeignKeys().Single(Function(fk) fk IsNot dependentForeignKey)
                    Dim dependentForeignKeyProperty = dependentBaseForeignKey.Properties.Single()

                    Assert.Equal({dependentBaseForeignKey, dependentForeignKey}, dependentForeignKeyProperty.GetContainingForeignKeys())

                    Dim dependentDerived = dependentBase.GetDerivedTypes().Single()
                    Assert.Equal(Enum1.Two, dependentDerived.GetDiscriminatorValue())

                    Assert.Equal(2, dependentDerived.GetDeclaredProperties().Count())

                    Dim dependentData = dependentDerived.GetDeclaredProperties().First()
                    Assert.Equal(GetType(String), dependentData.ClrType)
                    Assert.Equal("Data", dependentData.Name)
                    Assert.Equal("Data", dependentData.PropertyInfo.Name)
                    Assert.Equal("_Data", dependentData.FieldInfo.Name)
                    Assert.True(dependentData.IsNullable)
                    Assert.False(dependentData.IsShadowProperty())
                    Assert.False(dependentData.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.Never, dependentData.ValueGenerated)
                    Assert.Equal("Data", dependentData.GetColumnName())
                    Assert.Equal("char(20)", dependentData.GetColumnType())
                    Assert.Equal(20, dependentData.GetMaxLength())
                    Assert.False(dependentData.IsUnicode())
                    Assert.True(dependentData.IsFixedLength())
                    Assert.Null(dependentData.GetPrecision())
                    Assert.Null(dependentData.GetScale())

                    Dim dependentMoney = dependentDerived.GetDeclaredProperties().Last()
                    Assert.Equal(GetType(Decimal), dependentMoney.ClrType)
                    Assert.Equal("Money", dependentMoney.Name)
                    Assert.Null(dependentMoney.PropertyInfo)
                    Assert.Null(dependentMoney.FieldInfo)
                    Assert.False(dependentMoney.IsNullable)
                    Assert.True(dependentMoney.IsShadowProperty())
                    Assert.False(dependentMoney.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.Never, dependentMoney.ValueGenerated)
                    Assert.Equal("Money", dependentMoney.GetColumnName())
                    Assert.Equal("decimal(9,3)", dependentMoney.GetColumnType())
                    Assert.Null(dependentMoney.GetMaxLength())
                    Assert.Null(dependentMoney.IsUnicode())
                    Assert.Null(dependentMoney.IsFixedLength())
                    Assert.Equal(9, dependentMoney.GetPrecision())
                    Assert.Equal(3, dependentMoney.GetScale())

                    Assert.Equal(
                        {
                            derivedSkipNavigation.ForeignKey,
                            tptForeignKey,
                            referenceOwnership,
                            collectionOwnership,
                            dependentForeignKey,
                            derivedSkipNavigation.Inverse.ForeignKey
                        },
                        principalKey.GetReferencingForeignKeys())

                    Assert.Equal(
                        {
                            dependentBaseForeignKey,
                            tptForeignKey,
                            referenceOwnership,
                            derivedSkipNavigation.Inverse.ForeignKey
                        },
                        MyPrincipalBase.GetReferencingForeignKeys())

                    Assert.Equal(
                        {
                            derivedSkipNavigation.ForeignKey,
                            collectionOwnership,
                            dependentForeignKey
                        },
                        principalDerived.GetDeclaredReferencingForeignKeys())

                    Assert.Equal(
                        {
                            dependentBase,
                            dependentDerived,
                            MyPrincipalBase,
                            referenceOwnedType,
                            principalDerived,
                            collectionOwnedType,
                            joinType
                        },
                        Model.GetEntityTypes())
                End Sub,
                GetType(SqlServerNetTopologySuiteDesignTimeServices))
        End Sub

        <ConditionalFact>
        Public Sub BigModel_with_JSON_columns()

            Dim BigContextWithJsonModel = <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.BigContextWithJson))>
    Public Partial Class BigContextWithJsonModel
        Inherits RuntimeModel

        Private Shared _Instance As BigContextWithJsonModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New BigContextWithJsonModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim BigContextWithJsonModelBuilder = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.Migrations

Namespace TestNamespace
    Public Partial Class BigContextWithJsonModel

        Private Sub Initialize()
            Dim dependentBase = DependentBaseEntityType.Create(Me)
            Dim principalBase = PrincipalBaseEntityType.Create(Me)
            Dim ownedType = OwnedTypeEntityType.Create(Me)
            Dim ownedType0 = OwnedType0EntityType.Create(Me)
            Dim principalBasePrincipalDerivedDependentBasebyte = PrincipalBasePrincipalDerivedDependentBasebyteEntityType.Create(Me)
            Dim dependentDerived = DependentDerivedEntityType.Create(Me, dependentBase)
            Dim principalDerived = PrincipalDerivedEntityType.Create(Me, principalBase)

            DependentBaseEntityType.CreateForeignKey1(dependentBase, principalBase)
            DependentBaseEntityType.CreateForeignKey2(dependentBase, principalDerived)
            OwnedTypeEntityType.CreateForeignKey1(ownedType, principalBase)
            OwnedType0EntityType.CreateForeignKey1(ownedType0, principalDerived)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey1(principalBasePrincipalDerivedDependentBasebyte, principalDerived)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey2(principalBasePrincipalDerivedDependentBasebyte, principalBase)

            PrincipalBaseEntityType.CreateSkipNavigation1(principalBase, principalDerived, principalBasePrincipalDerivedDependentBasebyte)
            PrincipalDerivedEntityType.CreateSkipNavigation1(principalDerived, principalBase, principalBasePrincipalDerivedDependentBasebyte)

            DependentBaseEntityType.CreateAnnotations(dependentBase)
            PrincipalBaseEntityType.CreateAnnotations(principalBase)
            OwnedTypeEntityType.CreateAnnotations(ownedType)
            OwnedType0EntityType.CreateAnnotations(ownedType0)
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateAnnotations(principalBasePrincipalDerivedDependentBasebyte)
            DependentDerivedEntityType.CreateAnnotations(dependentDerived)
            PrincipalDerivedEntityType.CreateAnnotations(principalDerived)

            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim dependentBase = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            dependentBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>", Nothing, relationalModel)
            Dim dataColumnBase As New ColumnBase(Of ColumnMappingBase)("Data", "char(20)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Data", dataColumnBase)
            Dim enumDiscriminatorColumnBase As New ColumnBase(Of ColumnMappingBase)("EnumDiscriminator", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("EnumDiscriminator", enumDiscriminatorColumnBase)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "tinyint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Id", idColumnBase)
            Dim moneyColumnBase As New ColumnBase(Of ColumnMappingBase)("Money", "decimal(9,3)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Money", moneyColumnBase)
            Dim principalAlternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalAlternateId", "uniqueidentifier", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("PrincipalAlternateId", principalAlternateIdColumnBase)
            Dim principalIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalId", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("PrincipalId", principalIdColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase As New TableMappingBase(Of ColumnMappingBase)(dependentBase, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("PrincipalAlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("PrincipalId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enumDiscriminatorColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("EnumDiscriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            dependentBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim dependentBasebyteTable As New Table("DependentBase<byte?>", Nothing, relationalModel)
            Dim principalIdColumn As New Column("PrincipalId", "bigint", dependentBasebyteTable)
            dependentBasebyteTable.Columns.Add("PrincipalId", principalIdColumn)
            Dim principalAlternateIdColumn As New Column("PrincipalAlternateId", "uniqueidentifier", dependentBasebyteTable)
            dependentBasebyteTable.Columns.Add("PrincipalAlternateId", principalAlternateIdColumn)
            Dim dataColumn As New Column("Data", "char(20)", dependentBasebyteTable) With {
                .IsNullable = True
            }
            dependentBasebyteTable.Columns.Add("Data", dataColumn)
            Dim enumDiscriminatorColumn As New Column("EnumDiscriminator", "int", dependentBasebyteTable)
            dependentBasebyteTable.Columns.Add("EnumDiscriminator", enumDiscriminatorColumn)
            Dim idColumn As New Column("Id", "tinyint", dependentBasebyteTable) With {
                .IsNullable = True
            }
            dependentBasebyteTable.Columns.Add("Id", idColumn)
            Dim moneyColumn As New Column("Money", "decimal(9,3)", dependentBasebyteTable) With {
                .IsNullable = True
            }
            dependentBasebyteTable.Columns.Add("Money", moneyColumn)
            Dim pK_DependentBasebyte As New UniqueConstraint("PK_DependentBase<byte?>", dependentBasebyteTable, {principalIdColumn, principalAlternateIdColumn})
            dependentBasebyteTable.PrimaryKey = pK_DependentBasebyte
            Dim pK_DependentBasebyteUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId", "PrincipalAlternateId"})
            pK_DependentBasebyte.MappedKeys.Add(pK_DependentBasebyteUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DependentBasebyteUc).Add(pK_DependentBasebyte)
            dependentBasebyteTable.UniqueConstraints.Add("PK_DependentBase<byte?>", pK_DependentBasebyte)
            Dim iX_DependentBasebyte_PrincipalId As New TableIndex(
            "IX_DependentBase<byte?>_PrincipalId", dependentBasebyteTable, {principalIdColumn}, True)
            Dim iX_DependentBasebyte_PrincipalIdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId"})
            iX_DependentBasebyte_PrincipalId.MappedIndexes.Add(iX_DependentBasebyte_PrincipalIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_DependentBasebyte_PrincipalIdIx).Add(iX_DependentBasebyte_PrincipalId)
            dependentBasebyteTable.Indexes.Add("IX_DependentBase<byte?>_PrincipalId", iX_DependentBasebyte_PrincipalId)
            relationalModel.Tables.Add(("DependentBase<byte?>", Nothing), dependentBasebyteTable)
            Dim dependentBasebyteTableMapping As New TableMapping(dependentBase, dependentBasebyteTable, True) With {
                .IsSharedTablePrincipal = True
            }
            dependentBasebyteTable.AddTypeMapping(dependentBasebyteTableMapping, False)
            tableMappings.Add(dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalAlternateIdColumn, dependentBase.FindProperty("PrincipalAlternateId"), dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalIdColumn, dependentBase.FindProperty("PrincipalId"), dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(enumDiscriminatorColumn, dependentBase.FindProperty("EnumDiscriminator"), dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, dependentBase.FindProperty("Id"), dependentBasebyteTableMapping)

            Dim dependentDerived = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentDerived<byte?>")

            Dim defaultTableMappings0 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            dependentDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0 As New TableMappingBase(Of ColumnMappingBase)(dependentDerived, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0, False)
            defaultTableMappings0.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(principalAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("PrincipalAlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(principalIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("PrincipalId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(dataColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("Data"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(enumDiscriminatorColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("EnumDiscriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(moneyColumnBase, ColumnBase(Of ColumnMappingBase)), dependentDerived.FindProperty("Money"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase0)

            Dim tableMappings0 As New List(Of TableMapping)()
            dependentDerived.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0)
            Dim dependentBasebyteTableMapping0 As New TableMapping(dependentDerived, dependentBasebyteTable, True) With {
                .IsSharedTablePrincipal = False
            }
            dependentBasebyteTable.AddTypeMapping(dependentBasebyteTableMapping0, False)
            tableMappings0.Add(dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(principalAlternateIdColumn, dependentDerived.FindProperty("PrincipalAlternateId"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(principalIdColumn, dependentDerived.FindProperty("PrincipalId"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(dataColumn, dependentDerived.FindProperty("Data"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(enumDiscriminatorColumn, dependentDerived.FindProperty("EnumDiscriminator"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(idColumn, dependentDerived.FindProperty("Id"), dependentBasebyteTableMapping0)
            RelationalModel.CreateColumnMapping(moneyColumn, dependentDerived.FindProperty("Money"), dependentBasebyteTableMapping0)

            Dim principalBase = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase")

            Dim defaultTableMappings1 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase", Nothing, relationalModel)
            Dim alternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("AlternateId", "uniqueidentifier", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("AlternateId", alternateIdColumnBase)
            Dim discriminatorColumnBase As New ColumnBase(Of ColumnMappingBase)("Discriminator", "nvarchar(55)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Discriminator", discriminatorColumnBase)
            Dim enum1ColumnBase As New ColumnBase(Of ColumnMappingBase)("Enum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Enum1", enum1ColumnBase)
            Dim enum2ColumnBase As New ColumnBase(Of ColumnMappingBase)("Enum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Enum2", enum2ColumnBase)
            Dim flagsEnum1ColumnBase As New ColumnBase(Of ColumnMappingBase)("FlagsEnum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("FlagsEnum1", flagsEnum1ColumnBase)
            Dim flagsEnum2ColumnBase As New ColumnBase(Of ColumnMappingBase)("FlagsEnum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("FlagsEnum2", flagsEnum2ColumnBase)
            Dim idColumnBase0 As New ColumnBase(Of ColumnMappingBase)("Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Id", idColumnBase0)
            Dim pointColumnBase As New ColumnBase(Of ColumnMappingBase)("Point", "geometry", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Point", pointColumnBase)
            Dim refTypeArrayColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeArray", refTypeArrayColumnBase)
            Dim refTypeEnumerableColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumnBase)
            Dim refTypeIListColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeIList", refTypeIListColumnBase)
            Dim refTypeListColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeList", refTypeListColumnBase)
            Dim valueTypeArrayColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeArray", valueTypeArrayColumnBase)
            Dim valueTypeEnumerableColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumnBase)
            Dim valueTypeIListColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeIList", valueTypeIListColumnBase)
            Dim valueTypeListColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeList", valueTypeListColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase As New TableMappingBase(Of ColumnMappingBase)(principalBase, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase, False)
            defaultTableMappings1.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(alternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("AlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase0, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(discriminatorColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Discriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(pointColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Point"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)

            Dim tableMappings1 As New List(Of TableMapping)()
            principalBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1)
            Dim principalBaseTable As New Table("PrincipalBase", Nothing, relationalModel)
            Dim idColumn0 As New Column("Id", "bigint", principalBaseTable)
            principalBaseTable.Columns.Add("Id", idColumn0)
            Dim alternateIdColumn As New Column("AlternateId", "uniqueidentifier", principalBaseTable)
            principalBaseTable.Columns.Add("AlternateId", alternateIdColumn)
            Dim discriminatorColumn As New Column("Discriminator", "nvarchar(55)", principalBaseTable)
            principalBaseTable.Columns.Add("Discriminator", discriminatorColumn)
            Dim enum1Column As New Column("Enum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Enum1", enum1Column)
            Dim enum2Column As New Column("Enum2", "int", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Enum2", enum2Column)
            Dim flagsEnum1Column As New Column("FlagsEnum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("FlagsEnum1", flagsEnum1Column)
            Dim flagsEnum2Column As New Column("FlagsEnum2", "int", principalBaseTable)
            principalBaseTable.Columns.Add("FlagsEnum2", flagsEnum2Column)
            Dim manyOwnedColumn As New JsonColumn("ManyOwned", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ManyOwned", manyOwnedColumn)
            Dim ownedColumn As New JsonColumn("Owned", "nvarchar(max)", principalBaseTable)
            principalBaseTable.Columns.Add("Owned", ownedColumn)
            Dim pointColumn As New Column("Point", "geometry", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Point", pointColumn)
            Dim refTypeArrayColumn As New Column("RefTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeArray", refTypeArrayColumn)
            Dim refTypeEnumerableColumn As New Column("RefTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumn)
            Dim refTypeIListColumn As New Column("RefTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeIList", refTypeIListColumn)
            Dim refTypeListColumn As New Column("RefTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeList", refTypeListColumn)
            Dim valueTypeArrayColumn As New Column("ValueTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeArray", valueTypeArrayColumn)
            Dim valueTypeEnumerableColumn As New Column("ValueTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumn)
            Dim valueTypeIListColumn As New Column("ValueTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeIList", valueTypeIListColumn)
            Dim valueTypeListColumn As New Column("ValueTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeList", valueTypeListColumn)
            Dim aK_PrincipalBase_Id As New UniqueConstraint("AK_PrincipalBase_Id", principalBaseTable, {idColumn0})
            Dim aK_PrincipalBase_IdUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            aK_PrincipalBase_Id.MappedKeys.Add(aK_PrincipalBase_IdUc)
            RelationalModel.GetOrCreateUniqueConstraints(aK_PrincipalBase_IdUc).Add(aK_PrincipalBase_Id)
            principalBaseTable.UniqueConstraints.Add("AK_PrincipalBase_Id", aK_PrincipalBase_Id)
            Dim pK As New UniqueConstraint("PK", principalBaseTable, {idColumn0, alternateIdColumn})
            principalBaseTable.PrimaryKey = pK
            Dim pKUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id", "AlternateId"})
            pK.MappedKeys.Add(pKUc)
            RelationalModel.GetOrCreateUniqueConstraints(pKUc).Add(pK)
            principalBaseTable.UniqueConstraints.Add("PK", pK)
            Dim iX_PrincipalBase_AlternateId_Id As New TableIndex(
            "IX_PrincipalBase_AlternateId_Id", principalBaseTable, {alternateIdColumn, idColumn0}, False)
            Dim iX_PrincipalBase_AlternateId_IdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"AlternateId", "Id"})
            iX_PrincipalBase_AlternateId_Id.MappedIndexes.Add(iX_PrincipalBase_AlternateId_IdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalBase_AlternateId_IdIx).Add(iX_PrincipalBase_AlternateId_Id)
            principalBaseTable.Indexes.Add("IX_PrincipalBase_AlternateId_Id", iX_PrincipalBase_AlternateId_Id)
            relationalModel.Tables.Add(("PrincipalBase", Nothing), principalBaseTable)
            Dim principalBaseTableMapping As New TableMapping(principalBase, principalBaseTable, True) With {
                .IsSharedTablePrincipal = True
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping, False)
            tableMappings1.Add(principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(alternateIdColumn, principalBase.FindProperty("AlternateId"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(idColumn0, principalBase.FindProperty("Id"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(discriminatorColumn, principalBase.FindProperty("Discriminator"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(enum1Column, principalBase.FindProperty("Enum1"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(enum2Column, principalBase.FindProperty("Enum2"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalBase.FindProperty("FlagsEnum1"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalBase.FindProperty("FlagsEnum2"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(pointColumn, principalBase.FindProperty("Point"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalBase.FindProperty("RefTypeArray"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalBase.FindProperty("RefTypeEnumerable"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalBase.FindProperty("RefTypeIList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalBase.FindProperty("RefTypeList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalBase.FindProperty("ValueTypeArray"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalBase.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalBase.FindProperty("ValueTypeIList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalBase.FindProperty("ValueTypeList"), principalBaseTableMapping)

            Dim ownedType = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType")

            Dim defaultTableMappings2 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            ownedType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType", Nothing, relationalModel)
            Dim ownedColumnBase As New JsonColumnBase("Owned", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("Owned", ownedColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase As New TableMappingBase(Of ColumnMappingBase)(ownedType, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase, False)
            defaultTableMappings2.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseOwnedOwnedTypeMappingBase)

            Dim tableMappings2 As New List(Of TableMapping)()
            ownedType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2)
            Dim principalBaseTableMapping0 As New TableMapping(ownedType, principalBaseTable, True) With {
                .IsSharedTablePrincipal = False
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping0, False)
            tableMappings2.Add(principalBaseTableMapping0)
            principalBaseTable.AddRowInternalForeignKey(ownedType, RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                {"PrincipalBaseId", "PrincipalBaseAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id", "AlternateId"}))

            Dim principalDerived = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>")

            Dim defaultTableMappings3 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0 As New TableMappingBase(Of ColumnMappingBase)(principalDerived, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0, False)
            defaultTableMappings3.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(alternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("AlternateId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(discriminatorColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Discriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(enum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(enum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(pointColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Point"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)

            Dim tableMappings3 As New List(Of TableMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3)
            Dim principalBaseTableMapping1 As New TableMapping(principalDerived, principalBaseTable, True) With {
                .IsSharedTablePrincipal = False
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping1, False)
            tableMappings3.Add(principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(alternateIdColumn, principalDerived.FindProperty("AlternateId"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(idColumn0, principalDerived.FindProperty("Id"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(discriminatorColumn, principalDerived.FindProperty("Discriminator"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(enum1Column, principalDerived.FindProperty("Enum1"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(enum2Column, principalDerived.FindProperty("Enum2"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalDerived.FindProperty("FlagsEnum1"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalDerived.FindProperty("FlagsEnum2"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(pointColumn, principalDerived.FindProperty("Point"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalDerived.FindProperty("RefTypeArray"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalDerived.FindProperty("RefTypeEnumerable"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalDerived.FindProperty("RefTypeIList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalDerived.FindProperty("RefTypeList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalDerived.FindProperty("ValueTypeArray"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalDerived.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalDerived.FindProperty("ValueTypeIList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalDerived.FindProperty("ValueTypeList"), principalBaseTableMapping1)

            Dim ownedType0 = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType")

            Dim defaultTableMappings4 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            ownedType0.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType", Nothing, relationalModel)
            Dim manyOwnedColumnBase As New JsonColumnBase("ManyOwned", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("ManyOwned", manyOwnedColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase As New TableMappingBase(Of ColumnMappingBase)(ownedType0, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase, False)
            defaultTableMappings4.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteManyOwnedOwnedTypeMappingBase)

            Dim tableMappings4 As New List(Of TableMapping)()
            ownedType0.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4)
            Dim principalBaseTableMapping2 As New TableMapping(ownedType0, principalBaseTable, True) With {
                .IsSharedTablePrincipal = False
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping2, True)
            tableMappings4.Add(principalBaseTableMapping2)
            principalBaseTable.AddRowInternalForeignKey(ownedType0, RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType",
                {"PrincipalDerivedId", "PrincipalDerivedAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id", "AlternateId"}))

            Dim principalBasePrincipalDerivedDependentBasebyte = FindEntityType("PrincipalBasePrincipalDerived<DependentBase<byte?>>")

            Dim defaultTableMappings5 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalBasePrincipalDerivedDependentBasebyte.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5)
            Dim principalBasePrincipalDerivedDependentBasebyteTableBase As New TableBase("PrincipalBasePrincipalDerived<DependentBase<byte?>>", Nothing, relationalModel)
            Dim derivedsAlternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("DerivedsAlternateId", "uniqueidentifier", principalBasePrincipalDerivedDependentBasebyteTableBase)
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("DerivedsAlternateId", derivedsAlternateIdColumnBase)
            Dim derivedsIdColumnBase As New ColumnBase(Of ColumnMappingBase)("DerivedsId", "bigint", principalBasePrincipalDerivedDependentBasebyteTableBase)
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("DerivedsId", derivedsIdColumnBase)
            Dim principalsAlternateIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalsAlternateId", "uniqueidentifier", principalBasePrincipalDerivedDependentBasebyteTableBase)
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("PrincipalsAlternateId", principalsAlternateIdColumnBase)
            Dim principalsIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalsId", "bigint", principalBasePrincipalDerivedDependentBasebyteTableBase)
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("PrincipalsId", principalsIdColumnBase)
            Dim rowidColumnBase As New ColumnBase(Of ColumnMappingBase)("rowid", "rowversion", principalBasePrincipalDerivedDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("rowid", rowidColumnBase)
            relationalModel.DefaultTables.Add("PrincipalBasePrincipalDerived<DependentBase<byte?>>", principalBasePrincipalDerivedDependentBasebyteTableBase)
            Dim principalBasePrincipalDerivedDependentBasebyteMappingBase As New TableMappingBase(Of ColumnMappingBase)(principalBasePrincipalDerivedDependentBasebyte, principalBasePrincipalDerivedDependentBasebyteTableBase, True)
            principalBasePrincipalDerivedDependentBasebyteTableBase.AddTypeMapping(principalBasePrincipalDerivedDependentBasebyteMappingBase, False)
            defaultTableMappings5.Add(principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(derivedsAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsAlternateId"), principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(derivedsIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsId"), principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalsAlternateIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsAlternateId"), principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalsIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsId"), principalBasePrincipalDerivedDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(rowidColumnBase, ColumnBase(Of ColumnMappingBase)), principalBasePrincipalDerivedDependentBasebyte.FindProperty("rowid"), principalBasePrincipalDerivedDependentBasebyteMappingBase)

            Dim tableMappings5 As New List(Of TableMapping)()
            principalBasePrincipalDerivedDependentBasebyte.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5)
            Dim principalBasePrincipalDerivedDependentBasebyteTable As New Table("PrincipalBasePrincipalDerived<DependentBase<byte?>>", Nothing, relationalModel)
            Dim derivedsIdColumn As New Column("DerivedsId", "bigint", principalBasePrincipalDerivedDependentBasebyteTable)
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("DerivedsId", derivedsIdColumn)
            Dim derivedsAlternateIdColumn As New Column("DerivedsAlternateId", "uniqueidentifier", principalBasePrincipalDerivedDependentBasebyteTable)
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("DerivedsAlternateId", derivedsAlternateIdColumn)
            Dim principalsIdColumn As New Column("PrincipalsId", "bigint", principalBasePrincipalDerivedDependentBasebyteTable)
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("PrincipalsId", principalsIdColumn)
            Dim principalsAlternateIdColumn As New Column("PrincipalsAlternateId", "uniqueidentifier", principalBasePrincipalDerivedDependentBasebyteTable)
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("PrincipalsAlternateId", principalsAlternateIdColumn)
            Dim rowidColumn As New Column("rowid", "rowversion", principalBasePrincipalDerivedDependentBasebyteTable) With {
                .IsNullable = True
            }
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("rowid", rowidColumn)
            Dim pK_PrincipalBasePrincipalDerivedDependentBasebyte As New UniqueConstraint("PK_PrincipalBasePrincipalDerived<DependentBase<byte?>>", principalBasePrincipalDerivedDependentBasebyteTable, {derivedsIdColumn, derivedsAlternateIdColumn, principalsIdColumn, principalsAlternateIdColumn})
            principalBasePrincipalDerivedDependentBasebyteTable.PrimaryKey = pK_PrincipalBasePrincipalDerivedDependentBasebyte
            Dim pK_PrincipalBasePrincipalDerivedDependentBasebyteUc = RelationalModel.GetKey(Me,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                {"DerivedsId", "DerivedsAlternateId", "PrincipalsId", "PrincipalsAlternateId"})
            pK_PrincipalBasePrincipalDerivedDependentBasebyte.MappedKeys.Add(pK_PrincipalBasePrincipalDerivedDependentBasebyteUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_PrincipalBasePrincipalDerivedDependentBasebyteUc).Add(pK_PrincipalBasePrincipalDerivedDependentBasebyte)
            principalBasePrincipalDerivedDependentBasebyteTable.UniqueConstraints.Add("PK_PrincipalBasePrincipalDerived<DependentBase<byte?>>", pK_PrincipalBasePrincipalDerivedDependentBasebyte)
            Dim iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId As New TableIndex(
            "IX_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalsId_PrincipalsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, {principalsIdColumn, principalsAlternateIdColumn}, False)
            Dim iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx = RelationalModel.GetIndex(Me,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                {"PrincipalsId", "PrincipalsAlternateId"})
            iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId.MappedIndexes.Add(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx).Add(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId)
            principalBasePrincipalDerivedDependentBasebyteTable.Indexes.Add("IX_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalsId_PrincipalsAlternateId", iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId)
            relationalModel.Tables.Add(("PrincipalBasePrincipalDerived<DependentBase<byte?>>", Nothing), principalBasePrincipalDerivedDependentBasebyteTable)
            Dim principalBasePrincipalDerivedDependentBasebyteTableMapping As New TableMapping(principalBasePrincipalDerivedDependentBasebyte, principalBasePrincipalDerivedDependentBasebyteTable, True)
            principalBasePrincipalDerivedDependentBasebyteTable.AddTypeMapping(principalBasePrincipalDerivedDependentBasebyteTableMapping, False)
            tableMappings5.Add(principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(derivedsAlternateIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsAlternateId"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(derivedsIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsId"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalsAlternateIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsAlternateId"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalsIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsId"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(rowidColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("rowid"), principalBasePrincipalDerivedDependentBasebyteTableMapping)
            Dim fK_DependentBasebyte_PrincipalBase_PrincipalId As New ForeignKeyConstraint(
                "FK_DependentBase<byte?>_PrincipalBase_PrincipalId", dependentBasebyteTable, principalBaseTable,
                {principalIdColumn},
                principalBaseTable.FindUniqueConstraint("AK_PrincipalBase_Id"), ReferentialAction.Cascade)
            Dim fK_DependentBasebyte_PrincipalBase_PrincipalIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            fK_DependentBasebyte_PrincipalBase_PrincipalId.MappedForeignKeys.Add(fK_DependentBasebyte_PrincipalBase_PrincipalIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DependentBasebyte_PrincipalBase_PrincipalIdFk).Add(fK_DependentBasebyte_PrincipalBase_PrincipalId)
            dependentBasebyteTable.ForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId)
            Dim fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId As New ForeignKeyConstraint(
                "FK_DependentBase<byte?>_PrincipalBase_PrincipalId_PrincipalAlternateId", dependentBasebyteTable, principalBaseTable,
                {principalIdColumn, principalAlternateIdColumn},
                principalBaseTable.FindUniqueConstraint("PK"), ReferentialAction.NoAction)
            Dim fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId", "PrincipalAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id", "AlternateId"})
            fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId.MappedForeignKeys.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateIdFk).Add(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId)
            dependentBasebyteTable.ForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId)
            Dim fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId As New ForeignKeyConstraint(
                "FK_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalBase_DerivedsId_DerivedsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, principalBaseTable,
                {derivedsIdColumn, derivedsAlternateIdColumn},
                principalBaseTable.FindUniqueConstraint("PK"), ReferentialAction.Cascade)
            Dim fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateIdFk = RelationalModel.GetForeignKey(Me,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                {"DerivedsId", "DerivedsAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id", "AlternateId"})
            fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId.MappedForeignKeys.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateIdFk).Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId)
            principalBasePrincipalDerivedDependentBasebyteTable.ForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId)
            Dim fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId As New ForeignKeyConstraint(
                "FK_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalBase_PrincipalsId_PrincipalsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, principalBaseTable,
                {principalsIdColumn, principalsAlternateIdColumn},
                principalBaseTable.FindUniqueConstraint("PK"), ReferentialAction.NoAction)
            Dim fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk = RelationalModel.GetForeignKey(Me,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                {"PrincipalsId", "PrincipalsAlternateId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id", "AlternateId"})
            fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId.MappedForeignKeys.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk).Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId)
            principalBasePrincipalDerivedDependentBasebyteTable.ForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Dim DependentBaseEntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Migrations.Design
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports Microsoft.EntityFrameworkCore.ValueGeneration

Namespace TestNamespace
    Friend Partial Class DependentBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                baseEntityType,
                discriminatorProperty:="EnumDiscriminator",
                discriminatorValue:=VisualBasicMigrationsGeneratorTests.Enum1.One)

            Dim principalId = entityType.AddProperty(
                "PrincipalId",
                GetType(Long),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0L)
            principalId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            principalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalAlternateId = entityType.AddProperty(
                "PrincipalAlternateId",
                GetType(Guid),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"))
            principalAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            principalAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enumDiscriminator = entityType.AddProperty(
                "EnumDiscriminator",
                GetType(VisualBasicMigrationsGeneratorTests.Enum1),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                valueGeneratorFactory:=AddressOf New DiscriminatorValueGeneratorFactory().Create,
                sentinel:=VisualBasicMigrationsGeneratorTests.Enum1.Default)
            enumDiscriminator.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicMigrationsGeneratorTests.Enum1)(
                    Function(v1 As VisualBasicMigrationsGeneratorTests.Enum1, v2 As VisualBasicMigrationsGeneratorTests.Enum1) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicMigrationsGeneratorTests.Enum1) v.GetHashCode(),
                    Function(v As VisualBasicMigrationsGeneratorTests.Enum1) v),
                keyComparer:=New ValueComparer(Of VisualBasicMigrationsGeneratorTests.Enum1)(
                    Function(v1 As VisualBasicMigrationsGeneratorTests.Enum1, v2 As VisualBasicMigrationsGeneratorTests.Enum1) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicMigrationsGeneratorTests.Enum1) v.GetHashCode(),
                    Function(v As VisualBasicMigrationsGeneratorTests.Enum1) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicMigrationsGeneratorTests.Enum1, Integer)(
                    Function(value As VisualBasicMigrationsGeneratorTests.Enum1) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicMigrationsGeneratorTests.Enum1)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicMigrationsGeneratorTests.Enum1, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicMigrationsGeneratorTests.Enum1, Integer)(
                        Function(value As VisualBasicMigrationsGeneratorTests.Enum1) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicMigrationsGeneratorTests.Enum1))))
            enumDiscriminator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Byte?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            id.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))),
                keyComparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))),
                providerValueComparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {principalId, principalAlternateId})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalId},
                unique:=True)

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                unique:=True,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalId"), declaringEntityType.FindProperty("PrincipalAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientNoAction,
                unique:=True,
                required:=True)

            Dim principal = declaringEntityType.AddNavigation("Principal",
                runtimeForeignKey,
                onDependent:=True,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Principal", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Principal", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim dependent = principalEntityType.AddNavigation("Dependent",
                runtimeForeignKey,
                onDependent:=False,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Dependent", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Dependent", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                eagerLoaded:=True,
                lazyLoadingEnabled:=False)

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("DiscriminatorMappingComplete", False)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:MappingStrategy", "TPH")
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "DependentBase<byte?>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim PrincipalBaseEntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports Microsoft.EntityFrameworkCore.ValueGeneration
Imports NetTopologySuite.Geometries

Namespace TestNamespace
    Friend Partial Class PrincipalBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase),
                baseEntityType,
                discriminatorProperty:="Discriminator",
                discriminatorValue:="PrincipalBase")

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Long?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim alternateId = entityType.AddProperty(
                "AlternateId",
                GetType(Guid),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("AlternateId", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.FieldDuringConstruction,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"),
                jsonValueReaderWriter:=New MyJsonGuidReaderWriter())
            alternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            alternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim discriminator = entityType.AddProperty(
                "Discriminator",
                GetType(String),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                maxLength:=55,
                valueGeneratorFactory:=AddressOf New DiscriminatorValueGeneratorFactory().Create)
            discriminator.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nvarchar(55)",
                    size:=55,
                    dbType:=System.Data.DbType.String))
            discriminator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum1 = entityType.AddProperty(
                "Enum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))
            enum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum2 = entityType.AddProperty(
                "Enum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            enum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum1 = entityType.AddProperty(
                "FlagsEnum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum2 = entityType.AddProperty(
                "FlagsEnum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(6, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim point = entityType.AddProperty(
                "Point",
                GetType(Point),
                nullable:=True,
                valueGenerated:=ValueGenerated.OnAdd,
                valueConverter:=New CastingConverter(Of Point, Point)(),
                valueComparer:=New VisualBasicRuntimeModelCodeGeneratorTest.CustomValueComparer(Of Point)(),
                providerValueComparer:=New VisualBasicRuntimeModelCodeGeneratorTest.CustomValueComparer(Of Point)())
            point.TypeMapping = Nothing
            point.AddAnnotation("Relational:ColumnType", "geometry")
            point.AddAnnotation("Relational:DefaultValue", CType(New NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT Z(0 0 0)"), NetTopologySuite.Geometries.Point))
            point.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = entityType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = entityType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = entityType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = entityType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = entityType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = entityType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = entityType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = entityType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim key = entityType.AddKey(
    {id})

Dim key0 = entityType.AddKey(
    {id, alternateId})
entityType.SetPrimaryKey(key0)
key0.AddAnnotation("Relational:Name", "PK")

Dim index = entityType.AddIndex(
    {alternateId, id})

Return entityType
End Function

Public Shared Function CreateSkipNavigation1(declaringEntityType As RuntimeEntityType, targetEntityType As RuntimeEntityType, joinEntityType As RuntimeEntityType) As RuntimeSkipNavigation
    Dim skipNavigation = declaringEntityType.AddSkipNavigation(
        "Deriveds",
        targetEntityType,
        joinEntityType.FindForeignKey(
            {joinEntityType.FindProperty("PrincipalsId"), joinEntityType.FindProperty("PrincipalsAlternateId")},
            declaringEntityType.FindKey({declaringEntityType.FindProperty("Id"), declaringEntityType.FindProperty("AlternateId")}),
            declaringEntityType),
        True,
        False,
        GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
        propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Deriveds", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Deriveds", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

    Dim inverse = targetEntityType.FindSkipNavigation("Principals")
    If inverse IsNot Nothing Then
        skipNavigation.Inverse = inverse
        inverse.Inverse = skipNavigation
    End If

    Return skipNavigation
End Function

Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
    entityType.AddAnnotation("Relational:FunctionName", Nothing)
    entityType.AddAnnotation("Relational:MappingStrategy", "TPH")
    entityType.AddAnnotation("Relational:Schema", Nothing)
    entityType.AddAnnotation("Relational:SqlQuery", Nothing)
    entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
    entityType.AddAnnotation("Relational:ViewName", Nothing)
    entityType.AddAnnotation("Relational:ViewSchema", Nothing)

    Customize(entityType)
End Sub

Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
End Sub
End Class
End Namespace
]]>.Value

            Dim OwnedTypeEntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion

Namespace TestNamespace
    Friend Partial Class OwnedTypeEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
                baseEntityType,
                sharedClrType:=True,
                changeTrackingStrategy:=ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues)

            Dim principalBaseId = entityType.AddProperty(
                "PrincipalBaseId",
                GetType(Long),
                propertyAccessMode:=PropertyAccessMode.Field,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0L)
            principalBaseId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            principalBaseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalBaseAlternateId = entityType.AddProperty(
                "PrincipalBaseAlternateId",
                GetType(Guid),
                propertyAccessMode:=PropertyAccessMode.Field,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"))
            principalBaseAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            principalBaseAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim details = entityType.AddProperty(
                "Details",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Details", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_details", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field,
                nullable:=True)
            details.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nvarchar(max)",
                    dbType:=System.Data.DbType.String),
                storeTypePostfix:=StoreTypePostfix.None)
            details.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim number = entityType.AddProperty(
                "Number",
                GetType(Integer),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Number", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Number", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field,
                sentinel:=0)
            number.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            number.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = entityType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                propertyAccessMode:=PropertyAccessMode.Field,
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = entityType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = entityType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = entityType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = entityType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = entityType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = entityType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = entityType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    propertyAccessMode:=PropertyAccessMode.Field,
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim context = entityType.AddServiceProperty(
    "Context",
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Context", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    serviceType:=GetType(DbContext))

Dim key = entityType.AddKey(
    {principalBaseId, principalBaseAlternateId})
entityType.SetPrimaryKey(key)

Return entityType
End Function

Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
    Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalBaseId"), declaringEntityType.FindProperty("PrincipalBaseAlternateId")},
        principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
        principalEntityType,
        deleteBehavior:=DeleteBehavior.Cascade,
        unique:=True,
        required:=True,
        requiredDependent:=True,
        ownership:=True)

    Dim owned = principalEntityType.AddNavigation("Owned",
        runtimeForeignKey,
        onDependent:=False,
        GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
        propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Owned", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ownedField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        propertyAccessMode:=PropertyAccessMode.Field,
        eagerLoaded:=True)

    Return runtimeForeignKey
End Function

Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
    entityType.AddAnnotation("Relational:ContainerColumnName", "Owned")
    entityType.AddAnnotation("Relational:FunctionName", Nothing)
    entityType.AddAnnotation("Relational:Schema", Nothing)
    entityType.AddAnnotation("Relational:SqlQuery", Nothing)
    entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
    entityType.AddAnnotation("Relational:ViewName", Nothing)
    entityType.AddAnnotation("Relational:ViewSchema", Nothing)

    Customize(entityType)
End Sub

Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
End Sub
End Class
End Namespace
]]>.Value

            Dim OwnedType0EntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion

Namespace TestNamespace
    Friend Partial Class OwnedType0EntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
                baseEntityType,
                sharedClrType:=True)

            Dim principalDerivedId = entityType.AddProperty(
                "PrincipalDerivedId",
                GetType(Long),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0L)
            principalDerivedId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            principalDerivedId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalDerivedAlternateId = entityType.AddProperty(
                "PrincipalDerivedAlternateId",
                GetType(Guid),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"))
            principalDerivedAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            principalDerivedAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0)
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim details = entityType.AddProperty(
                "Details",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Details", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_details", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            details.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nvarchar(max)",
                    dbType:=System.Data.DbType.String),
                storeTypePostfix:=StoreTypePostfix.None)
            details.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim number = entityType.AddProperty(
                "Number",
                GetType(Integer),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Number", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Number", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=0)
            number.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            number.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = entityType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = entityType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = entityType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = entityType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = entityType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = entityType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = entityType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = entityType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim context = entityType.AddServiceProperty(
    "Context",
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Context", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    serviceType:=GetType(DbContext))

Dim key = entityType.AddKey(
    {principalDerivedId, principalDerivedAlternateId, id})
entityType.SetPrimaryKey(key)

Return entityType
End Function

Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
    Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalDerivedId"), declaringEntityType.FindProperty("PrincipalDerivedAlternateId")},
        principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
        principalEntityType,
        deleteBehavior:=DeleteBehavior.Cascade,
        required:=True,
        ownership:=True)

    Dim manyOwned = principalEntityType.AddNavigation("ManyOwned",
        runtimeForeignKey,
        onDependent:=False,
        GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.OwnedType)),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("ManyOwned", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        eagerLoaded:=True)

    Return runtimeForeignKey
End Function

Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
    entityType.AddAnnotation("Relational:ContainerColumnName", "ManyOwned")
    entityType.AddAnnotation("Relational:FunctionName", Nothing)
    entityType.AddAnnotation("Relational:Schema", Nothing)
    entityType.AddAnnotation("Relational:SqlQuery", Nothing)
    entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
    entityType.AddAnnotation("Relational:ViewName", Nothing)
    entityType.AddAnnotation("Relational:ViewSchema", Nothing)

    Customize(entityType)
End Sub

Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
End Sub
End Class
End Namespace
]]>.Value

            Dim PrincipalBasePrincipalDerivedDependentBasebyteEntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.Linq
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class PrincipalBasePrincipalDerivedDependentBasebyteEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                GetType(Dictionary(Of String, Object)),
                baseEntityType,
                sharedClrType:=True,
                indexerPropertyInfo:=RuntimeEntityType.FindIndexerProperty(GetType(Dictionary(Of String, Object))),
                propertyBag:=True)

            Dim derivedsId = entityType.AddProperty(
                "DerivedsId",
                GetType(Long),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            derivedsId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            derivedsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim derivedsAlternateId = entityType.AddProperty(
                "DerivedsAlternateId",
                GetType(Guid),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            derivedsAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            derivedsAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalsId = entityType.AddProperty(
                "PrincipalsId",
                GetType(Long),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalsId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                keyComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v),
                providerValueComparer:=New ValueComparer(Of Long)(
                    Function(v1 As Long, v2 As Long) v1 = v2,
                    Function(v As Long) v.GetHashCode(),
                    Function(v As Long) v))
            principalsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalsAlternateId = entityType.AddProperty(
                "PrincipalsAlternateId",
                GetType(Guid),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            principalsAlternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            principalsAlternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim rowid = entityType.AddProperty(
                "rowid",
                GetType(Byte()),
                propertyInfo:=entityType.FindIndexerPropertyInfo(),
                nullable:=True,
                concurrencyToken:=True,
                valueGenerated:=ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior:=PropertySaveBehavior.Ignore,
                afterSaveBehavior:=PropertySaveBehavior.Ignore)
            rowid.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(v1, v2),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(v),
                    Function(v As Byte()) v.ToArray()),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="rowversion",
                    size:=8),
                storeTypePostfix:=StoreTypePostfix.None)
            rowid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {derivedsId, derivedsAlternateId, principalsId, principalsAlternateId})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalsId, principalsAlternateId})

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("DerivedsId"), declaringEntityType.FindProperty("DerivedsAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.Cascade,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalsId"), declaringEntityType.FindProperty("PrincipalsAlternateId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("AlternateId")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientCascade,
                required:=True)

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalBasePrincipalDerived<DependentBase<byte?>>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim DependentDerivedEntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Migrations.Design
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class DependentDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentDerived<byte?>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)),
                baseEntityType,
                discriminatorProperty:="EnumDiscriminator",
                discriminatorValue:=VisualBasicMigrationsGeneratorTests.Enum1.Two)

            Dim data = entityType.AddProperty(
                "Data",
                GetType(String),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)).GetProperty("Data", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentDerived(Of Byte?)).GetField("_Data", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True,
                maxLength:=20,
                unicode:=False)
            data.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="char(20)",
                    size:=20,
                    dbType:=System.Data.DbType.AnsiStringFixedLength))
            data.AddAnnotation("Relational:IsFixedLength", True)
            data.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim money = entityType.AddProperty(
                "Money",
                GetType(Decimal),
                precision:=9,
                scale:=3,
                sentinel:=0D)
            money.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Decimal)(
                    Function(v1 As Decimal, v2 As Decimal) v1 = v2,
                    Function(v As Decimal) v.GetHashCode(),
                    Function(v As Decimal) v),
                keyComparer:=New ValueComparer(Of Decimal)(
                    Function(v1 As Decimal, v2 As Decimal) v1 = v2,
                    Function(v As Decimal) v.GetHashCode(),
                    Function(v As Decimal) v),
                providerValueComparer:=New ValueComparer(Of Decimal)(
                    Function(v1 As Decimal, v2 As Decimal) v1 = v2,
                    Function(v As Decimal) v.GetHashCode(),
                    Function(v As Decimal) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="decimal(9,3)",
                    precision:=9,
                    scale:=3))
            money.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "DependentBase<byte?>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim PrincipalDerivedEntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class PrincipalDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                baseEntityType,
                discriminatorProperty:="Discriminator",
                discriminatorValue:="PrincipalDerived<DependentBase<byte?>>")

            Return entityType
        End Function

        Public Shared Function CreateSkipNavigation1(declaringEntityType As RuntimeEntityType, targetEntityType As RuntimeEntityType, joinEntityType As RuntimeEntityType) As RuntimeSkipNavigation
            Dim skipNavigation = declaringEntityType.AddSkipNavigation(
                "Principals",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    {joinEntityType.FindProperty("DerivedsId"), joinEntityType.FindProperty("DerivedsAlternateId")},
                    declaringEntityType.FindKey({declaringEntityType.FindProperty("Id"), declaringEntityType.FindProperty("AlternateId")}),
                    declaringEntityType),
                True,
                False,
                GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Principals", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Principals", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                eagerLoaded:=True,
                lazyLoadingEnabled:=False)

            Dim inverse = targetEntityType.FindSkipNavigation("Deriveds")
            If inverse IsNot Nothing Then
                skipNavigation.Inverse = inverse
                inverse.Inverse = skipNavigation
            End If

            Return skipNavigation
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New BigContextWithJson(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.
                        Collection(code,
                        Sub(c) AssertFileContents("BigContextWithJsonModel.vb", BigContextWithJsonModel, c),
                        Sub(c) AssertFileContents("BigContextWithJsonModelBuilder.vb", BigContextWithJsonModelBuilder, c),
                        Sub(c) AssertFileContents("DependentBaseEntityType.vb", DependentBaseEntityType, c),
                        Sub(c) AssertFileContents("PrincipalBaseEntityType.vb", PrincipalBaseEntityType, c),
                        Sub(c) AssertFileContents("OwnedTypeEntityType.vb", OwnedTypeEntityType, c),
                        Sub(c) AssertFileContents("OwnedType0EntityType.vb", OwnedType0EntityType, c),
                        Sub(c) AssertFileContents("PrincipalBasePrincipalDerivedDependentBasebyteEntityType.vb", PrincipalBasePrincipalDerivedDependentBasebyteEntityType, c),
                        Sub(c) AssertFileContents("DependentDerivedEntityType.vb", DependentDerivedEntityType, c),
                        Sub(c) AssertFileContents("PrincipalDerivedEntityType.vb", PrincipalDerivedEntityType, c))
                End Sub,
                Sub(Model)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() Model.GetCollation()).Message)
                    Assert.Equal(
                        {RelationalAnnotationNames.MaxIdentifierLength, SqlServerAnnotationNames.ValueGenerationStrategy},
                        Model.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(SqlServerValueGenerationStrategy.IdentityColumn, Model.GetValueGenerationStrategy())
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() Model.GetPropertyAccessMode()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.IdentitySeed))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() Model.GetIdentitySeed()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.IdentityIncrement))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() Model.GetIdentityIncrement()).Message)

                    Assert.Null(Model.FindEntityType(GetType(AbstractBase)))
                    Dim principalBaseET = Model.FindEntityType(GetType(PrincipalBase))
                    Assert.Equal(GetType(PrincipalBase).FullName, principalBaseET.Name)
                    Assert.False(principalBaseET.HasSharedClrType)
                    Assert.False(principalBaseET.IsPropertyBag)
                    Assert.False(principalBaseET.IsOwned())
                    Assert.Null(principalBaseET.BaseType)
                    Assert.IsType(Of ConstructorBinding)(principalBaseET.ConstructorBinding)
                    Assert.Null(principalBaseET.FindIndexerPropertyInfo())
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, principalBaseET.GetChangeTrackingStrategy())
                    Assert.Null(principalBaseET.GetQueryFilter())
                    Assert.Equal("PrincipalBase", principalBaseET.GetTableName())
                    Assert.Null(principalBaseET.GetSchema())
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() principalBaseET.GetSeedData()).Message)

                    Dim principalId = principalBaseET.FindProperty(NameOf(PrincipalBase.Id))
                    Assert.Equal(
                        {SqlServerAnnotationNames.ValueGenerationStrategy},
                        principalId.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(GetType(Long?), principalId.ClrType)
                    Assert.Equal(GetType(Long?), principalId.PropertyInfo.PropertyType)
                    Assert.Equal(GetType(Long?), principalId.FieldInfo.FieldType)
                    Assert.False(principalId.IsNullable)
                    Assert.Equal(ValueGenerated.Never, principalId.ValueGenerated)
                    Assert.Equal(PropertySaveBehavior.Throw, principalId.GetAfterSaveBehavior())
                    Assert.Equal(PropertySaveBehavior.Save, principalId.GetBeforeSaveBehavior())
                    Assert.Null(principalId(CoreAnnotationNames.BeforeSaveBehavior))
                    Assert.Null(principalId(CoreAnnotationNames.AfterSaveBehavior))
                    Assert.Equal("Id", principalId.GetColumnName())
                    Assert.Equal("bigint", principalId.GetColumnType())
                    Assert.Null(principalId.GetValueConverter())
                    Assert.NotNull(principalId.GetValueComparer())
                    Assert.NotNull(principalId.GetKeyValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.None, principalId.GetValueGenerationStrategy())
                    Assert.Null(principalId(SqlServerAnnotationNames.IdentitySeed))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() principalId.GetIdentitySeed()).Message)
                    Assert.Null(principalId(SqlServerAnnotationNames.IdentityIncrement))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() principalId.GetIdentityIncrement()).Message)

                    Dim pointProperty = principalBaseET.FindProperty("Point")
                    Assert.Equal(GetType(Point), pointProperty.ClrType)
                    Assert.True(pointProperty.IsNullable)
                    Assert.Equal(ValueGenerated.OnAdd, pointProperty.ValueGenerated)
                    Assert.Equal("Point", pointProperty.GetColumnName())
                    Assert.Equal("geometry", pointProperty.GetColumnType())
                    Assert.Equal(0, DirectCast(pointProperty.GetDefaultValue(), Point).SRID)
                    Assert.IsType(Of CastingConverter(Of Point, Point))(pointProperty.GetValueConverter())
                    Assert.IsType(Of CustomValueComparer(Of Point))(pointProperty.GetValueComparer())
                    Assert.IsType(Of CustomValueComparer(Of Point))(pointProperty.GetKeyValueComparer())
                    Assert.IsType(Of CustomValueComparer(Of Point))(pointProperty.GetProviderValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.None, pointProperty.GetValueGenerationStrategy())
                    Assert.Null(pointProperty(CoreAnnotationNames.PropertyAccessMode))

                    Dim discriminatorProperty = principalBaseET.FindDiscriminatorProperty()
                    Assert.Equal("Discriminator", discriminatorProperty.Name)
                    Assert.Equal(GetType(String), discriminatorProperty.ClrType)

                    Dim principalAlternateId = principalBaseET.FindProperty(NameOf(PrincipalBase.AlternateId))
                    Dim compositeIndex = principalBaseET.GetIndexes().Single()
                    Assert.Equal(PropertyAccessMode.FieldDuringConstruction, principalAlternateId.GetPropertyAccessMode())
                    Assert.Empty(compositeIndex.GetAnnotations())
                    Assert.Equal({principalAlternateId, principalId}, compositeIndex.Properties)
                    Assert.False(compositeIndex.IsUnique)
                    Assert.Null(compositeIndex.Name)
                    Assert.Equal("IX_PrincipalBase_AlternateId_Id", compositeIndex.GetDatabaseName())

                    Assert.Equal({compositeIndex}, principalAlternateId.GetContainingIndexes())

                    Assert.Equal(2, principalBaseET.GetKeys().Count())

                    Dim principalAlternateKey = principalBaseET.GetKeys().First()
                    Assert.Same(principalId, principalAlternateKey.Properties.Single())
                    Assert.False(principalAlternateKey.IsPrimaryKey())
                    Assert.Equal("AK_PrincipalBase_Id", principalAlternateKey.GetName())

                    Dim principalKey = principalBaseET.GetKeys().Last()
                    Assert.Equal(
                        {RelationalAnnotationNames.Name},
                        principalKey.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal({principalId, principalAlternateId}, principalKey.Properties)
                    Assert.True(principalKey.IsPrimaryKey())
                    Assert.Equal("PK", principalKey.GetName())
                    Assert.Null(principalKey(SqlServerAnnotationNames.Clustered))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() principalKey.IsClustered()).Message)

                    Assert.Equal({principalAlternateKey, principalKey}, principalId.GetContainingKeys())

                    Dim referenceOwnedNavigation = principalBaseET.GetNavigations().Single()
                    Assert.Equal(
                         {CoreAnnotationNames.EagerLoaded},
                        referenceOwnedNavigation.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(NameOf(PrincipalBase.Owned), referenceOwnedNavigation.Name)
                    Assert.False(referenceOwnedNavigation.IsCollection)
                    Assert.True(referenceOwnedNavigation.IsEagerLoaded)
                    Assert.False(referenceOwnedNavigation.IsOnDependent)
                    Assert.Equal(GetType(OwnedType), referenceOwnedNavigation.ClrType)
                    Assert.Equal("_ownedField", referenceOwnedNavigation.FieldInfo.Name)
                    Assert.Equal(NameOf(PrincipalBase.Owned), referenceOwnedNavigation.PropertyInfo.Name)
                    Assert.Null(referenceOwnedNavigation.Inverse)
                    Assert.Equal(principalBaseET, referenceOwnedNavigation.DeclaringEntityType)
                    Assert.Equal(PropertyAccessMode.Field, referenceOwnedNavigation.GetPropertyAccessMode())
                    Assert.Null(referenceOwnedNavigation(CoreAnnotationNames.PropertyAccessMode))

                    Dim referenceOwnedType = referenceOwnedNavigation.TargetEntityType
                    Assert.Equal(GetType(PrincipalBase).FullName & ".Owned#OwnedType", referenceOwnedType.Name)
                    Assert.Equal(GetType(OwnedType), referenceOwnedType.ClrType)
                    Assert.True(referenceOwnedType.HasSharedClrType)
                    Assert.False(referenceOwnedType.IsPropertyBag)
                    Assert.True(referenceOwnedType.IsOwned())
                    Assert.Null(referenceOwnedType.BaseType)
                    Assert.False(referenceOwnedType.IsMemoryOptimized())
                    Assert.IsType(Of ConstructorBinding)(referenceOwnedType.ConstructorBinding)
                    Assert.Null(referenceOwnedType.FindIndexerPropertyInfo())
                    Assert.Equal(
                        ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues,
                        referenceOwnedType.GetChangeTrackingStrategy())
                    Assert.Null(referenceOwnedType.GetQueryFilter())
                    Assert.Null(referenceOwnedType(CoreAnnotationNames.PropertyAccessMode))
                    Assert.Null(referenceOwnedType(CoreAnnotationNames.NavigationAccessMode))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() referenceOwnedType.GetPropertyAccessMode()).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() referenceOwnedType.GetNavigationAccessMode()).Message)

                    Dim principalTable = StoreObjectIdentifier.Create(referenceOwnedType, StoreObjectType.Table).Value

                    Dim ownedId = referenceOwnedType.FindProperty("PrincipalBaseId")
                    Assert.True(ownedId.IsPrimaryKey())
                    Assert.Equal(
                        SqlServerValueGenerationStrategy.None,
                        principalId.GetValueGenerationStrategy(principalTable))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() principalId.GetIdentityIncrement(principalTable)).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() principalId.GetIdentitySeed(principalTable)).Message)

                    Dim detailsProperty = referenceOwnedType.FindProperty(NameOf(OwnedType.Details))
                    Assert.Null(detailsProperty(SqlServerAnnotationNames.Sparse))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() detailsProperty.IsSparse()).Message)
                    Assert.Null(detailsProperty(RelationalAnnotationNames.Collation))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() detailsProperty.GetCollation()).Message)

                    Assert.Null(detailsProperty.GetColumnName(principalTable))

                    Dim referenceOwnership = referenceOwnedNavigation.ForeignKey
                    Assert.Empty(referenceOwnership.GetAnnotations())
                    Assert.Same(referenceOwnership, referenceOwnedType.FindOwnership())
                    Assert.True(referenceOwnership.IsOwnership)
                    Assert.True(referenceOwnership.IsRequired)
                    Assert.True(referenceOwnership.IsRequiredDependent)
                    Assert.True(referenceOwnership.IsUnique)
                    Assert.Null(referenceOwnership.DependentToPrincipal)
                    Assert.Same(referenceOwnedNavigation, referenceOwnership.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.Cascade, referenceOwnership.DeleteBehavior)
                    Assert.Equal(2, referenceOwnership.Properties.Count())
                    Assert.Same(principalKey, referenceOwnership.PrincipalKey)

                    Dim ownedServiceProperty = referenceOwnedType.GetServiceProperties().Single()
                    Assert.Empty(ownedServiceProperty.GetAnnotations())
                    Assert.Equal(GetType(DbContext), ownedServiceProperty.ClrType)
                    Assert.Equal(GetType(DbContext), ownedServiceProperty.PropertyInfo.PropertyType)
                    Assert.Null(ownedServiceProperty.FieldInfo)
                    Assert.Same(referenceOwnedType, ownedServiceProperty.DeclaringEntityType)
                    Dim ownedServicePropertyBinding = ownedServiceProperty.ParameterBinding
                    Assert.IsType(Of ContextParameterBinding)(ownedServicePropertyBinding)
                    Assert.Equal(GetType(DbContext), ownedServicePropertyBinding.ServiceType)
                    Assert.Equal(ownedServiceProperty, ownedServicePropertyBinding.ConsumedProperties.Single())
                    Assert.Equal(PropertyAccessMode.PreferField, ownedServiceProperty.GetPropertyAccessMode())
                    Assert.Null(ownedServiceProperty(CoreAnnotationNames.PropertyAccessMode))

                    Dim principalDerived = Model.FindEntityType(GetType(PrincipalDerived(Of DependentBase(Of Byte?))))
                    Assert.Equal(principalBaseET, principalDerived.BaseType)
                    Assert.Equal(
                        "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+" &
                        "PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                        principalDerived.Name)
                    Assert.False(principalDerived.IsOwned())
                    Assert.IsType(Of ConstructorBinding)(principalDerived.ConstructorBinding)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, principalDerived.GetChangeTrackingStrategy())
                    Assert.Equal("PrincipalDerived<DependentBase<byte?>>", principalDerived.GetDiscriminatorValue())

                    Assert.Equal(2, principalDerived.GetDeclaredNavigations().Count())
                    Dim dependentNavigation = principalDerived.GetDeclaredNavigations().First()
                    Assert.Equal("Dependent", dependentNavigation.Name)
                    Assert.Equal("Dependent", dependentNavigation.PropertyInfo.Name)
                    Assert.Equal("_Dependent", dependentNavigation.FieldInfo.Name)
                    Assert.False(dependentNavigation.IsCollection)
                    Assert.True(dependentNavigation.IsEagerLoaded)
                    Assert.False(dependentNavigation.LazyLoadingEnabled)
                    Assert.False(dependentNavigation.IsOnDependent)
                    Assert.Equal(principalDerived, dependentNavigation.DeclaringEntityType)
                    Assert.Equal("Principal", dependentNavigation.Inverse.Name)

                    Dim ownedCollectionNavigation = principalDerived.GetDeclaredNavigations().Last()
                    Assert.Equal("ManyOwned", ownedCollectionNavigation.Name)
                    Assert.Null(ownedCollectionNavigation.PropertyInfo)
                    Assert.Equal("ManyOwned", ownedCollectionNavigation.FieldInfo.Name)
                    Assert.Equal(GetType(ICollection(Of OwnedType)), ownedCollectionNavigation.ClrType)
                    Assert.True(ownedCollectionNavigation.IsCollection)
                    Assert.True(ownedCollectionNavigation.IsEagerLoaded)
                    Assert.False(ownedCollectionNavigation.IsOnDependent)
                    Assert.Null(ownedCollectionNavigation.Inverse)
                    Assert.Equal(principalDerived, ownedCollectionNavigation.DeclaringEntityType)

                    Dim collectionOwnedType = ownedCollectionNavigation.TargetEntityType
                    Assert.Equal(principalDerived.Name & ".ManyOwned#OwnedType", collectionOwnedType.Name)
                    Assert.Equal(GetType(OwnedType), collectionOwnedType.ClrType)
                    Assert.True(collectionOwnedType.HasSharedClrType)
                    Assert.False(collectionOwnedType.IsPropertyBag)
                    Assert.True(collectionOwnedType.IsOwned())
                    Assert.False(collectionOwnedType.IsMemoryOptimized())
                    Assert.Null(collectionOwnedType(RelationalAnnotationNames.IsTableExcludedFromMigrations))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() collectionOwnedType.IsTableExcludedFromMigrations()).Message)
                    Assert.Null(collectionOwnedType.BaseType)
                    Assert.IsType(Of ConstructorBinding)(collectionOwnedType.ConstructorBinding)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, collectionOwnedType.GetChangeTrackingStrategy())

                    Dim collectionOwnership = ownedCollectionNavigation.ForeignKey
                    Assert.Same(collectionOwnership, collectionOwnedType.FindOwnership())
                    Assert.True(collectionOwnership.IsOwnership)
                    Assert.True(collectionOwnership.IsRequired)
                    Assert.False(collectionOwnership.IsRequiredDependent)
                    Assert.False(collectionOwnership.IsUnique)
                    Assert.Null(collectionOwnership.DependentToPrincipal)
                    Assert.Same(ownedCollectionNavigation, collectionOwnership.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.Cascade, collectionOwnership.DeleteBehavior)
                    Assert.Equal(2, collectionOwnership.Properties.Count())

                    Dim derivedSkipNavigation = principalDerived.GetDeclaredSkipNavigations().Single()
                    Assert.Equal("Principals", derivedSkipNavigation.Name)
                    Assert.Equal("Principals", derivedSkipNavigation.PropertyInfo.Name)
                    Assert.Equal("_Principals", derivedSkipNavigation.FieldInfo.Name)
                    Assert.Equal(GetType(ICollection(Of PrincipalBase)), derivedSkipNavigation.ClrType)
                    Assert.True(derivedSkipNavigation.IsCollection)
                    Assert.True(derivedSkipNavigation.IsEagerLoaded)
                    Assert.False(derivedSkipNavigation.LazyLoadingEnabled)
                    Assert.False(derivedSkipNavigation.IsOnDependent)
                    Assert.Equal(principalDerived, derivedSkipNavigation.DeclaringEntityType)
                    Assert.Equal("Deriveds", derivedSkipNavigation.Inverse.Name)
                    Assert.Same(principalBaseET.GetSkipNavigations().Single(), derivedSkipNavigation.Inverse)

                    Assert.Same(derivedSkipNavigation, derivedSkipNavigation.ForeignKey.GetReferencingSkipNavigations().Single())
                    Assert.Same(
                        derivedSkipNavigation.Inverse, derivedSkipNavigation.Inverse.ForeignKey.GetReferencingSkipNavigations().Single())

                    Assert.Equal({derivedSkipNavigation.Inverse, derivedSkipNavigation}, principalDerived.GetSkipNavigations())

                    Dim joinType = derivedSkipNavigation.JoinEntityType

                    Assert.Equal("PrincipalBasePrincipalDerived<DependentBase<byte?>>", joinType.Name)
                    Assert.Equal(GetType(Dictionary(Of String, Object)), joinType.ClrType)
                    Assert.True(joinType.HasSharedClrType)
                    Assert.True(joinType.IsPropertyBag)
                    Assert.False(joinType.IsOwned())
                    Assert.Null(joinType.BaseType)
                    Assert.IsType(Of ConstructorBinding)(joinType.ConstructorBinding)
                    Assert.Equal("Item", joinType.FindIndexerPropertyInfo().Name)
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, joinType.GetChangeTrackingStrategy())
                    Assert.Null(joinType(RelationalAnnotationNames.Comment))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() joinType.GetComment()).Message)
                    Assert.Null(joinType.GetQueryFilter())

                    Dim rowid = joinType.GetProperties().Single(Function(p) Not p.IsForeignKey())
                    Assert.Equal(GetType(Byte()), rowid.ClrType)
                    Assert.True(rowid.IsIndexerProperty())
                    Assert.Same(joinType.FindIndexerPropertyInfo(), rowid.PropertyInfo)
                    Assert.Null(rowid.FieldInfo)
                    Assert.True(rowid.IsNullable)
                    Assert.False(rowid.IsShadowProperty())
                    Assert.True(rowid.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.OnAddOrUpdate, rowid.ValueGenerated)
                    Assert.Equal("rowid", rowid.GetColumnName())
                    Assert.Equal("rowversion", rowid.GetColumnType())
                    Assert.Null(rowid(RelationalAnnotationNames.Comment))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() rowid.GetComment()).Message)
                    Assert.Null(rowid(RelationalAnnotationNames.ColumnOrder))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() rowid.GetColumnOrder()).Message)
                    Assert.Null(rowid.GetValueConverter())
                    Assert.NotNull(rowid.GetValueComparer())
                    Assert.NotNull(rowid.GetKeyValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.None, rowid.GetValueGenerationStrategy())

                    Dim dependentForeignKey = dependentNavigation.ForeignKey
                    Assert.False(dependentForeignKey.IsOwnership)
                    Assert.True(dependentForeignKey.IsRequired)
                    Assert.False(dependentForeignKey.IsRequiredDependent)
                    Assert.True(dependentForeignKey.IsUnique)
                    Assert.Same(dependentNavigation.Inverse, dependentForeignKey.DependentToPrincipal)
                    Assert.Same(dependentNavigation, dependentForeignKey.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.ClientNoAction, dependentForeignKey.DeleteBehavior)
                    Assert.Equal({"PrincipalId", "PrincipalAlternateId"}, dependentForeignKey.Properties.Select(Function(p) p.Name))
                    Assert.Same(principalKey, dependentForeignKey.PrincipalKey)

                    Dim dependentBase = dependentNavigation.TargetEntityType

                    Assert.False(dependentBase.GetIsDiscriminatorMappingComplete())
                    Dim principalDiscriminator = dependentBase.FindDiscriminatorProperty()
                    Assert.IsType(Of DiscriminatorValueGenerator)(
                        principalDiscriminator.GetValueGeneratorFactory()(principalDiscriminator, dependentBase))
                    Assert.Equal(Enum1.One, dependentBase.GetDiscriminatorValue())

                    Dim dependentBaseForeignKey = dependentBase.GetForeignKeys().Single(Function(fk) fk IsNot dependentForeignKey)
                    Dim dependentForeignKeyProperty = dependentBaseForeignKey.Properties.Single()

                    Assert.Equal(
                         {dependentBaseForeignKey, dependentForeignKey}, dependentForeignKeyProperty.GetContainingForeignKeys())

                    Dim dependentDerived = dependentBase.GetDerivedTypes().Single()
                    Assert.Equal(Enum1.Two, dependentDerived.GetDiscriminatorValue())

                    Assert.Equal(2, dependentDerived.GetDeclaredProperties().Count())

                    Dim dependentData = dependentDerived.GetDeclaredProperties().First()
                    Assert.Equal(GetType(String), dependentData.ClrType)
                    Assert.Equal("Data", dependentData.Name)
                    Assert.Equal("Data", dependentData.PropertyInfo.Name)
                    Assert.Equal("_Data", dependentData.FieldInfo.Name)
                    Assert.True(dependentData.IsNullable)
                    Assert.False(dependentData.IsShadowProperty())
                    Assert.False(dependentData.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.Never, dependentData.ValueGenerated)
                    Assert.Equal("Data", dependentData.GetColumnName())
                    Assert.Equal("char(20)", dependentData.GetColumnType())
                    Assert.Equal(20, dependentData.GetMaxLength())
                    Assert.False(dependentData.IsUnicode())
                    Assert.True(dependentData.IsFixedLength())
                    Assert.Null(dependentData.GetPrecision())
                    Assert.Null(dependentData.GetScale())

                    Dim dependentMoney = dependentDerived.GetDeclaredProperties().Last()
                    Assert.Equal(GetType(Decimal), dependentMoney.ClrType)
                    Assert.Equal("Money", dependentMoney.Name)
                    Assert.Null(dependentMoney.PropertyInfo)
                    Assert.Null(dependentMoney.FieldInfo)
                    Assert.False(dependentMoney.IsNullable)
                    Assert.True(dependentMoney.IsShadowProperty())
                    Assert.False(dependentMoney.IsConcurrencyToken)
                    Assert.Equal(ValueGenerated.Never, dependentMoney.ValueGenerated)
                    Assert.Equal("Money", dependentMoney.GetColumnName())
                    Assert.Equal("decimal(9,3)", dependentMoney.GetColumnType())
                    Assert.Null(dependentMoney.GetMaxLength())
                    Assert.Null(dependentMoney.IsUnicode())
                    Assert.Null(dependentMoney.IsFixedLength())
                    Assert.Equal(9, dependentMoney.GetPrecision())
                    Assert.Equal(3, dependentMoney.GetScale())

                    Assert.Equal(
                        {
                            derivedSkipNavigation.ForeignKey,
                            referenceOwnership,
                            collectionOwnership,
                            dependentForeignKey,
                            derivedSkipNavigation.Inverse.ForeignKey
                        },
                        principalKey.GetReferencingForeignKeys())

                    Assert.Equal(
                         {dependentBaseForeignKey, referenceOwnership, derivedSkipNavigation.Inverse.ForeignKey},
                        principalBaseET.GetReferencingForeignKeys())

                    Assert.Equal(
                         {derivedSkipNavigation.ForeignKey, collectionOwnership, dependentForeignKey},
                        principalDerived.GetDeclaredReferencingForeignKeys())

                    Assert.Equal(
                        {
                            dependentBase,
                            dependentDerived,
                            principalBaseET,
                            referenceOwnedType,
                            principalDerived,
                            collectionOwnedType,
                            joinType
                        },
                        Model.GetEntityTypes())
                End Sub,
                GetType(SqlServerNetTopologySuiteDesignTimeServices))
        End Sub

        <ConditionalFact>
        Public Sub ComplexTypes()

            Dim ComplexTypesContextModel = <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.ComplexTypesContext))>
    Public Partial Class ComplexTypesContextModel
        Inherits RuntimeModel

        Private Shared _Instance As ComplexTypesContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New ComplexTypesContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim ComplexTypesContextModelBuilder = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.Migrations

Namespace TestNamespace
    Public Partial Class ComplexTypesContextModel

        Private Sub Initialize()
            Dim principalBase = PrincipalBaseEntityType.Create(Me)
            Dim principalDerived = PrincipalDerivedEntityType.Create(Me, principalBase)

            PrincipalBaseEntityType.CreateForeignKey1(principalBase, principalBase)

            PrincipalBaseEntityType.CreateAnnotations(principalBase)
            PrincipalDerivedEntityType.CreateAnnotations(principalDerived)

            Dim functions As New SortedDictionary(Of String, IDbFunction)()
            Dim principalBaseTvf As New RuntimeDbFunction(
                "PrincipalBaseTvf",
                Me,
                GetType(IQueryable(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
                "PrincipalBaseTvf",
                schema:="dbo")

            functions("PrincipalBaseTvf") = principalBaseTvf

            AddAnnotation("Relational:DbFunctions", functions)
            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim principalBase = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase", Nothing, relationalModel)
            Dim discriminatorColumnBase As New ColumnBase(Of ColumnMappingBase)("Discriminator", "nvarchar(55)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Discriminator", discriminatorColumnBase)
            Dim enum1ColumnBase As New ColumnBase(Of ColumnMappingBase)("Enum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Enum1", enum1ColumnBase)
            Dim enum2ColumnBase As New ColumnBase(Of ColumnMappingBase)("Enum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Enum2", enum2ColumnBase)
            Dim flagsEnum1ColumnBase As New ColumnBase(Of ColumnMappingBase)("FlagsEnum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("FlagsEnum1", flagsEnum1ColumnBase)
            Dim flagsEnum2ColumnBase As New ColumnBase(Of ColumnMappingBase)("FlagsEnum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("FlagsEnum2", flagsEnum2ColumnBase)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Id", idColumnBase)
            Dim principalBaseIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalBaseId", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("PrincipalBaseId", principalBaseIdColumnBase)
            Dim refTypeArrayColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeArray", refTypeArrayColumnBase)
            Dim refTypeEnumerableColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumnBase)
            Dim refTypeIListColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeIList", refTypeIListColumnBase)
            Dim refTypeListColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeList", refTypeListColumnBase)
            Dim valueTypeArrayColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeArray", valueTypeArrayColumnBase)
            Dim valueTypeEnumerableColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumnBase)
            Dim valueTypeIListColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeIList", valueTypeIListColumnBase)
            Dim valueTypeListColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeList", valueTypeListColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase As New TableMappingBase(Of ColumnMappingBase)(principalBase, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(discriminatorColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Discriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalBaseIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("PrincipalBaseId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            principalBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim principalBaseTable As New Table("PrincipalBase", Nothing, relationalModel)
            Dim idColumn As New Column("Id", "bigint", principalBaseTable)
            principalBaseTable.Columns.Add("Id", idColumn)
            Dim deetsColumn As New Column("Deets", "varchar(64)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Deets", deetsColumn)
            Dim discriminatorColumn As New Column("Discriminator", "nvarchar(55)", principalBaseTable)
            principalBaseTable.Columns.Add("Discriminator", discriminatorColumn)
            Dim enum1Column As New Column("Enum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Enum1", enum1Column)
            Dim enum2Column As New Column("Enum2", "int", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Enum2", enum2Column)
            Dim flagsEnum1Column As New Column("FlagsEnum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("FlagsEnum1", flagsEnum1Column)
            Dim flagsEnum2Column As New Column("FlagsEnum2", "int", principalBaseTable)
            principalBaseTable.Columns.Add("FlagsEnum2", flagsEnum2Column)
            Dim owned_NumberColumn As New Column("Owned_Number", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Owned_Number", owned_NumberColumn)
            Dim owned_Principal_AlternateIdColumn As New Column("Owned_Principal_AlternateId", "uniqueidentifier", principalBaseTable)
            principalBaseTable.Columns.Add("Owned_Principal_AlternateId", owned_Principal_AlternateIdColumn)
            Dim owned_Principal_Enum1Column As New Column("Owned_Principal_Enum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Owned_Principal_Enum1", owned_Principal_Enum1Column)
            Dim owned_Principal_Enum2Column As New Column("Owned_Principal_Enum2", "int", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_Enum2", owned_Principal_Enum2Column)
            Dim owned_Principal_FlagsEnum1Column As New Column("Owned_Principal_FlagsEnum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Owned_Principal_FlagsEnum1", owned_Principal_FlagsEnum1Column)
            Dim owned_Principal_FlagsEnum2Column As New Column("Owned_Principal_FlagsEnum2", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Owned_Principal_FlagsEnum2", owned_Principal_FlagsEnum2Column)
            Dim owned_Principal_IdColumn As New Column("Owned_Principal_Id", "bigint", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_Id", owned_Principal_IdColumn)
            Dim owned_Principal_RefTypeArrayColumn As New Column("Owned_Principal_RefTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_RefTypeArray", owned_Principal_RefTypeArrayColumn)
            Dim owned_Principal_RefTypeEnumerableColumn As New Column("Owned_Principal_RefTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_RefTypeEnumerable", owned_Principal_RefTypeEnumerableColumn)
            Dim owned_Principal_RefTypeIListColumn As New Column("Owned_Principal_RefTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_RefTypeIList", owned_Principal_RefTypeIListColumn)
            Dim owned_Principal_RefTypeListColumn As New Column("Owned_Principal_RefTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_RefTypeList", owned_Principal_RefTypeListColumn)
            Dim owned_Principal_ValueTypeArrayColumn As New Column("Owned_Principal_ValueTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_ValueTypeArray", owned_Principal_ValueTypeArrayColumn)
            Dim owned_Principal_ValueTypeEnumerableColumn As New Column("Owned_Principal_ValueTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_ValueTypeEnumerable", owned_Principal_ValueTypeEnumerableColumn)
            Dim owned_Principal_ValueTypeIListColumn As New Column("Owned_Principal_ValueTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_ValueTypeIList", owned_Principal_ValueTypeIListColumn)
            Dim owned_Principal_ValueTypeListColumn As New Column("Owned_Principal_ValueTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_Principal_ValueTypeList", owned_Principal_ValueTypeListColumn)
            Dim owned_RefTypeArrayColumn As New Column("Owned_RefTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_RefTypeArray", owned_RefTypeArrayColumn)
            Dim owned_RefTypeEnumerableColumn As New Column("Owned_RefTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_RefTypeEnumerable", owned_RefTypeEnumerableColumn)
            Dim owned_RefTypeIListColumn As New Column("Owned_RefTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_RefTypeIList", owned_RefTypeIListColumn)
            Dim owned_RefTypeListColumn As New Column("Owned_RefTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_RefTypeList", owned_RefTypeListColumn)
            Dim owned_ValueTypeArrayColumn As New Column("Owned_ValueTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_ValueTypeArray", owned_ValueTypeArrayColumn)
            Dim owned_ValueTypeEnumerableColumn As New Column("Owned_ValueTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_ValueTypeEnumerable", owned_ValueTypeEnumerableColumn)
            Dim owned_ValueTypeIListColumn As New Column("Owned_ValueTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_ValueTypeIList", owned_ValueTypeIListColumn)
            Dim owned_ValueTypeListColumn As New Column("Owned_ValueTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Owned_ValueTypeList", owned_ValueTypeListColumn)
            Dim principalBaseIdColumn As New Column("PrincipalBaseId", "bigint", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("PrincipalBaseId", principalBaseIdColumn)
            Dim refTypeArrayColumn As New Column("RefTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeArray", refTypeArrayColumn)
            Dim refTypeEnumerableColumn As New Column("RefTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumn)
            Dim refTypeIListColumn As New Column("RefTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeIList", refTypeIListColumn)
            Dim refTypeListColumn As New Column("RefTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeList", refTypeListColumn)
            Dim valueTypeArrayColumn As New Column("ValueTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeArray", valueTypeArrayColumn)
            Dim valueTypeEnumerableColumn As New Column("ValueTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumn)
            Dim valueTypeIListColumn As New Column("ValueTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeIList", valueTypeIListColumn)
            Dim valueTypeListColumn As New Column("ValueTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeList", valueTypeListColumn)
            Dim pK_PrincipalBase As New UniqueConstraint("PK_PrincipalBase", principalBaseTable, {idColumn})
            principalBaseTable.PrimaryKey = pK_PrincipalBase
            Dim pK_PrincipalBaseUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            pK_PrincipalBase.MappedKeys.Add(pK_PrincipalBaseUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_PrincipalBaseUc).Add(pK_PrincipalBase)
            principalBaseTable.UniqueConstraints.Add("PK_PrincipalBase", pK_PrincipalBase)
            Dim iX_PrincipalBase_PrincipalBaseId As New TableIndex(
            "IX_PrincipalBase_PrincipalBaseId", principalBaseTable, {principalBaseIdColumn}, False)
            Dim iX_PrincipalBase_PrincipalBaseIdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"PrincipalBaseId"})
            iX_PrincipalBase_PrincipalBaseId.MappedIndexes.Add(iX_PrincipalBase_PrincipalBaseIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalBase_PrincipalBaseIdIx).Add(iX_PrincipalBase_PrincipalBaseId)
            principalBaseTable.Indexes.Add("IX_PrincipalBase_PrincipalBaseId", iX_PrincipalBase_PrincipalBaseId)
            relationalModel.Tables.Add(("PrincipalBase", Nothing), principalBaseTable)
            Dim principalBaseTableMapping As New TableMapping(principalBase, principalBaseTable, True) With {
                .IsSharedTablePrincipal = True
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping, False)
            tableMappings.Add(principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, principalBase.FindProperty("Id"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(discriminatorColumn, principalBase.FindProperty("Discriminator"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(enum1Column, principalBase.FindProperty("Enum1"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(enum2Column, principalBase.FindProperty("Enum2"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalBase.FindProperty("FlagsEnum1"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalBase.FindProperty("FlagsEnum2"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(principalBaseIdColumn, principalBase.FindProperty("PrincipalBaseId"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalBase.FindProperty("RefTypeArray"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalBase.FindProperty("RefTypeEnumerable"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalBase.FindProperty("RefTypeIList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalBase.FindProperty("RefTypeList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalBase.FindProperty("ValueTypeArray"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalBase.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalBase.FindProperty("ValueTypeIList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalBase.FindProperty("ValueTypeList"), principalBaseTableMapping)

            Dim viewMappings As New List(Of ViewMapping)()
            principalBase.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings)
            Dim principalBaseViewView As New View("PrincipalBaseView", Nothing, relationalModel)
            Dim discriminatorViewColumn As New ViewColumn("Discriminator", "nvarchar(55)", principalBaseViewView)
            principalBaseViewView.Columns.Add("Discriminator", discriminatorViewColumn)
            Dim enum1ViewColumn As New ViewColumn("Enum1", "int", principalBaseViewView)
            principalBaseViewView.Columns.Add("Enum1", enum1ViewColumn)
            Dim enum2ViewColumn As New ViewColumn("Enum2", "int", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("Enum2", enum2ViewColumn)
            Dim flagsEnum1ViewColumn As New ViewColumn("FlagsEnum1", "int", principalBaseViewView)
            principalBaseViewView.Columns.Add("FlagsEnum1", flagsEnum1ViewColumn)
            Dim flagsEnum2ViewColumn As New ViewColumn("FlagsEnum2", "int", principalBaseViewView)
            principalBaseViewView.Columns.Add("FlagsEnum2", flagsEnum2ViewColumn)
            Dim idViewColumn As New ViewColumn("Id", "bigint", principalBaseViewView)
            principalBaseViewView.Columns.Add("Id", idViewColumn)
            Dim principalBaseIdViewColumn As New ViewColumn("PrincipalBaseId", "bigint", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("PrincipalBaseId", principalBaseIdViewColumn)
            Dim refTypeArrayViewColumn As New ViewColumn("RefTypeArray", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("RefTypeArray", refTypeArrayViewColumn)
            Dim refTypeEnumerableViewColumn As New ViewColumn("RefTypeEnumerable", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("RefTypeEnumerable", refTypeEnumerableViewColumn)
            Dim refTypeIListViewColumn As New ViewColumn("RefTypeIList", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("RefTypeIList", refTypeIListViewColumn)
            Dim refTypeListViewColumn As New ViewColumn("RefTypeList", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("RefTypeList", refTypeListViewColumn)
            Dim valueTypeArrayViewColumn As New ViewColumn("ValueTypeArray", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("ValueTypeArray", valueTypeArrayViewColumn)
            Dim valueTypeEnumerableViewColumn As New ViewColumn("ValueTypeEnumerable", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableViewColumn)
            Dim valueTypeIListViewColumn As New ViewColumn("ValueTypeIList", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("ValueTypeIList", valueTypeIListViewColumn)
            Dim valueTypeListViewColumn As New ViewColumn("ValueTypeList", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("ValueTypeList", valueTypeListViewColumn)
            relationalModel.Views.Add(("PrincipalBaseView", Nothing), principalBaseViewView)
            Dim principalBaseViewViewMapping As New ViewMapping(principalBase, principalBaseViewView, True)
            principalBaseViewView.AddTypeMapping(principalBaseViewViewMapping, False)
            viewMappings.Add(principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(idViewColumn, principalBase.FindProperty("Id"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(discriminatorViewColumn, principalBase.FindProperty("Discriminator"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(enum1ViewColumn, principalBase.FindProperty("Enum1"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(enum2ViewColumn, principalBase.FindProperty("Enum2"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(flagsEnum1ViewColumn, principalBase.FindProperty("FlagsEnum1"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(flagsEnum2ViewColumn, principalBase.FindProperty("FlagsEnum2"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(principalBaseIdViewColumn, principalBase.FindProperty("PrincipalBaseId"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeArrayViewColumn, principalBase.FindProperty("RefTypeArray"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeEnumerableViewColumn, principalBase.FindProperty("RefTypeEnumerable"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeIListViewColumn, principalBase.FindProperty("RefTypeIList"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeListViewColumn, principalBase.FindProperty("RefTypeList"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeArrayViewColumn, principalBase.FindProperty("ValueTypeArray"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeEnumerableViewColumn, principalBase.FindProperty("ValueTypeEnumerable"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeIListViewColumn, principalBase.FindProperty("ValueTypeIList"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeListViewColumn, principalBase.FindProperty("ValueTypeList"), principalBaseViewViewMapping)

            Dim sqlQueryMappings As New List(Of SqlQueryMapping)()
            principalBase.SetRuntimeAnnotation("Relational:SqlQueryMappings", sqlQueryMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery As New SqlQuery("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.MappedSqlQuery", relationalModel, "select * from PrincipalBase")
            Dim discriminatorSqlQueryColumn As New SqlQueryColumn("Discriminator", "nvarchar(55)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("Discriminator", discriminatorSqlQueryColumn)
            Dim enum1SqlQueryColumn As New SqlQueryColumn("Enum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("Enum1", enum1SqlQueryColumn)
            Dim enum2SqlQueryColumn As New SqlQueryColumn("Enum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("Enum2", enum2SqlQueryColumn)
            Dim flagsEnum1SqlQueryColumn As New SqlQueryColumn("FlagsEnum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("FlagsEnum1", flagsEnum1SqlQueryColumn)
            Dim flagsEnum2SqlQueryColumn As New SqlQueryColumn("FlagsEnum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("FlagsEnum2", flagsEnum2SqlQueryColumn)
            Dim idSqlQueryColumn As New SqlQueryColumn("Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("Id", idSqlQueryColumn)
            Dim principalBaseIdSqlQueryColumn As New SqlQueryColumn("PrincipalBaseId", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("PrincipalBaseId", principalBaseIdSqlQueryColumn)
            Dim refTypeArraySqlQueryColumn As New SqlQueryColumn("RefTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("RefTypeArray", refTypeArraySqlQueryColumn)
            Dim refTypeEnumerableSqlQueryColumn As New SqlQueryColumn("RefTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("RefTypeEnumerable", refTypeEnumerableSqlQueryColumn)
            Dim refTypeIListSqlQueryColumn As New SqlQueryColumn("RefTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("RefTypeIList", refTypeIListSqlQueryColumn)
            Dim refTypeListSqlQueryColumn As New SqlQueryColumn("RefTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("RefTypeList", refTypeListSqlQueryColumn)
            Dim valueTypeArraySqlQueryColumn As New SqlQueryColumn("ValueTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("ValueTypeArray", valueTypeArraySqlQueryColumn)
            Dim valueTypeEnumerableSqlQueryColumn As New SqlQueryColumn("ValueTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableSqlQueryColumn)
            Dim valueTypeIListSqlQueryColumn As New SqlQueryColumn("ValueTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("ValueTypeIList", valueTypeIListSqlQueryColumn)
            Dim valueTypeListSqlQueryColumn As New SqlQueryColumn("ValueTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.Columns.Add("ValueTypeList", valueTypeListSqlQueryColumn)
            relationalModel.Queries.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.MappedSqlQuery", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping As New SqlQueryMapping(principalBase, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping, False)
            sqlQueryMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping.IsDefaultSqlQueryMapping = True
            RelationalModel.CreateSqlQueryColumnMapping(idSqlQueryColumn, principalBase.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(discriminatorSqlQueryColumn, principalBase.FindProperty("Discriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(enum1SqlQueryColumn, principalBase.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(enum2SqlQueryColumn, principalBase.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(flagsEnum1SqlQueryColumn, principalBase.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(flagsEnum2SqlQueryColumn, principalBase.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(principalBaseIdSqlQueryColumn, principalBase.FindProperty("PrincipalBaseId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(refTypeArraySqlQueryColumn, principalBase.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(refTypeEnumerableSqlQueryColumn, principalBase.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(refTypeIListSqlQueryColumn, principalBase.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(refTypeListSqlQueryColumn, principalBase.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(valueTypeArraySqlQueryColumn, principalBase.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(valueTypeEnumerableSqlQueryColumn, principalBase.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(valueTypeIListSqlQueryColumn, principalBase.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)
            RelationalModel.CreateSqlQueryColumnMapping(valueTypeListSqlQueryColumn, principalBase.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping)

            Dim functionMappings As New List(Of FunctionMapping)()
            principalBase.SetRuntimeAnnotation("Relational:FunctionMappings", functionMappings)
            Dim principalBaseTvf = DirectCast(Me.FindDbFunction("PrincipalBaseTvf"), IRuntimeDbFunction)
            Dim principalBaseTvfFunction As New StoreFunction(principalBaseTvf, relationalModel)
            Dim discriminatorFunctionColumn As New FunctionColumn("Discriminator", "nvarchar(55)", principalBaseTvfFunction)
            principalBaseTvfFunction.Columns.Add("Discriminator", discriminatorFunctionColumn)
            Dim enum1FunctionColumn As New FunctionColumn("Enum1", "int", principalBaseTvfFunction)
            principalBaseTvfFunction.Columns.Add("Enum1", enum1FunctionColumn)
            Dim enum2FunctionColumn As New FunctionColumn("Enum2", "int", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("Enum2", enum2FunctionColumn)
            Dim flagsEnum1FunctionColumn As New FunctionColumn("FlagsEnum1", "int", principalBaseTvfFunction)
            principalBaseTvfFunction.Columns.Add("FlagsEnum1", flagsEnum1FunctionColumn)
            Dim flagsEnum2FunctionColumn As New FunctionColumn("FlagsEnum2", "int", principalBaseTvfFunction)
            principalBaseTvfFunction.Columns.Add("FlagsEnum2", flagsEnum2FunctionColumn)
            Dim idFunctionColumn As New FunctionColumn("Id", "bigint", principalBaseTvfFunction)
            principalBaseTvfFunction.Columns.Add("Id", idFunctionColumn)
            Dim principalBaseIdFunctionColumn As New FunctionColumn("PrincipalBaseId", "bigint", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("PrincipalBaseId", principalBaseIdFunctionColumn)
            Dim refTypeArrayFunctionColumn As New FunctionColumn("RefTypeArray", "nvarchar(max)", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("RefTypeArray", refTypeArrayFunctionColumn)
            Dim refTypeEnumerableFunctionColumn As New FunctionColumn("RefTypeEnumerable", "nvarchar(max)", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("RefTypeEnumerable", refTypeEnumerableFunctionColumn)
            Dim refTypeIListFunctionColumn As New FunctionColumn("RefTypeIList", "nvarchar(max)", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("RefTypeIList", refTypeIListFunctionColumn)
            Dim refTypeListFunctionColumn As New FunctionColumn("RefTypeList", "nvarchar(max)", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("RefTypeList", refTypeListFunctionColumn)
            Dim valueTypeArrayFunctionColumn As New FunctionColumn("ValueTypeArray", "nvarchar(max)", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("ValueTypeArray", valueTypeArrayFunctionColumn)
            Dim valueTypeEnumerableFunctionColumn As New FunctionColumn("ValueTypeEnumerable", "nvarchar(max)", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableFunctionColumn)
            Dim valueTypeIListFunctionColumn As New FunctionColumn("ValueTypeIList", "nvarchar(max)", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("ValueTypeIList", valueTypeIListFunctionColumn)
            Dim valueTypeListFunctionColumn As New FunctionColumn("ValueTypeList", "nvarchar(max)", principalBaseTvfFunction) With {
                .IsNullable = True
            }
            principalBaseTvfFunction.Columns.Add("ValueTypeList", valueTypeListFunctionColumn)
            relationalModel.Functions.Add(
                ("PrincipalBaseTvf", "dbo", New String() {}),
                principalBaseTvfFunction)
            Dim principalBaseTvfFunctionMapping As New FunctionMapping(principalBase, principalBaseTvfFunction, principalBaseTvf, True)
            principalBaseTvfFunction.AddTypeMapping(principalBaseTvfFunctionMapping, False)
            functionMappings.Add(principalBaseTvfFunctionMapping)
            principalBaseTvfFunctionMapping.IsDefaultFunctionMapping = True
            RelationalModel.CreateFunctionColumnMapping(idFunctionColumn, principalBase.FindProperty("Id"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(discriminatorFunctionColumn, principalBase.FindProperty("Discriminator"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(enum1FunctionColumn, principalBase.FindProperty("Enum1"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(enum2FunctionColumn, principalBase.FindProperty("Enum2"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(flagsEnum1FunctionColumn, principalBase.FindProperty("FlagsEnum1"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(flagsEnum2FunctionColumn, principalBase.FindProperty("FlagsEnum2"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(principalBaseIdFunctionColumn, principalBase.FindProperty("PrincipalBaseId"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(refTypeArrayFunctionColumn, principalBase.FindProperty("RefTypeArray"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(refTypeEnumerableFunctionColumn, principalBase.FindProperty("RefTypeEnumerable"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(refTypeIListFunctionColumn, principalBase.FindProperty("RefTypeIList"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(refTypeListFunctionColumn, principalBase.FindProperty("RefTypeList"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(valueTypeArrayFunctionColumn, principalBase.FindProperty("ValueTypeArray"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(valueTypeEnumerableFunctionColumn, principalBase.FindProperty("ValueTypeEnumerable"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(valueTypeIListFunctionColumn, principalBase.FindProperty("ValueTypeIList"), principalBaseTvfFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(valueTypeListFunctionColumn, principalBase.FindProperty("ValueTypeList"), principalBaseTvfFunctionMapping)

            Dim deleteSprocMappings As New List(Of StoredProcedureMapping)()
            principalBase.SetRuntimeAnnotation("Relational:DeleteStoredProcedureMappings", deleteSprocMappings)
            Dim principalBase_DeleteStoreSproc As New StoreStoredProcedure("PrincipalBase_Delete", Nothing, relationalModel)
            principalBase_DeleteStoreSproc.ReturnValue = New StoreStoredProcedureReturnValue("", "int", principalBase_DeleteStoreSproc)
            Dim id_OriginalParameter As New StoreStoredProcedureParameter("Id_Original", "bigint", 0, principalBase_DeleteStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_DeleteStoreSproc.AddParameter(id_OriginalParameter)
            principalBase_DeleteStoreSproc.AddStoredProcedure(DirectCast(principalBase.GetDeleteStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("PrincipalBase_Delete", Nothing), principalBase_DeleteStoreSproc)
            Dim principalBase_DeleteDSproc = DirectCast(principalBase.GetDeleteStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_DeleteSprocMapping As New StoredProcedureMapping(principalBase, principalBase_DeleteStoreSproc, DirectCast(principalBase.GetDeleteStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping, True)
            principalBase_DeleteStoreSproc.AddTypeMapping(principalBase_DeleteSprocMapping, False)
            deleteSprocMappings.Add(principalBase_DeleteSprocMapping)
            principalBaseTableMapping.DeleteStoredProcedureMapping = principalBase_DeleteSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(id_OriginalParameter, principalBase_DeleteDSproc.FindParameter("Id_Original"), principalBase.FindProperty("Id"), principalBase_DeleteSprocMapping)

            Dim insertSprocMappings As New List(Of StoredProcedureMapping)()
            principalBase.SetRuntimeAnnotation("Relational:InsertStoredProcedureMappings", insertSprocMappings)
            Dim principalBase_InsertStoreSproc As New StoreStoredProcedure("PrincipalBase_Insert", Nothing, relationalModel)
            Dim principalBaseIdParameter As New StoreStoredProcedureParameter("PrincipalBaseId", "bigint", 0, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(principalBaseIdParameter)
            Dim enum1Parameter As New StoreStoredProcedureParameter("Enum1", "int", 1, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_InsertStoreSproc.AddParameter(enum1Parameter)
            Dim enum2Parameter As New StoreStoredProcedureParameter("Enum2", "int", 2, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(enum2Parameter)
            Dim flagsEnum1Parameter As New StoreStoredProcedureParameter("FlagsEnum1", "int", 3, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_InsertStoreSproc.AddParameter(flagsEnum1Parameter)
            Dim flagsEnum2Parameter As New StoreStoredProcedureParameter("FlagsEnum2", "int", 4, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_InsertStoreSproc.AddParameter(flagsEnum2Parameter)
            Dim valueTypeListParameter As New StoreStoredProcedureParameter("ValueTypeList", "nvarchar(max)", 5, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(valueTypeListParameter)
            Dim valueTypeIListParameter As New StoreStoredProcedureParameter("ValueTypeIList", "nvarchar(max)", 6, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(valueTypeIListParameter)
            Dim valueTypeArrayParameter As New StoreStoredProcedureParameter("ValueTypeArray", "nvarchar(max)", 7, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(valueTypeArrayParameter)
            Dim valueTypeEnumerableParameter As New StoreStoredProcedureParameter("ValueTypeEnumerable", "nvarchar(max)", 8, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(valueTypeEnumerableParameter)
            Dim refTypeListParameter As New StoreStoredProcedureParameter("RefTypeList", "nvarchar(max)", 9, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(refTypeListParameter)
            Dim refTypeIListParameter As New StoreStoredProcedureParameter("RefTypeIList", "nvarchar(max)", 10, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(refTypeIListParameter)
            Dim refTypeArrayParameter As New StoreStoredProcedureParameter("RefTypeArray", "nvarchar(max)", 11, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(refTypeArrayParameter)
            Dim refTypeEnumerableParameter As New StoreStoredProcedureParameter("RefTypeEnumerable", "nvarchar(max)", 12, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(refTypeEnumerableParameter)
            Dim discriminatorParameter As New StoreStoredProcedureParameter("Discriminator", "nvarchar(55)", 13, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_InsertStoreSproc.AddParameter(discriminatorParameter)
            Dim idParameter As New StoreStoredProcedureParameter("Id", "bigint", 14, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Output)
            principalBase_InsertStoreSproc.AddParameter(idParameter)
            principalBase_InsertStoreSproc.AddStoredProcedure(DirectCast(principalBase.GetInsertStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("PrincipalBase_Insert", Nothing), principalBase_InsertStoreSproc)
            Dim principalBase_InsertISproc = DirectCast(principalBase.GetInsertStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_InsertSprocMapping As New StoredProcedureMapping(principalBase, principalBase_InsertStoreSproc, DirectCast(principalBase.GetInsertStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping, True)
            principalBase_InsertStoreSproc.AddTypeMapping(principalBase_InsertSprocMapping, False)
            insertSprocMappings.Add(principalBase_InsertSprocMapping)
            principalBaseTableMapping.InsertStoredProcedureMapping = principalBase_InsertSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(idParameter, principalBase_InsertISproc.FindParameter("Id"), principalBase.FindProperty("Id"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(discriminatorParameter, principalBase_InsertISproc.FindParameter("Discriminator"), principalBase.FindProperty("Discriminator"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum1Parameter, principalBase_InsertISproc.FindParameter("Enum1"), principalBase.FindProperty("Enum1"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum2Parameter, principalBase_InsertISproc.FindParameter("Enum2"), principalBase.FindProperty("Enum2"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum1Parameter, principalBase_InsertISproc.FindParameter("FlagsEnum1"), principalBase.FindProperty("FlagsEnum1"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum2Parameter, principalBase_InsertISproc.FindParameter("FlagsEnum2"), principalBase.FindProperty("FlagsEnum2"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalBaseIdParameter, principalBase_InsertISproc.FindParameter("PrincipalBaseId"), principalBase.FindProperty("PrincipalBaseId"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeArrayParameter, principalBase_InsertISproc.FindParameter("RefTypeArray"), principalBase.FindProperty("RefTypeArray"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeEnumerableParameter, principalBase_InsertISproc.FindParameter("RefTypeEnumerable"), principalBase.FindProperty("RefTypeEnumerable"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeIListParameter, principalBase_InsertISproc.FindParameter("RefTypeIList"), principalBase.FindProperty("RefTypeIList"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeListParameter, principalBase_InsertISproc.FindParameter("RefTypeList"), principalBase.FindProperty("RefTypeList"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeArrayParameter, principalBase_InsertISproc.FindParameter("ValueTypeArray"), principalBase.FindProperty("ValueTypeArray"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeEnumerableParameter, principalBase_InsertISproc.FindParameter("ValueTypeEnumerable"), principalBase.FindProperty("ValueTypeEnumerable"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeIListParameter, principalBase_InsertISproc.FindParameter("ValueTypeIList"), principalBase.FindProperty("ValueTypeIList"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeListParameter, principalBase_InsertISproc.FindParameter("ValueTypeList"), principalBase.FindProperty("ValueTypeList"), principalBase_InsertSprocMapping)

            Dim updateSprocMappings As New List(Of StoredProcedureMapping)()
            principalBase.SetRuntimeAnnotation("Relational:UpdateStoredProcedureMappings", updateSprocMappings)
            Dim principalBase_UpdateStoreSproc As New StoreStoredProcedure("PrincipalBase_Update", Nothing, relationalModel)
            Dim principalBaseIdParameter0 As New StoreStoredProcedureParameter("PrincipalBaseId", "bigint", 0, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(principalBaseIdParameter0)
            Dim enum1Parameter0 As New StoreStoredProcedureParameter("Enum1", "int", 1, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_UpdateStoreSproc.AddParameter(enum1Parameter0)
            Dim enum2Parameter0 As New StoreStoredProcedureParameter("Enum2", "int", 2, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(enum2Parameter0)
            Dim flagsEnum1Parameter0 As New StoreStoredProcedureParameter("FlagsEnum1", "int", 3, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_UpdateStoreSproc.AddParameter(flagsEnum1Parameter0)
            Dim flagsEnum2Parameter0 As New StoreStoredProcedureParameter("FlagsEnum2", "int", 4, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_UpdateStoreSproc.AddParameter(flagsEnum2Parameter0)
            Dim valueTypeListParameter0 As New StoreStoredProcedureParameter("ValueTypeList", "nvarchar(max)", 5, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(valueTypeListParameter0)
            Dim valueTypeIListParameter0 As New StoreStoredProcedureParameter("ValueTypeIList", "nvarchar(max)", 6, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(valueTypeIListParameter0)
            Dim valueTypeArrayParameter0 As New StoreStoredProcedureParameter("ValueTypeArray", "nvarchar(max)", 7, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(valueTypeArrayParameter0)
            Dim valueTypeEnumerableParameter0 As New StoreStoredProcedureParameter("ValueTypeEnumerable", "nvarchar(max)", 8, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(valueTypeEnumerableParameter0)
            Dim refTypeListParameter0 As New StoreStoredProcedureParameter("RefTypeList", "nvarchar(max)", 9, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(refTypeListParameter0)
            Dim refTypeIListParameter0 As New StoreStoredProcedureParameter("RefTypeIList", "nvarchar(max)", 10, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(refTypeIListParameter0)
            Dim refTypeArrayParameter0 As New StoreStoredProcedureParameter("RefTypeArray", "nvarchar(max)", 11, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(refTypeArrayParameter0)
            Dim refTypeEnumerableParameter0 As New StoreStoredProcedureParameter("RefTypeEnumerable", "nvarchar(max)", 12, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(refTypeEnumerableParameter0)
            Dim id_OriginalParameter0 As New StoreStoredProcedureParameter("Id_Original", "bigint", 13, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_UpdateStoreSproc.AddParameter(id_OriginalParameter0)
            principalBase_UpdateStoreSproc.AddStoredProcedure(DirectCast(principalBase.GetUpdateStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("PrincipalBase_Update", Nothing), principalBase_UpdateStoreSproc)
            Dim principalBase_UpdateUSproc = DirectCast(principalBase.GetUpdateStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_UpdateSprocMapping As New StoredProcedureMapping(principalBase, principalBase_UpdateStoreSproc, DirectCast(principalBase.GetUpdateStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping, True)
            principalBase_UpdateStoreSproc.AddTypeMapping(principalBase_UpdateSprocMapping, False)
            updateSprocMappings.Add(principalBase_UpdateSprocMapping)
            principalBaseTableMapping.UpdateStoredProcedureMapping = principalBase_UpdateSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(id_OriginalParameter0, principalBase_UpdateUSproc.FindParameter("Id_Original"), principalBase.FindProperty("Id"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum1Parameter0, principalBase_UpdateUSproc.FindParameter("Enum1"), principalBase.FindProperty("Enum1"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum2Parameter0, principalBase_UpdateUSproc.FindParameter("Enum2"), principalBase.FindProperty("Enum2"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum1Parameter0, principalBase_UpdateUSproc.FindParameter("FlagsEnum1"), principalBase.FindProperty("FlagsEnum1"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum2Parameter0, principalBase_UpdateUSproc.FindParameter("FlagsEnum2"), principalBase.FindProperty("FlagsEnum2"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalBaseIdParameter0, principalBase_UpdateUSproc.FindParameter("PrincipalBaseId"), principalBase.FindProperty("PrincipalBaseId"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeArrayParameter0, principalBase_UpdateUSproc.FindParameter("RefTypeArray"), principalBase.FindProperty("RefTypeArray"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeEnumerableParameter0, principalBase_UpdateUSproc.FindParameter("RefTypeEnumerable"), principalBase.FindProperty("RefTypeEnumerable"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeIListParameter0, principalBase_UpdateUSproc.FindParameter("RefTypeIList"), principalBase.FindProperty("RefTypeIList"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeListParameter0, principalBase_UpdateUSproc.FindParameter("RefTypeList"), principalBase.FindProperty("RefTypeList"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeArrayParameter0, principalBase_UpdateUSproc.FindParameter("ValueTypeArray"), principalBase.FindProperty("ValueTypeArray"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeEnumerableParameter0, principalBase_UpdateUSproc.FindParameter("ValueTypeEnumerable"), principalBase.FindProperty("ValueTypeEnumerable"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeIListParameter0, principalBase_UpdateUSproc.FindParameter("ValueTypeIList"), principalBase.FindProperty("ValueTypeIList"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeListParameter0, principalBase_UpdateUSproc.FindParameter("ValueTypeList"), principalBase.FindProperty("ValueTypeList"), principalBase_UpdateSprocMapping)

            Dim ownedType = principalBase.FindComplexProperty("Owned").ComplexType

            Dim tableMappings0 As New List(Of TableMapping)()
            ownedType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0)
            Dim principalBaseTableMapping0 As New TableMapping(ownedType, principalBaseTable, True)
            principalBaseTable.AddTypeMapping(principalBaseTableMapping0, False)
            tableMappings0.Add(principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(deetsColumn, ownedType.FindProperty("Details"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_NumberColumn, ownedType.FindProperty("Number"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_RefTypeArrayColumn, ownedType.FindProperty("RefTypeArray"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_RefTypeEnumerableColumn, ownedType.FindProperty("RefTypeEnumerable"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_RefTypeIListColumn, ownedType.FindProperty("RefTypeIList"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_RefTypeListColumn, ownedType.FindProperty("RefTypeList"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_ValueTypeArrayColumn, ownedType.FindProperty("ValueTypeArray"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_ValueTypeEnumerableColumn, ownedType.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_ValueTypeIListColumn, ownedType.FindProperty("ValueTypeIList"), principalBaseTableMapping0)
            RelationalModel.CreateColumnMapping(owned_ValueTypeListColumn, ownedType.FindProperty("ValueTypeList"), principalBaseTableMapping0)

            Dim principalBase0 = ownedType.FindComplexProperty("Principal").ComplexType

            Dim tableMappings1 As New List(Of TableMapping)()
            principalBase0.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1)
            Dim principalBaseTableMapping1 As New TableMapping(principalBase0, principalBaseTable, True)
            principalBaseTable.AddTypeMapping(principalBaseTableMapping1, False)
            tableMappings1.Add(principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_AlternateIdColumn, principalBase0.FindProperty("AlternateId"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_Enum1Column, principalBase0.FindProperty("Enum1"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_Enum2Column, principalBase0.FindProperty("Enum2"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_FlagsEnum1Column, principalBase0.FindProperty("FlagsEnum1"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_FlagsEnum2Column, principalBase0.FindProperty("FlagsEnum2"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_IdColumn, principalBase0.FindProperty("Id"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_RefTypeArrayColumn, principalBase0.FindProperty("RefTypeArray"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_RefTypeEnumerableColumn, principalBase0.FindProperty("RefTypeEnumerable"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_RefTypeIListColumn, principalBase0.FindProperty("RefTypeIList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_RefTypeListColumn, principalBase0.FindProperty("RefTypeList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_ValueTypeArrayColumn, principalBase0.FindProperty("ValueTypeArray"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_ValueTypeEnumerableColumn, principalBase0.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_ValueTypeIListColumn, principalBase0.FindProperty("ValueTypeIList"), principalBaseTableMapping1)
            RelationalModel.CreateColumnMapping(owned_Principal_ValueTypeListColumn, principalBase0.FindProperty("ValueTypeList"), principalBaseTableMapping1)

            Dim principalDerived = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>")

            Dim defaultTableMappings0 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0 As New TableMappingBase(Of ColumnMappingBase)(principalDerived, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0, False)
            defaultTableMappings0.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(discriminatorColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Discriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(enum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(enum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(principalBaseIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("PrincipalBaseId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase0)

            Dim tableMappings2 As New List(Of TableMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2)
            Dim principalBaseTableMapping2 As New TableMapping(principalDerived, principalBaseTable, True) With {
                .IsSharedTablePrincipal = False
            }
            principalBaseTable.AddTypeMapping(principalBaseTableMapping2, False)
            tableMappings2.Add(principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(idColumn, principalDerived.FindProperty("Id"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(discriminatorColumn, principalDerived.FindProperty("Discriminator"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(enum1Column, principalDerived.FindProperty("Enum1"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(enum2Column, principalDerived.FindProperty("Enum2"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalDerived.FindProperty("FlagsEnum1"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalDerived.FindProperty("FlagsEnum2"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(principalBaseIdColumn, principalDerived.FindProperty("PrincipalBaseId"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalDerived.FindProperty("RefTypeArray"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalDerived.FindProperty("RefTypeEnumerable"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalDerived.FindProperty("RefTypeIList"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalDerived.FindProperty("RefTypeList"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalDerived.FindProperty("ValueTypeArray"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalDerived.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalDerived.FindProperty("ValueTypeIList"), principalBaseTableMapping2)
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalDerived.FindProperty("ValueTypeList"), principalBaseTableMapping2)

            Dim sqlQueryMappings0 As New List(Of SqlQueryMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:SqlQueryMappings", sqlQueryMappings0)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0 As New SqlQueryMapping(principalDerived, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQuery.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0, False)
            sqlQueryMappings0.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0.IsDefaultSqlQueryMapping = True
            RelationalModel.CreateSqlQueryColumnMapping(idSqlQueryColumn, principalDerived.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(discriminatorSqlQueryColumn, principalDerived.FindProperty("Discriminator"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(enum1SqlQueryColumn, principalDerived.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(enum2SqlQueryColumn, principalDerived.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(flagsEnum1SqlQueryColumn, principalDerived.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(flagsEnum2SqlQueryColumn, principalDerived.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(principalBaseIdSqlQueryColumn, principalDerived.FindProperty("PrincipalBaseId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(refTypeArraySqlQueryColumn, principalDerived.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(refTypeEnumerableSqlQueryColumn, principalDerived.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(refTypeIListSqlQueryColumn, principalDerived.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(refTypeListSqlQueryColumn, principalDerived.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(valueTypeArraySqlQueryColumn, principalDerived.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(valueTypeEnumerableSqlQueryColumn, principalDerived.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(valueTypeIListSqlQueryColumn, principalDerived.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)
            RelationalModel.CreateSqlQueryColumnMapping(valueTypeListSqlQueryColumn, principalDerived.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappedSqlQuerySqlQueryMapping0)

            Dim deleteSprocMappings0 As New List(Of StoredProcedureMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:DeleteStoredProcedureMappings", deleteSprocMappings0)
            Dim principalBase_DeleteDSproc0 = DirectCast(principalBase.GetDeleteStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_DeleteSprocMapping0 As New StoredProcedureMapping(principalDerived, principalBase_DeleteStoreSproc, DirectCast(principalBase.GetDeleteStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping2, True)
            principalBase_DeleteStoreSproc.AddTypeMapping(principalBase_DeleteSprocMapping0, False)
            deleteSprocMappings0.Add(principalBase_DeleteSprocMapping0)
            principalBaseTableMapping2.DeleteStoredProcedureMapping = principalBase_DeleteSprocMapping0
            RelationalModel.CreateStoredProcedureParameterMapping(id_OriginalParameter, principalBase_DeleteDSproc0.FindParameter("Id_Original"), principalDerived.FindProperty("Id"), principalBase_DeleteSprocMapping0)

            Dim insertSprocMappings0 As New List(Of StoredProcedureMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:InsertStoredProcedureMappings", insertSprocMappings0)
            Dim principalBase_InsertISproc0 = DirectCast(principalBase.GetInsertStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_InsertSprocMapping0 As New StoredProcedureMapping(principalDerived, principalBase_InsertStoreSproc, DirectCast(principalBase.GetInsertStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping2, True)
            principalBase_InsertStoreSproc.AddTypeMapping(principalBase_InsertSprocMapping0, False)
            insertSprocMappings0.Add(principalBase_InsertSprocMapping0)
            principalBaseTableMapping2.InsertStoredProcedureMapping = principalBase_InsertSprocMapping0
            RelationalModel.CreateStoredProcedureParameterMapping(idParameter, principalBase_InsertISproc0.FindParameter("Id"), principalDerived.FindProperty("Id"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(discriminatorParameter, principalBase_InsertISproc0.FindParameter("Discriminator"), principalDerived.FindProperty("Discriminator"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(enum1Parameter, principalBase_InsertISproc0.FindParameter("Enum1"), principalDerived.FindProperty("Enum1"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(enum2Parameter, principalBase_InsertISproc0.FindParameter("Enum2"), principalDerived.FindProperty("Enum2"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum1Parameter, principalBase_InsertISproc0.FindParameter("FlagsEnum1"), principalDerived.FindProperty("FlagsEnum1"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum2Parameter, principalBase_InsertISproc0.FindParameter("FlagsEnum2"), principalDerived.FindProperty("FlagsEnum2"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(principalBaseIdParameter, principalBase_InsertISproc0.FindParameter("PrincipalBaseId"), principalDerived.FindProperty("PrincipalBaseId"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeArrayParameter, principalBase_InsertISproc0.FindParameter("RefTypeArray"), principalDerived.FindProperty("RefTypeArray"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeEnumerableParameter, principalBase_InsertISproc0.FindParameter("RefTypeEnumerable"), principalDerived.FindProperty("RefTypeEnumerable"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeIListParameter, principalBase_InsertISproc0.FindParameter("RefTypeIList"), principalDerived.FindProperty("RefTypeIList"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeListParameter, principalBase_InsertISproc0.FindParameter("RefTypeList"), principalDerived.FindProperty("RefTypeList"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeArrayParameter, principalBase_InsertISproc0.FindParameter("ValueTypeArray"), principalDerived.FindProperty("ValueTypeArray"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeEnumerableParameter, principalBase_InsertISproc0.FindParameter("ValueTypeEnumerable"), principalDerived.FindProperty("ValueTypeEnumerable"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeIListParameter, principalBase_InsertISproc0.FindParameter("ValueTypeIList"), principalDerived.FindProperty("ValueTypeIList"), principalBase_InsertSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeListParameter, principalBase_InsertISproc0.FindParameter("ValueTypeList"), principalDerived.FindProperty("ValueTypeList"), principalBase_InsertSprocMapping0)

            Dim updateSprocMappings0 As New List(Of StoredProcedureMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:UpdateStoredProcedureMappings", updateSprocMappings0)
            Dim principalBase_UpdateUSproc0 = DirectCast(principalBase.GetUpdateStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_UpdateSprocMapping0 As New StoredProcedureMapping(principalDerived, principalBase_UpdateStoreSproc, DirectCast(principalBase.GetUpdateStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping2, True)
            principalBase_UpdateStoreSproc.AddTypeMapping(principalBase_UpdateSprocMapping0, False)
            updateSprocMappings0.Add(principalBase_UpdateSprocMapping0)
            principalBaseTableMapping2.UpdateStoredProcedureMapping = principalBase_UpdateSprocMapping0
            RelationalModel.CreateStoredProcedureParameterMapping(id_OriginalParameter0, principalBase_UpdateUSproc0.FindParameter("Id_Original"), principalDerived.FindProperty("Id"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(enum1Parameter0, principalBase_UpdateUSproc0.FindParameter("Enum1"), principalDerived.FindProperty("Enum1"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(enum2Parameter0, principalBase_UpdateUSproc0.FindParameter("Enum2"), principalDerived.FindProperty("Enum2"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum1Parameter0, principalBase_UpdateUSproc0.FindParameter("FlagsEnum1"), principalDerived.FindProperty("FlagsEnum1"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum2Parameter0, principalBase_UpdateUSproc0.FindParameter("FlagsEnum2"), principalDerived.FindProperty("FlagsEnum2"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(principalBaseIdParameter0, principalBase_UpdateUSproc0.FindParameter("PrincipalBaseId"), principalDerived.FindProperty("PrincipalBaseId"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeArrayParameter0, principalBase_UpdateUSproc0.FindParameter("RefTypeArray"), principalDerived.FindProperty("RefTypeArray"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeEnumerableParameter0, principalBase_UpdateUSproc0.FindParameter("RefTypeEnumerable"), principalDerived.FindProperty("RefTypeEnumerable"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeIListParameter0, principalBase_UpdateUSproc0.FindParameter("RefTypeIList"), principalDerived.FindProperty("RefTypeIList"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeListParameter0, principalBase_UpdateUSproc0.FindParameter("RefTypeList"), principalDerived.FindProperty("RefTypeList"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeArrayParameter0, principalBase_UpdateUSproc0.FindParameter("ValueTypeArray"), principalDerived.FindProperty("ValueTypeArray"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeEnumerableParameter0, principalBase_UpdateUSproc0.FindParameter("ValueTypeEnumerable"), principalDerived.FindProperty("ValueTypeEnumerable"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeIListParameter0, principalBase_UpdateUSproc0.FindParameter("ValueTypeIList"), principalDerived.FindProperty("ValueTypeIList"), principalBase_UpdateSprocMapping0)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeListParameter0, principalBase_UpdateUSproc0.FindParameter("ValueTypeList"), principalDerived.FindProperty("ValueTypeList"), principalBase_UpdateSprocMapping0)
            Dim fK_PrincipalBase_PrincipalBase_PrincipalBaseId As New ForeignKeyConstraint(
                "FK_PrincipalBase_PrincipalBase_PrincipalBaseId", principalBaseTable, principalBaseTable,
                {principalBaseIdColumn},
                principalBaseTable.FindUniqueConstraint("PK_PrincipalBase"), ReferentialAction.NoAction)
            Dim fK_PrincipalBase_PrincipalBase_PrincipalBaseIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"PrincipalBaseId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            fK_PrincipalBase_PrincipalBase_PrincipalBaseId.MappedForeignKeys.Add(fK_PrincipalBase_PrincipalBase_PrincipalBaseIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalBase_PrincipalBase_PrincipalBaseIdFk).Add(fK_PrincipalBase_PrincipalBase_PrincipalBaseId)
            principalBaseTable.ForeignKeyConstraints.Add(fK_PrincipalBase_PrincipalBase_PrincipalBaseId)
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalBase_PrincipalBase_PrincipalBaseId)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Dim PrincipalBaseEntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports Microsoft.EntityFrameworkCore.ValueGeneration

Namespace TestNamespace
    Friend Partial Class PrincipalBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase),
                baseEntityType,
                discriminatorProperty:="Discriminator",
                discriminatorValue:="PrincipalBase")

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Long?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim discriminator = entityType.AddProperty(
                "Discriminator",
                GetType(String),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                maxLength:=55,
                valueGeneratorFactory:=AddressOf New DiscriminatorValueGeneratorFactory().Create)
            discriminator.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nvarchar(55)",
                    size:=55,
                    dbType:=System.Data.DbType.String))
            discriminator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum1 = entityType.AddProperty(
                "Enum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))
            enum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum2 = entityType.AddProperty(
                "Enum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            enum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum1 = entityType.AddProperty(
                "FlagsEnum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum2 = entityType.AddProperty(
                "FlagsEnum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalBaseId = entityType.AddProperty(
                "PrincipalBaseId",
                GetType(Long?),
                nullable:=True)
            principalBaseId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))
            principalBaseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = entityType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = entityType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = entityType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = entityType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = entityType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = entityType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = entityType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = entityType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

OwnedComplexProperty.Create(entityType)
Dim key = entityType.AddKey(
    {id})
entityType.SetPrimaryKey(key)

Dim index = entityType.AddIndex(
    {principalBaseId})

Return entityType
End Function

Private Class OwnedComplexProperty
    Public Shared Function Create(declaringType As RuntimeEntityType) As RuntimeComplexProperty
        Dim complexProperty = declaringType.AddComplexProperty("Owned",
            GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
            "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType",
            GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType),
            propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Owned", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
            fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ownedField", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
            propertyAccessMode:=PropertyAccessMode.Field,
            changeTrackingStrategy:=ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues)

        Dim complexType = complexProperty.ComplexType
        Dim details = complexType.AddProperty(
            "Details",
            GetType(String),
            propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Details", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
            fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_details", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
            propertyAccessMode:=PropertyAccessMode.FieldDuringConstruction,
            nullable:=True,
            concurrencyToken:=True,
            valueGenerated:=ValueGenerated.OnAddOrUpdate,
            beforeSaveBehavior:=PropertySaveBehavior.Ignore,
            afterSaveBehavior:=PropertySaveBehavior.Ignore,
            maxLength:=64,
            unicode:=False,
            precision:=3,
            scale:=2,
            sentinel:="")
        details.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
            comparer:=New ValueComparer(Of String)(
                Function(v1 As String, v2 As String) v1 = v2,
                Function(v As String) v.GetHashCode(),
                Function(v As String) v),
            keyComparer:=New ValueComparer(Of String)(
                Function(v1 As String, v2 As String) v1 = v2,
                Function(v As String) v.GetHashCode(),
                Function(v As String) v),
            providerValueComparer:=New ValueComparer(Of String)(
                Function(v1 As String, v2 As String) v1 = v2,
                Function(v As String) v.GetHashCode(),
                Function(v As String) v),
            mappingInfo:=New RelationalTypeMappingInfo(
                storeTypeName:="varchar(64)",
                size:=64,
                precision:=3,
                scale:=2))
        details.AddAnnotation("foo", "bar")
        details.AddAnnotation("Relational:ColumnName", "Deets")
        details.AddAnnotation("Relational:ColumnType", "varchar")
        details.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

        Dim number = complexType.AddProperty(
            "Number",
            GetType(Integer),
            propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Number", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
            fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Number", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
            sentinel:=0)
        number.TypeMapping = IntTypeMapping.Default.Clone(
            comparer:=New ValueComparer(Of Integer)(
                Function(v1 As Integer, v2 As Integer) v1 = v2,
                Function(v As Integer) v,
                Function(v As Integer) v),
            keyComparer:=New ValueComparer(Of Integer)(
                Function(v1 As Integer, v2 As Integer) v1 = v2,
                Function(v As Integer) v,
                Function(v As Integer) v),
            providerValueComparer:=New ValueComparer(Of Integer)(
                Function(v1 As Integer, v2 As Integer) v1 = v2,
                Function(v As Integer) v,
                Function(v As Integer) v))
        number.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

        Dim refTypeArray = complexType.AddProperty(
            "RefTypeArray",
            GetType(IPAddress()),
            propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
            fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
            nullable:=True)
        refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
            comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v)),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = complexType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = complexType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = complexType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_refTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = complexType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = complexType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = complexType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = complexType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_valueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

PrincipalComplexProperty.Create(complexType)
complexType.AddAnnotation("go", "brr")
complexType.AddAnnotation("Relational:FunctionName", "PrincipalBaseTvf")
complexType.AddAnnotation("Relational:Schema", Nothing)
complexType.AddAnnotation("Relational:SqlQuery", "select * from PrincipalBase")
complexType.AddAnnotation("Relational:TableName", "PrincipalBase")
complexType.AddAnnotation("Relational:ViewName", "PrincipalBaseView")
complexType.AddAnnotation("Relational:ViewSchema", Nothing)
complexProperty.AddAnnotation("goo", "ber")
Return complexProperty
End Function

    Private Class PrincipalComplexProperty
        Public Shared Function Create(declaringType As RuntimeComplexType) As RuntimeComplexProperty
            Dim complexProperty = declaringType.AddComplexProperty("Principal",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase),
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType.Principal#PrincipalBase",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetProperty("Principal", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.OwnedType).GetField("_Principal", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim complexType = complexProperty.ComplexType
            Dim alternateId = complexType.AddProperty(
                "AlternateId",
                GetType(Guid),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("AlternateId", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=New Guid("00000000-0000-0000-0000-000000000000"))
            alternateId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            alternateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum1 = complexType.AddProperty(
                "Enum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))
            enum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum2 = complexType.AddProperty(
                "Enum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            enum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum1 = complexType.AddProperty(
                "FlagsEnum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum2 = complexType.AddProperty(
                "FlagsEnum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim id = complexType.AddProperty(
                "Id",
                GetType(Long?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            id.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = complexType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = complexType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = complexType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = complexType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = complexType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = complexType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = complexType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = complexType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

complexType.AddAnnotation("Relational:FunctionName", "PrincipalBaseTvf")
complexType.AddAnnotation("Relational:Schema", Nothing)
complexType.AddAnnotation("Relational:SqlQuery", "select * from PrincipalBase")
complexType.AddAnnotation("Relational:TableName", "PrincipalBase")
complexType.AddAnnotation("Relational:ViewName", "PrincipalBaseView")
complexType.AddAnnotation("Relational:ViewSchema", Nothing)
Return complexProperty
End Function
End Class
End Class

Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
    Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalBaseId")},
        principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
        principalEntityType)

    Dim deriveds = principalEntityType.AddNavigation("Deriveds",
        runtimeForeignKey,
        onDependent:=False,
        GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
        propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Deriveds", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Deriveds", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

    Return runtimeForeignKey
End Function

Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
    Dim insertSproc As New RuntimeStoredProcedure(
        entityType,
        "PrincipalBase_Insert",
        Nothing,
        False)

    Dim principalBaseId = insertSproc.AddParameter(
        "PrincipalBaseId", System.Data.ParameterDirection.Input, False, "PrincipalBaseId", False)
    Dim enum1 = insertSproc.AddParameter(
        "Enum1", System.Data.ParameterDirection.Input, False, "Enum1", False)
    Dim enum2 = insertSproc.AddParameter(
        "Enum2", System.Data.ParameterDirection.Input, False, "Enum2", False)
    Dim flagsEnum1 = insertSproc.AddParameter(
        "FlagsEnum1", System.Data.ParameterDirection.Input, False, "FlagsEnum1", False)
    Dim flagsEnum2 = insertSproc.AddParameter(
        "FlagsEnum2", System.Data.ParameterDirection.Input, False, "FlagsEnum2", False)
    Dim valueTypeList = insertSproc.AddParameter(
        "ValueTypeList", System.Data.ParameterDirection.Input, False, "ValueTypeList", False)
    Dim valueTypeIList = insertSproc.AddParameter(
        "ValueTypeIList", System.Data.ParameterDirection.Input, False, "ValueTypeIList", False)
    Dim valueTypeArray = insertSproc.AddParameter(
        "ValueTypeArray", System.Data.ParameterDirection.Input, False, "ValueTypeArray", False)
    Dim valueTypeEnumerable = insertSproc.AddParameter(
        "ValueTypeEnumerable", System.Data.ParameterDirection.Input, False, "ValueTypeEnumerable", False)
    Dim refTypeList = insertSproc.AddParameter(
        "RefTypeList", System.Data.ParameterDirection.Input, False, "RefTypeList", False)
    Dim refTypeIList = insertSproc.AddParameter(
        "RefTypeIList", System.Data.ParameterDirection.Input, False, "RefTypeIList", False)
    Dim refTypeArray = insertSproc.AddParameter(
        "RefTypeArray", System.Data.ParameterDirection.Input, False, "RefTypeArray", False)
    Dim refTypeEnumerable = insertSproc.AddParameter(
        "RefTypeEnumerable", System.Data.ParameterDirection.Input, False, "RefTypeEnumerable", False)
    Dim discriminator = insertSproc.AddParameter(
        "Discriminator", System.Data.ParameterDirection.Input, False, "Discriminator", False)
    Dim id = insertSproc.AddParameter(
        "Id", System.Data.ParameterDirection.Output, False, "Id", False)
    entityType.AddAnnotation("Relational:InsertStoredProcedure", insertSproc)

    Dim deleteSproc As New RuntimeStoredProcedure(
        entityType,
        "PrincipalBase_Delete",
        Nothing,
        True)

    Dim id0 = deleteSproc.AddParameter(
        "Id_Original", System.Data.ParameterDirection.Input, False, "Id", True)
    entityType.AddAnnotation("Relational:DeleteStoredProcedure", deleteSproc)

    Dim updateSproc As New RuntimeStoredProcedure(
        entityType,
        "PrincipalBase_Update",
        Nothing,
        False)

    Dim principalBaseId0 = updateSproc.AddParameter(
        "PrincipalBaseId", System.Data.ParameterDirection.Input, False, "PrincipalBaseId", False)
    Dim enum10 = updateSproc.AddParameter(
        "Enum1", System.Data.ParameterDirection.Input, False, "Enum1", False)
    Dim enum20 = updateSproc.AddParameter(
        "Enum2", System.Data.ParameterDirection.Input, False, "Enum2", False)
    Dim flagsEnum10 = updateSproc.AddParameter(
        "FlagsEnum1", System.Data.ParameterDirection.Input, False, "FlagsEnum1", False)
    Dim flagsEnum20 = updateSproc.AddParameter(
        "FlagsEnum2", System.Data.ParameterDirection.Input, False, "FlagsEnum2", False)
    Dim valueTypeList0 = updateSproc.AddParameter(
        "ValueTypeList", System.Data.ParameterDirection.Input, False, "ValueTypeList", False)
    Dim valueTypeIList0 = updateSproc.AddParameter(
        "ValueTypeIList", System.Data.ParameterDirection.Input, False, "ValueTypeIList", False)
    Dim valueTypeArray0 = updateSproc.AddParameter(
        "ValueTypeArray", System.Data.ParameterDirection.Input, False, "ValueTypeArray", False)
    Dim valueTypeEnumerable0 = updateSproc.AddParameter(
        "ValueTypeEnumerable", System.Data.ParameterDirection.Input, False, "ValueTypeEnumerable", False)
    Dim refTypeList0 = updateSproc.AddParameter(
        "RefTypeList", System.Data.ParameterDirection.Input, False, "RefTypeList", False)
    Dim refTypeIList0 = updateSproc.AddParameter(
        "RefTypeIList", System.Data.ParameterDirection.Input, False, "RefTypeIList", False)
    Dim refTypeArray0 = updateSproc.AddParameter(
        "RefTypeArray", System.Data.ParameterDirection.Input, False, "RefTypeArray", False)
    Dim refTypeEnumerable0 = updateSproc.AddParameter(
        "RefTypeEnumerable", System.Data.ParameterDirection.Input, False, "RefTypeEnumerable", False)
    Dim id1 = updateSproc.AddParameter(
        "Id_Original", System.Data.ParameterDirection.Input, False, "Id", True)
    entityType.AddAnnotation("Relational:UpdateStoredProcedure", updateSproc)

    entityType.AddAnnotation("Relational:FunctionName", "PrincipalBaseTvf")
    entityType.AddAnnotation("Relational:MappingStrategy", "TPH")
    entityType.AddAnnotation("Relational:Schema", Nothing)
    entityType.AddAnnotation("Relational:SqlQuery", "select * from PrincipalBase")
    entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
    entityType.AddAnnotation("Relational:ViewDefinitionSql", Nothing)
    entityType.AddAnnotation("Relational:ViewName", "PrincipalBaseView")
    entityType.AddAnnotation("Relational:ViewSchema", Nothing)

    Customize(entityType)
End Sub

Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
End Sub
End Class
End Namespace
]]>.Value

            Dim PrincipalDerivedEntityType = <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class PrincipalDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                baseEntityType,
                discriminatorProperty:="Discriminator",
                discriminatorValue:="PrincipalDerived<DependentBase<byte?>>")

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", "select * from PrincipalBase")
            entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New ComplexTypesContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.
                        Collection(code,
                        Sub(c) AssertFileContents("ComplexTypesContextModel.vb", ComplexTypesContextModel, c),
                        Sub(c) AssertFileContents("ComplexTypesContextModelBuilder.vb", ComplexTypesContextModelBuilder, c),
                        Sub(c) AssertFileContents("PrincipalBaseEntityType.vb", PrincipalBaseEntityType, c),
                        Sub(c) AssertFileContents("PrincipalDerivedEntityType.vb", PrincipalDerivedEntityType, c))
                End Sub,
                Sub(Model)
                    Dim principalBaseET = Model.FindEntityType(GetType(PrincipalBase))

                    Dim complexProperty = principalBaseET.GetComplexProperties().Single()
                    Assert.Equal(
                        {"goo"},
                        complexProperty.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(NameOf(PrincipalBase.Owned), complexProperty.Name)
                    Assert.False(complexProperty.IsCollection)
                    Assert.False(complexProperty.IsNullable)
                    Assert.Equal(GetType(OwnedType), complexProperty.ClrType)
                    Assert.Equal("_ownedField", complexProperty.FieldInfo.Name)
                    Assert.Equal(NameOf(PrincipalBase.Owned), complexProperty.PropertyInfo.Name)
                    Assert.Equal(principalBaseET, complexProperty.DeclaringType)
                    Assert.Equal(PropertyAccessMode.Field, complexProperty.GetPropertyAccessMode())
                    Assert.Equal("ber", complexProperty("goo"))

                    Dim complexType = complexProperty.ComplexType
                    Assert.Equal(
                        {
                            RelationalAnnotationNames.FunctionName,
                            RelationalAnnotationNames.Schema,
                            RelationalAnnotationNames.SqlQuery,
                            RelationalAnnotationNames.TableName,
                            RelationalAnnotationNames.ViewName,
                            RelationalAnnotationNames.ViewSchema,
                            "go"
                        },
                        complexType.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(GetType(PrincipalBase).FullName & ".Owned#OwnedType", complexType.Name)
                    Assert.Equal(GetType(OwnedType), complexType.ClrType)
                    Assert.True(complexType.HasSharedClrType)
                    Assert.False(complexType.IsPropertyBag)
                    Assert.IsType(Of ConstructorBinding)(complexType.ConstructorBinding)
                    Assert.Null(complexType.FindIndexerPropertyInfo())
                    Assert.Equal(
                        ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues,
                        complexType.GetChangeTrackingStrategy())
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() complexType.GetPropertyAccessMode()).Message)
                    Assert.Equal("brr", complexType("go"))

                    Dim detailsProperty = complexType.FindProperty(NameOf(OwnedType.Details))
                    Assert.Equal(
                        {
                            CoreAnnotationNames.MaxLength,
                            CoreAnnotationNames.Precision,
                            RelationalAnnotationNames.ColumnName,
                            RelationalAnnotationNames.ColumnType,
                            CoreAnnotationNames.Scale,
                            SqlServerAnnotationNames.ValueGenerationStrategy,
                            CoreAnnotationNames.Unicode,
                            "foo"
                        },
                        detailsProperty.GetAnnotations().Select(Function(a) a.Name))
                    Assert.Equal(GetType(String), detailsProperty.ClrType)
                    Assert.Equal(GetType(String), detailsProperty.PropertyInfo.PropertyType)
                    Assert.Equal(GetType(String), detailsProperty.FieldInfo.FieldType)
                    Assert.Equal("_details", detailsProperty.FieldInfo.Name)
                    Assert.True(detailsProperty.IsNullable)
                    Assert.Equal(ValueGenerated.OnAddOrUpdate, detailsProperty.ValueGenerated)
                    Assert.Equal(PropertySaveBehavior.Ignore, detailsProperty.GetAfterSaveBehavior())
                    Assert.Equal(PropertySaveBehavior.Ignore, detailsProperty.GetBeforeSaveBehavior())
                    Assert.Equal("Deets", detailsProperty.GetColumnName())
                    Assert.Equal("varchar(64)", detailsProperty.GetColumnType())
                    Assert.False(detailsProperty.IsUnicode())
                    Assert.True(detailsProperty.IsConcurrencyToken)
                    Assert.Equal(64, detailsProperty.GetMaxLength())
                    Assert.Null(detailsProperty.IsFixedLength())
                    Assert.Equal(3, detailsProperty.GetPrecision())
                    Assert.Equal(2, detailsProperty.GetScale())
                    Assert.Equal("", detailsProperty.Sentinel)
                    Assert.Equal(PropertyAccessMode.FieldDuringConstruction, detailsProperty.GetPropertyAccessMode())
                    Assert.Null(detailsProperty.GetValueConverter())
                    Assert.NotNull(detailsProperty.GetValueComparer())
                    Assert.NotNull(detailsProperty.GetKeyValueComparer())
                    Assert.Equal(SqlServerValueGenerationStrategy.None, detailsProperty.GetValueGenerationStrategy())
                    Assert.Null(detailsProperty.GetDefaultValueSql())
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() detailsProperty.GetIdentitySeed()).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() detailsProperty.GetIdentityIncrement()).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() detailsProperty.IsSparse()).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() detailsProperty.GetCollation()).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() detailsProperty.GetComment()).Message)
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() detailsProperty.GetColumnOrder()).Message)

                    Dim nestedComplexType = complexType.FindComplexProperty(NameOf(OwnedType.Principal)).ComplexType

                    Assert.Equal(14, nestedComplexType.GetProperties().Count())

                    Dim principalTable = StoreObjectIdentifier.Create(complexType, StoreObjectType.Table).Value

                    Assert.Equal("Deets", detailsProperty.GetColumnName(principalTable))

                    Dim dbFunction = Model.FindDbFunction("PrincipalBaseTvf")
                    Assert.Equal("dbo", dbFunction.Schema)
                    Assert.False(dbFunction.IsNullable)
                    Assert.False(dbFunction.IsScalar)
                    Assert.False(dbFunction.IsBuiltIn)
                    Assert.False(dbFunction.IsAggregate)
                    Assert.Null(dbFunction.Translation)
                    Assert.Null(dbFunction.TypeMapping)
                    Assert.Equal(GetType(IQueryable(Of PrincipalBase)), dbFunction.ReturnType)
                    Assert.Null(dbFunction.MethodInfo)
                    Assert.Empty(dbFunction.GetAnnotations())
                    Assert.Empty(dbFunction.GetRuntimeAnnotations())
                    Assert.Equal("PrincipalBaseTvf", dbFunction.StoreFunction.Name)
                    Assert.False(dbFunction.StoreFunction.IsShared)
                    Assert.NotNull(dbFunction.ToString())
                    Assert.Empty(dbFunction.Parameters)

                    Dim principalBaseFunctionMapping = principalBaseET.GetFunctionMappings().Single(Function(m) m.IsDefaultFunctionMapping)
                    Assert.True(principalBaseFunctionMapping.IncludesDerivedTypes)
                    Assert.Null(principalBaseFunctionMapping.IsSharedTablePrincipal)
                    Assert.Null(principalBaseFunctionMapping.IsSplitEntityTypePrincipal)
                    Assert.Same(dbFunction, principalBaseFunctionMapping.DbFunction)

                    Dim principalDerived = Model.FindEntityType(GetType(PrincipalDerived(Of DependentBase(Of Byte?))))
                    Assert.Equal(principalBaseET, principalDerived.BaseType)

                    Assert.Equal(
                        {principalBaseET, principalDerived},
                        Model.GetEntityTypes())
                End Sub,
                Nothing)
        End Sub

        Public Class BigContextWithJson
            Inherits BigContext

            Public Sub New()
                MyBase.New(jsonColumns:=True)
            End Sub
        End Class

        Public Class BigContext
            Inherits SqlServerContextBase

            Private ReadOnly _jsonColumns As Boolean

            Public Sub New(Optional jsonColumns As Boolean = False)
                _jsonColumns = jsonColumns
            End Sub

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    UseCollation("Latin1_General_CS_AS").
                    UseIdentityColumns(3, 2)

                modelBuilder.Entity(Of PrincipalBase)(
                    Sub(eb)
                        If Not _jsonColumns Then
                            eb.Property(Function(e) e.Id).
                            UseIdentityColumn(2, 3).
                            Metadata.
                            SetColumnName("DerivedId", StoreObjectIdentifier.
                            Table("PrincipalDerived"))
                        End If

                        eb.Property(Function(e) e.FlagsEnum2).
                            HasSentinel(AFlagsEnum.C Or AFlagsEnum.B)

                        eb.Property(Function(e) e.AlternateId).
                            UsePropertyAccessMode(PropertyAccessMode.FieldDuringConstruction)

                        eb.Property(Of Point)("Point").
                            HasColumnType("geometry").
                            HasDefaultValue(NtsGeometryServices.Instance.CreateGeometryFactory(srid:=0).
                            CreatePoint(New CoordinateZM(0, 0, 0, 0))).
                            HasConversion(Of CastingConverter(Of Point, Point), CustomValueComparer(Of Point), CustomValueComparer(Of Point))()

                        eb.HasIndex(Function(e) New With {e.AlternateId, e.Id})

                        eb.HasKey(Function(e) New With {e.Id, e.AlternateId}).HasName("PK").
                                                                              IsClustered()

                        eb.HasAlternateKey(Function(e) e.Id)

                        eb.Property(Function(e) e.AlternateId).Metadata.SetJsonValueReaderWriterType(
                            If(_jsonColumns,
                                GetType(MyJsonGuidReaderWriter),
                                GetType(JsonGuidReaderWriter)))

                        eb.OwnsOne(
                            Function(e) e.Owned,
                            Sub(ob)
                                ob.HasChangeTrackingStrategy(ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues)
                                ob.UsePropertyAccessMode(PropertyAccessMode.Field)
                                ob.Property(Function(e) e.Details).
                                    IsSparse().
                                    UseCollation("Latin1_General_CI_AI")

                                If _jsonColumns Then
                                    ob.ToJson()
                                Else
                                    ob.ToTable("PrincipalBase", "mySchema",
                                    Sub(t) t.Property("PrincipalBaseId").UseIdentityColumn(2, 3))

                                    ob.SplitToTable("Details", Sub(s) s.Property(Function(e) e.Details))

                                    ob.HasData(New With {
                                        .Number = 10,
                                        .PrincipalBaseId = 1L,
                                        .PrincipalBaseAlternateId = New Guid()
                                    })
                                End If
                            End Sub)

                        eb.Navigation(Function(e) e.Owned).
                           IsRequired().
                           HasField("_ownedField").
                           UsePropertyAccessMode(PropertyAccessMode.Field)

                        If Not _jsonColumns Then
                            eb.HasData(New PrincipalBase With {.Id = 1, .AlternateId = New Guid()})

                            eb.ToTable("PrincipalBase", "mySchema")
                        End If
                    End Sub)

                modelBuilder.Entity(Of PrincipalDerived(Of DependentBase(Of Byte?)))(
                    Sub(eb)
                        eb.HasOne(Function(e) e.Dependent).
                           WithOne(Function(e) e.Principal).
                           HasForeignKey(Of DependentBase(Of Byte?))().
                           OnDelete(DeleteBehavior.ClientNoAction)

                        eb.Navigation(Function(e) e.Dependent).AutoInclude().EnableLazyLoading(False)

                        eb.OwnsMany(GetType(OwnedType).FullName, "ManyOwned",
                                    Sub(ob)
                                        If _jsonColumns Then
                                            ob.ToJson()
                                        Else
                                            ob.ToTable("ManyOwned", Sub(t) t.IsMemoryOptimized().ExcludeFromMigrations())
                                        End If
                                    End Sub)

                        eb.HasMany(Function(e) e.Principals).
                           WithMany(Function(e) DirectCast(e.Deriveds, ICollection(Of PrincipalDerived(Of DependentBase(Of Byte?))))).
                           UsingEntity(
                            Sub(jb)
                                jb.ToTable(Function(tb) tb.HasComment("Join table"))
                                jb.Property(Of Byte())("rowid").
                                   IsRowVersion().
                                   HasComment("RowVersion").
                                   HasColumnOrder(1)
                            End Sub)

                        eb.Navigation(Function(e) e.Principals).AutoInclude().EnableLazyLoading(False)

                        If Not _jsonColumns Then
                            eb.ToTable("PrincipalDerived")
                        End If
                    End Sub)

                modelBuilder.Entity(Of DependentBase(Of Byte?))(
                    Sub(eb)
                        eb.Property(Of Byte?)("Id")

                        eb.HasKey({"PrincipalId", "PrincipalAlternateId"})

                        eb.HasOne(Of PrincipalBase)().
                           WithOne().
                           HasForeignKey(Of DependentBase(Of Byte?))("PrincipalId").
                           HasPrincipalKey(Of PrincipalBase)(Function(e) e.Id)

                        eb.HasDiscriminator(Of Enum1)("EnumDiscriminator").
                           HasValue(Enum1.One).
                           HasValue(Of DependentDerived(Of Byte?))(Enum1.Two).
                           IsComplete(False)
                    End Sub)

                modelBuilder.Entity(Of DependentDerived(Of Byte?))(
                    Sub(eb)
                        eb.Property(Of String)("Data").
                            HasMaxLength(20).
                            IsFixedLength().
                            IsUnicode(False)

                        eb.Property(Of Decimal)("Money").
                            HasPrecision(9, 3)
                    End Sub)
            End Sub
        End Class

        Public Class ComplexTypesContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of PrincipalBase)(
                    Sub(eb)
                        eb.ComplexProperty(
                            Function(e) e.Owned,
                            Sub(ceb)
                                ceb.IsRequired().
                                    HasField("_ownedField").
                                    UsePropertyAccessMode(PropertyAccessMode.Field).
                                    HasChangeTrackingStrategy(ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues).
                                    HasPropertyAnnotation("goo", "ber").
                                    HasTypeAnnotation("go", "brr")
                                ceb.Property(Function(c) c.Details).
                                    HasColumnName("Deets").
                                    HasColumnOrder(1).
                                    HasColumnType("varchar").
                                    IsUnicode(False).
                                    IsRequired(False).
                                    HasField("_details").
                                    HasSentinel("").
                                    UsePropertyAccessMode(PropertyAccessMode.FieldDuringConstruction).
                                    IsSparse().
                                    UseCollation("Latin1_General_CI_AI").
                                    HasMaxLength(64).
                                    HasPrecision(3, 2).
                                    HasComment("Dt").
                                    IsRowVersion().
                                    HasAnnotation("foo", "bar")
                                ceb.Ignore(Function(e) e.Context)
                                ceb.ComplexProperty(Function(o) o.Principal).IsRequired()
                            End Sub)

                        eb.ToTable("PrincipalBase")
                        eb.ToView("PrincipalBaseView")
                        eb.ToSqlQuery("select * from PrincipalBase")
                        eb.ToFunction("PrincipalBaseTvf")

                        eb.InsertUsingStoredProcedure(
                            Sub(s) s.HasParameter("PrincipalBaseId").
                                     HasParameter("Enum1").
                                     HasParameter("Enum2").
                                     HasParameter("FlagsEnum1").
                                     HasParameter("FlagsEnum2").
                                     HasParameter("ValueTypeList").
                                     HasParameter("ValueTypeIList").
                                     HasParameter("ValueTypeArray").
                                     HasParameter("ValueTypeEnumerable").
                                     HasParameter("RefTypeList").
                                     HasParameter("RefTypeIList").
                                     HasParameter("RefTypeArray").
                                     HasParameter("RefTypeEnumerable").
                                     HasParameter("Discriminator").
                                     HasParameter(Function(p) p.Id, Function(p) p.IsOutput()))

                        eb.UpdateUsingStoredProcedure(
                            Sub(s) s.HasParameter("PrincipalBaseId").
                                     HasParameter("Enum1").
                                     HasParameter("Enum2").
                                     HasParameter("FlagsEnum1").
                                     HasParameter("FlagsEnum2").
                                     HasParameter("ValueTypeList").
                                     HasParameter("ValueTypeIList").
                                     HasParameter("ValueTypeArray").
                                     HasParameter("ValueTypeEnumerable").
                                     HasParameter("RefTypeList").
                                     HasParameter("RefTypeIList").
                                     HasParameter("RefTypeArray").
                                     HasParameter("RefTypeEnumerable").
                                     HasOriginalValueParameter(Function(p) p.Id))

                        eb.DeleteUsingStoredProcedure(
                            Sub(s) s.HasRowsAffectedReturnValue().
                                     HasOriginalValueParameter(Function(p) p.Id))
                    End Sub)

                modelBuilder.Entity(Of PrincipalDerived(Of DependentBase(Of Byte?)))(
                Sub(eb)
                    ' eb.ComplexCollection(TypeOf(OwnedType).Name, "ManyOwned")
                    eb.Ignore(Function(p) p.Dependent)
                    eb.Ignore(Function(p) p.Principals)
                    eb.ToTable("PrincipalBase")
                    eb.ToFunction(CType(Nothing, String))
                End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub TPC_model()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.TpcContext))>
    Public Partial Class TpcContextModel
        Inherits RuntimeModel

        Private Shared _Instance As TpcContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New TpcContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.Migrations

Namespace TestNamespace
    Public Partial Class TpcContextModel

        Private Sub Initialize()
            Dim dependentBase = DependentBaseEntityType.Create(Me)
            Dim principalBase = PrincipalBaseEntityType.Create(Me)
            Dim principalDerived = PrincipalDerivedEntityType.Create(Me, principalBase)

            DependentBaseEntityType.CreateForeignKey1(dependentBase, principalDerived)
            PrincipalBaseEntityType.CreateForeignKey1(principalBase, principalBase)
            PrincipalBaseEntityType.CreateForeignKey2(principalBase, principalDerived)

            DependentBaseEntityType.CreateAnnotations(dependentBase)
            PrincipalBaseEntityType.CreateAnnotations(principalBase)
            PrincipalDerivedEntityType.CreateAnnotations(principalDerived)

            Dim sequences As New SortedDictionary(Of (String, String), ISequence)()
            Dim principalBaseSequence As New RuntimeSequence(
                "PrincipalBaseSequence",
                Me,
                GetType(Long),
                schema:="TPC",
                modelSchemaIsNull:=True)

            sequences(("PrincipalBaseSequence", Nothing)) = principalBaseSequence

            AddAnnotation("Relational:Sequences", sequences)
            AddAnnotation("Relational:DefaultSchema", "TPC")
            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim dependentBase = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            dependentBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>", Nothing, relationalModel)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "tinyint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Id", idColumnBase)
            Dim principalIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalId", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("PrincipalId", principalIdColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase As New TableMappingBase(Of ColumnMappingBase)(dependentBase, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalIdColumnBase, ColumnBase(Of ColumnMappingBase)), dependentBase.FindProperty("PrincipalId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            dependentBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim dependentBasebyteTable As New Table("DependentBase<byte?>", "TPC", relationalModel)
            Dim idColumn As New Column("Id", "tinyint", dependentBasebyteTable)
            dependentBasebyteTable.Columns.Add("Id", idColumn)
            Dim principalIdColumn As New Column("PrincipalId", "bigint", dependentBasebyteTable) With {
                .IsNullable = True
            }
            dependentBasebyteTable.Columns.Add("PrincipalId", principalIdColumn)
            Dim pK_DependentBasebyte As New UniqueConstraint("PK_DependentBase<byte?>", dependentBasebyteTable, {idColumn})
            dependentBasebyteTable.PrimaryKey = pK_DependentBasebyte
            Dim pK_DependentBasebyteUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"Id"})
            pK_DependentBasebyte.MappedKeys.Add(pK_DependentBasebyteUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DependentBasebyteUc).Add(pK_DependentBasebyte)
            dependentBasebyteTable.UniqueConstraints.Add("PK_DependentBase<byte?>", pK_DependentBasebyte)
            Dim iX_DependentBasebyte_PrincipalId As New TableIndex(
            "IX_DependentBase<byte?>_PrincipalId", dependentBasebyteTable, {principalIdColumn}, True)
            Dim iX_DependentBasebyte_PrincipalIdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId"})
            iX_DependentBasebyte_PrincipalId.MappedIndexes.Add(iX_DependentBasebyte_PrincipalIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_DependentBasebyte_PrincipalIdIx).Add(iX_DependentBasebyte_PrincipalId)
            dependentBasebyteTable.Indexes.Add("IX_DependentBase<byte?>_PrincipalId", iX_DependentBasebyte_PrincipalId)
            relationalModel.Tables.Add(("DependentBase<byte?>", "TPC"), dependentBasebyteTable)
            Dim dependentBasebyteTableMapping As New TableMapping(dependentBase, dependentBasebyteTable, True)
            dependentBasebyteTable.AddTypeMapping(dependentBasebyteTableMapping, False)
            tableMappings.Add(dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, dependentBase.FindProperty("Id"), dependentBasebyteTableMapping)
            RelationalModel.CreateColumnMapping(principalIdColumn, dependentBase.FindProperty("PrincipalId"), dependentBasebyteTableMapping)

            Dim principalBase = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase")

            Dim defaultTableMappings0 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase", Nothing, relationalModel)
            Dim enum1ColumnBase As New ColumnBase(Of ColumnMappingBase)("Enum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Enum1", enum1ColumnBase)
            Dim enum2ColumnBase As New ColumnBase(Of ColumnMappingBase)("Enum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Enum2", enum2ColumnBase)
            Dim flagsEnum1ColumnBase As New ColumnBase(Of ColumnMappingBase)("FlagsEnum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("FlagsEnum1", flagsEnum1ColumnBase)
            Dim flagsEnum2ColumnBase As New ColumnBase(Of ColumnMappingBase)("FlagsEnum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("FlagsEnum2", flagsEnum2ColumnBase)
            Dim idColumnBase0 As New ColumnBase(Of ColumnMappingBase)("Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("Id", idColumnBase0)
            Dim principalBaseIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalBaseId", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("PrincipalBaseId", principalBaseIdColumnBase)
            Dim principalDerivedDependentBasebyteIdColumnBase As New ColumnBase(Of ColumnMappingBase)("PrincipalDerived<DependentBase<byte?>>Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("PrincipalDerived<DependentBase<byte?>>Id", principalDerivedDependentBasebyteIdColumnBase)
            Dim refTypeArrayColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeArray", refTypeArrayColumnBase)
            Dim refTypeEnumerableColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumnBase)
            Dim refTypeIListColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeIList", refTypeIListColumnBase)
            Dim refTypeListColumnBase As New ColumnBase(Of ColumnMappingBase)("RefTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("RefTypeList", refTypeListColumnBase)
            Dim valueTypeArrayColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeArray", valueTypeArrayColumnBase)
            Dim valueTypeEnumerableColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumnBase)
            Dim valueTypeIListColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeIList", valueTypeIListColumnBase)
            Dim valueTypeListColumnBase As New ColumnBase(Of ColumnMappingBase)("ValueTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.Columns.Add("ValueTypeList", valueTypeListColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase As New TableMappingBase(Of ColumnMappingBase)(principalBase, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase, False)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase, False)
            defaultTableMappings0.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase0, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum1ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum2ColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalBaseIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("PrincipalBaseId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalDerivedDependentBasebyteIdColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("PrincipalDerivedId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase, ColumnBase(Of ColumnMappingBase)), principalBase.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalBaseMappingBase)

            Dim tableMappings0 As New List(Of TableMapping)()
            principalBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0)
            Dim principalBaseTable As New Table("PrincipalBase", "TPC", relationalModel)
            Dim idColumn0 As New Column("Id", "bigint", principalBaseTable)
            principalBaseTable.Columns.Add("Id", idColumn0)
            Dim enum1Column As New Column("Enum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("Enum1", enum1Column)
            Dim enum2Column As New Column("Enum2", "int", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("Enum2", enum2Column)
            Dim flagsEnum1Column As New Column("FlagsEnum1", "int", principalBaseTable)
            principalBaseTable.Columns.Add("FlagsEnum1", flagsEnum1Column)
            Dim flagsEnum2Column As New Column("FlagsEnum2", "int", principalBaseTable)
            principalBaseTable.Columns.Add("FlagsEnum2", flagsEnum2Column)
            Dim principalBaseIdColumn As New Column("PrincipalBaseId", "bigint", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("PrincipalBaseId", principalBaseIdColumn)
            Dim principalDerivedDependentBasebyteIdColumn As New Column("PrincipalDerived<DependentBase<byte?>>Id", "bigint", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("PrincipalDerived<DependentBase<byte?>>Id", principalDerivedDependentBasebyteIdColumn)
            Dim refTypeArrayColumn As New Column("RefTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeArray", refTypeArrayColumn)
            Dim refTypeEnumerableColumn As New Column("RefTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumn)
            Dim refTypeIListColumn As New Column("RefTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeIList", refTypeIListColumn)
            Dim refTypeListColumn As New Column("RefTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("RefTypeList", refTypeListColumn)
            Dim valueTypeArrayColumn As New Column("ValueTypeArray", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeArray", valueTypeArrayColumn)
            Dim valueTypeEnumerableColumn As New Column("ValueTypeEnumerable", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumn)
            Dim valueTypeIListColumn As New Column("ValueTypeIList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeIList", valueTypeIListColumn)
            Dim valueTypeListColumn As New Column("ValueTypeList", "nvarchar(max)", principalBaseTable) With {
                .IsNullable = True
            }
            principalBaseTable.Columns.Add("ValueTypeList", valueTypeListColumn)
            Dim pK_PrincipalBase As New UniqueConstraint("PK_PrincipalBase", principalBaseTable, {idColumn0})
            principalBaseTable.PrimaryKey = pK_PrincipalBase
            Dim pK_PrincipalBaseUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            pK_PrincipalBase.MappedKeys.Add(pK_PrincipalBaseUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_PrincipalBaseUc).Add(pK_PrincipalBase)
            principalBaseTable.UniqueConstraints.Add("PK_PrincipalBase", pK_PrincipalBase)
            Dim iX_PrincipalBase_PrincipalDerivedDependentBasebyteId As New TableIndex(
            "IX_PrincipalBase_PrincipalDerived<DependentBase<byte?>>Id", principalBaseTable, {principalDerivedDependentBasebyteIdColumn}, False)
            Dim iX_PrincipalBase_PrincipalDerivedDependentBasebyteIdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"PrincipalDerivedId"})
            iX_PrincipalBase_PrincipalDerivedDependentBasebyteId.MappedIndexes.Add(iX_PrincipalBase_PrincipalDerivedDependentBasebyteIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalBase_PrincipalDerivedDependentBasebyteIdIx).Add(iX_PrincipalBase_PrincipalDerivedDependentBasebyteId)
            principalBaseTable.Indexes.Add("IX_PrincipalBase_PrincipalDerived<DependentBase<byte?>>Id", iX_PrincipalBase_PrincipalDerivedDependentBasebyteId)
            Dim pIX As New TableIndex(
            "PIX", principalBaseTable, {principalBaseIdColumn}, True)
            Dim pIXIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                "PrincipalIndex")
            pIX.MappedIndexes.Add(pIXIx)
            RelationalModel.GetOrCreateTableIndexes(pIXIx).Add(pIX)
            principalBaseTable.Indexes.Add("PIX", pIX)
            relationalModel.Tables.Add(("PrincipalBase", "TPC"), principalBaseTable)
            Dim principalBaseTableMapping As New TableMapping(principalBase, principalBaseTable, False)
            principalBaseTable.AddTypeMapping(principalBaseTableMapping, False)
            tableMappings0.Add(principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(idColumn0, principalBase.FindProperty("Id"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(enum1Column, principalBase.FindProperty("Enum1"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(enum2Column, principalBase.FindProperty("Enum2"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalBase.FindProperty("FlagsEnum1"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalBase.FindProperty("FlagsEnum2"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(principalBaseIdColumn, principalBase.FindProperty("PrincipalBaseId"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(principalDerivedDependentBasebyteIdColumn, principalBase.FindProperty("PrincipalDerivedId"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalBase.FindProperty("RefTypeArray"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalBase.FindProperty("RefTypeEnumerable"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalBase.FindProperty("RefTypeIList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalBase.FindProperty("RefTypeList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalBase.FindProperty("ValueTypeArray"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalBase.FindProperty("ValueTypeEnumerable"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalBase.FindProperty("ValueTypeIList"), principalBaseTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalBase.FindProperty("ValueTypeList"), principalBaseTableMapping)

            Dim viewMappings As New List(Of ViewMapping)()
            principalBase.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings)
            Dim principalBaseViewView As New View("PrincipalBaseView", "TPC", relationalModel)
            Dim enum1ViewColumn As New ViewColumn("Enum1", "int", principalBaseViewView)
            principalBaseViewView.Columns.Add("Enum1", enum1ViewColumn)
            Dim enum2ViewColumn As New ViewColumn("Enum2", "int", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("Enum2", enum2ViewColumn)
            Dim flagsEnum1ViewColumn As New ViewColumn("FlagsEnum1", "int", principalBaseViewView)
            principalBaseViewView.Columns.Add("FlagsEnum1", flagsEnum1ViewColumn)
            Dim flagsEnum2ViewColumn As New ViewColumn("FlagsEnum2", "int", principalBaseViewView)
            principalBaseViewView.Columns.Add("FlagsEnum2", flagsEnum2ViewColumn)
            Dim idViewColumn As New ViewColumn("Id", "bigint", principalBaseViewView)
            principalBaseViewView.Columns.Add("Id", idViewColumn)
            Dim principalBaseIdViewColumn As New ViewColumn("PrincipalBaseId", "bigint", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("PrincipalBaseId", principalBaseIdViewColumn)
            Dim principalDerivedIdViewColumn As New ViewColumn("PrincipalDerivedId", "bigint", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("PrincipalDerivedId", principalDerivedIdViewColumn)
            Dim refTypeArrayViewColumn As New ViewColumn("RefTypeArray", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("RefTypeArray", refTypeArrayViewColumn)
            Dim refTypeEnumerableViewColumn As New ViewColumn("RefTypeEnumerable", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("RefTypeEnumerable", refTypeEnumerableViewColumn)
            Dim refTypeIListViewColumn As New ViewColumn("RefTypeIList", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("RefTypeIList", refTypeIListViewColumn)
            Dim refTypeListViewColumn As New ViewColumn("RefTypeList", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("RefTypeList", refTypeListViewColumn)
            Dim valueTypeArrayViewColumn As New ViewColumn("ValueTypeArray", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("ValueTypeArray", valueTypeArrayViewColumn)
            Dim valueTypeEnumerableViewColumn As New ViewColumn("ValueTypeEnumerable", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableViewColumn)
            Dim valueTypeIListViewColumn As New ViewColumn("ValueTypeIList", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("ValueTypeIList", valueTypeIListViewColumn)
            Dim valueTypeListViewColumn As New ViewColumn("ValueTypeList", "nvarchar(max)", principalBaseViewView) With {
                .IsNullable = True
            }
            principalBaseViewView.Columns.Add("ValueTypeList", valueTypeListViewColumn)
            relationalModel.Views.Add(("PrincipalBaseView", "TPC"), principalBaseViewView)
            Dim principalBaseViewViewMapping As New ViewMapping(principalBase, principalBaseViewView, False)
            principalBaseViewView.AddTypeMapping(principalBaseViewViewMapping, False)
            viewMappings.Add(principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(idViewColumn, principalBase.FindProperty("Id"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(enum1ViewColumn, principalBase.FindProperty("Enum1"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(enum2ViewColumn, principalBase.FindProperty("Enum2"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(flagsEnum1ViewColumn, principalBase.FindProperty("FlagsEnum1"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(flagsEnum2ViewColumn, principalBase.FindProperty("FlagsEnum2"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(principalBaseIdViewColumn, principalBase.FindProperty("PrincipalBaseId"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(principalDerivedIdViewColumn, principalBase.FindProperty("PrincipalDerivedId"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeArrayViewColumn, principalBase.FindProperty("RefTypeArray"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeEnumerableViewColumn, principalBase.FindProperty("RefTypeEnumerable"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeIListViewColumn, principalBase.FindProperty("RefTypeIList"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeListViewColumn, principalBase.FindProperty("RefTypeList"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeArrayViewColumn, principalBase.FindProperty("ValueTypeArray"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeEnumerableViewColumn, principalBase.FindProperty("ValueTypeEnumerable"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeIListViewColumn, principalBase.FindProperty("ValueTypeIList"), principalBaseViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeListViewColumn, principalBase.FindProperty("ValueTypeList"), principalBaseViewViewMapping)

            Dim deleteSprocMappings As New List(Of StoredProcedureMapping)()
            principalBase.SetRuntimeAnnotation("Relational:DeleteStoredProcedureMappings", deleteSprocMappings)
            Dim principalBase_DeleteStoreSproc As New StoreStoredProcedure("PrincipalBase_Delete", "TPC", relationalModel)
            principalBase_DeleteStoreSproc.ReturnValue = New StoreStoredProcedureReturnValue("", "int", principalBase_DeleteStoreSproc)
            Dim id_OriginalParameter As New StoreStoredProcedureParameter("Id_Original", "bigint", 0, principalBase_DeleteStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_DeleteStoreSproc.AddParameter(id_OriginalParameter)
            principalBase_DeleteStoreSproc.AddStoredProcedure(DirectCast(principalBase.GetDeleteStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("PrincipalBase_Delete", "TPC"), principalBase_DeleteStoreSproc)
            Dim principalBase_DeleteDSproc = DirectCast(principalBase.GetDeleteStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_DeleteSprocMapping As New StoredProcedureMapping(principalBase, principalBase_DeleteStoreSproc, DirectCast(principalBase.GetDeleteStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping, False)
            principalBase_DeleteStoreSproc.AddTypeMapping(principalBase_DeleteSprocMapping, False)
            deleteSprocMappings.Add(principalBase_DeleteSprocMapping)
            principalBaseTableMapping.DeleteStoredProcedureMapping = principalBase_DeleteSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(id_OriginalParameter, principalBase_DeleteDSproc.FindParameter("Id_Original"), principalBase.FindProperty("Id"), principalBase_DeleteSprocMapping)

            Dim insertSprocMappings As New List(Of StoredProcedureMapping)()
            principalBase.SetRuntimeAnnotation("Relational:InsertStoredProcedureMappings", insertSprocMappings)
            Dim principalBase_InsertStoreSproc As New StoreStoredProcedure("PrincipalBase_Insert", "TPC", relationalModel)
            Dim principalBaseIdParameter As New StoreStoredProcedureParameter("PrincipalBaseId", "bigint", 0, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(principalBaseIdParameter)
            Dim principalDerivedIdParameter As New StoreStoredProcedureParameter("PrincipalDerivedId", "bigint", 1, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(principalDerivedIdParameter)
            Dim enum1Parameter As New StoreStoredProcedureParameter("Enum1", "int", 2, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_InsertStoreSproc.AddParameter(enum1Parameter)
            Dim enum2Parameter As New StoreStoredProcedureParameter("Enum2", "int", 3, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(enum2Parameter)
            Dim flagsEnum1Parameter As New StoreStoredProcedureParameter("FlagsEnum1", "int", 4, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_InsertStoreSproc.AddParameter(flagsEnum1Parameter)
            Dim flagsEnum2Parameter As New StoreStoredProcedureParameter("FlagsEnum2", "int", 5, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_InsertStoreSproc.AddParameter(flagsEnum2Parameter)
            Dim valueTypeListParameter As New StoreStoredProcedureParameter("ValueTypeList", "nvarchar(max)", 6, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(valueTypeListParameter)
            Dim valueTypeIListParameter As New StoreStoredProcedureParameter("ValueTypeIList", "nvarchar(max)", 7, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(valueTypeIListParameter)
            Dim valueTypeArrayParameter As New StoreStoredProcedureParameter("ValueTypeArray", "nvarchar(max)", 8, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(valueTypeArrayParameter)
            Dim valueTypeEnumerableParameter As New StoreStoredProcedureParameter("ValueTypeEnumerable", "nvarchar(max)", 9, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(valueTypeEnumerableParameter)
            Dim refTypeListParameter As New StoreStoredProcedureParameter("RefTypeList", "nvarchar(max)", 10, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(refTypeListParameter)
            Dim refTypeIListParameter As New StoreStoredProcedureParameter("RefTypeIList", "nvarchar(max)", 11, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(refTypeIListParameter)
            Dim refTypeArrayParameter As New StoreStoredProcedureParameter("RefTypeArray", "nvarchar(max)", 12, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(refTypeArrayParameter)
            Dim refTypeEnumerableParameter As New StoreStoredProcedureParameter("RefTypeEnumerable", "nvarchar(max)", 13, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_InsertStoreSproc.AddParameter(refTypeEnumerableParameter)
            Dim baseIdParameter As New StoreStoredProcedureParameter("BaseId", "bigint", 14, principalBase_InsertStoreSproc, System.Data.ParameterDirection.Output)
            principalBase_InsertStoreSproc.AddParameter(baseIdParameter)
            principalBase_InsertStoreSproc.AddStoredProcedure(DirectCast(principalBase.GetInsertStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("PrincipalBase_Insert", "TPC"), principalBase_InsertStoreSproc)
            Dim principalBase_InsertISproc = DirectCast(principalBase.GetInsertStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_InsertSprocMapping As New StoredProcedureMapping(principalBase, principalBase_InsertStoreSproc, DirectCast(principalBase.GetInsertStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping, False)
            principalBase_InsertStoreSproc.AddTypeMapping(principalBase_InsertSprocMapping, False)
            insertSprocMappings.Add(principalBase_InsertSprocMapping)
            principalBaseTableMapping.InsertStoredProcedureMapping = principalBase_InsertSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(baseIdParameter, principalBase_InsertISproc.FindParameter("BaseId"), principalBase.FindProperty("Id"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum1Parameter, principalBase_InsertISproc.FindParameter("Enum1"), principalBase.FindProperty("Enum1"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum2Parameter, principalBase_InsertISproc.FindParameter("Enum2"), principalBase.FindProperty("Enum2"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum1Parameter, principalBase_InsertISproc.FindParameter("FlagsEnum1"), principalBase.FindProperty("FlagsEnum1"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum2Parameter, principalBase_InsertISproc.FindParameter("FlagsEnum2"), principalBase.FindProperty("FlagsEnum2"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalBaseIdParameter, principalBase_InsertISproc.FindParameter("PrincipalBaseId"), principalBase.FindProperty("PrincipalBaseId"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalDerivedIdParameter, principalBase_InsertISproc.FindParameter("PrincipalDerivedId"), principalBase.FindProperty("PrincipalDerivedId"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeArrayParameter, principalBase_InsertISproc.FindParameter("RefTypeArray"), principalBase.FindProperty("RefTypeArray"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeEnumerableParameter, principalBase_InsertISproc.FindParameter("RefTypeEnumerable"), principalBase.FindProperty("RefTypeEnumerable"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeIListParameter, principalBase_InsertISproc.FindParameter("RefTypeIList"), principalBase.FindProperty("RefTypeIList"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeListParameter, principalBase_InsertISproc.FindParameter("RefTypeList"), principalBase.FindProperty("RefTypeList"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeArrayParameter, principalBase_InsertISproc.FindParameter("ValueTypeArray"), principalBase.FindProperty("ValueTypeArray"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeEnumerableParameter, principalBase_InsertISproc.FindParameter("ValueTypeEnumerable"), principalBase.FindProperty("ValueTypeEnumerable"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeIListParameter, principalBase_InsertISproc.FindParameter("ValueTypeIList"), principalBase.FindProperty("ValueTypeIList"), principalBase_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeListParameter, principalBase_InsertISproc.FindParameter("ValueTypeList"), principalBase.FindProperty("ValueTypeList"), principalBase_InsertSprocMapping)

            Dim updateSprocMappings As New List(Of StoredProcedureMapping)()
            principalBase.SetRuntimeAnnotation("Relational:UpdateStoredProcedureMappings", updateSprocMappings)
            Dim principalBase_UpdateStoreSproc As New StoreStoredProcedure("PrincipalBase_Update", "TPC", relationalModel)
            Dim principalBaseIdParameter0 As New StoreStoredProcedureParameter("PrincipalBaseId", "bigint", 0, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(principalBaseIdParameter0)
            Dim principalDerivedIdParameter0 As New StoreStoredProcedureParameter("PrincipalDerivedId", "bigint", 1, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(principalDerivedIdParameter0)
            Dim enum1Parameter0 As New StoreStoredProcedureParameter("Enum1", "int", 2, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_UpdateStoreSproc.AddParameter(enum1Parameter0)
            Dim enum2Parameter0 As New StoreStoredProcedureParameter("Enum2", "int", 3, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(enum2Parameter0)
            Dim flagsEnum1Parameter0 As New StoreStoredProcedureParameter("FlagsEnum1", "int", 4, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_UpdateStoreSproc.AddParameter(flagsEnum1Parameter0)
            Dim flagsEnum2Parameter0 As New StoreStoredProcedureParameter("FlagsEnum2", "int", 5, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_UpdateStoreSproc.AddParameter(flagsEnum2Parameter0)
            Dim valueTypeListParameter0 As New StoreStoredProcedureParameter("ValueTypeList", "nvarchar(max)", 6, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(valueTypeListParameter0)
            Dim valueTypeIListParameter0 As New StoreStoredProcedureParameter("ValueTypeIList", "nvarchar(max)", 7, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(valueTypeIListParameter0)
            Dim valueTypeArrayParameter0 As New StoreStoredProcedureParameter("ValueTypeArray", "nvarchar(max)", 8, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(valueTypeArrayParameter0)
            Dim valueTypeEnumerableParameter0 As New StoreStoredProcedureParameter("ValueTypeEnumerable", "nvarchar(max)", 9, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(valueTypeEnumerableParameter0)
            Dim refTypeListParameter0 As New StoreStoredProcedureParameter("RefTypeList", "nvarchar(max)", 10, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(refTypeListParameter0)
            Dim refTypeIListParameter0 As New StoreStoredProcedureParameter("RefTypeIList", "nvarchar(max)", 11, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(refTypeIListParameter0)
            Dim refTypeArrayParameter0 As New StoreStoredProcedureParameter("RefTypeArray", "nvarchar(max)", 12, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(refTypeArrayParameter0)
            Dim refTypeEnumerableParameter0 As New StoreStoredProcedureParameter("RefTypeEnumerable", "nvarchar(max)", 13, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            principalBase_UpdateStoreSproc.AddParameter(refTypeEnumerableParameter0)
            Dim id_OriginalParameter0 As New StoreStoredProcedureParameter("Id_Original", "bigint", 14, principalBase_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            principalBase_UpdateStoreSproc.AddParameter(id_OriginalParameter0)
            principalBase_UpdateStoreSproc.AddStoredProcedure(DirectCast(principalBase.GetUpdateStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("PrincipalBase_Update", "TPC"), principalBase_UpdateStoreSproc)
            Dim principalBase_UpdateUSproc = DirectCast(principalBase.GetUpdateStoredProcedure(), IRuntimeStoredProcedure)
            Dim principalBase_UpdateSprocMapping As New StoredProcedureMapping(principalBase, principalBase_UpdateStoreSproc, DirectCast(principalBase.GetUpdateStoredProcedure(), IRuntimeStoredProcedure), principalBaseTableMapping, False)
            principalBase_UpdateStoreSproc.AddTypeMapping(principalBase_UpdateSprocMapping, False)
            updateSprocMappings.Add(principalBase_UpdateSprocMapping)
            principalBaseTableMapping.UpdateStoredProcedureMapping = principalBase_UpdateSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(id_OriginalParameter0, principalBase_UpdateUSproc.FindParameter("Id_Original"), principalBase.FindProperty("Id"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum1Parameter0, principalBase_UpdateUSproc.FindParameter("Enum1"), principalBase.FindProperty("Enum1"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum2Parameter0, principalBase_UpdateUSproc.FindParameter("Enum2"), principalBase.FindProperty("Enum2"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum1Parameter0, principalBase_UpdateUSproc.FindParameter("FlagsEnum1"), principalBase.FindProperty("FlagsEnum1"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum2Parameter0, principalBase_UpdateUSproc.FindParameter("FlagsEnum2"), principalBase.FindProperty("FlagsEnum2"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalBaseIdParameter0, principalBase_UpdateUSproc.FindParameter("PrincipalBaseId"), principalBase.FindProperty("PrincipalBaseId"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalDerivedIdParameter0, principalBase_UpdateUSproc.FindParameter("PrincipalDerivedId"), principalBase.FindProperty("PrincipalDerivedId"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeArrayParameter0, principalBase_UpdateUSproc.FindParameter("RefTypeArray"), principalBase.FindProperty("RefTypeArray"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeEnumerableParameter0, principalBase_UpdateUSproc.FindParameter("RefTypeEnumerable"), principalBase.FindProperty("RefTypeEnumerable"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeIListParameter0, principalBase_UpdateUSproc.FindParameter("RefTypeIList"), principalBase.FindProperty("RefTypeIList"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeListParameter0, principalBase_UpdateUSproc.FindParameter("RefTypeList"), principalBase.FindProperty("RefTypeList"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeArrayParameter0, principalBase_UpdateUSproc.FindParameter("ValueTypeArray"), principalBase.FindProperty("ValueTypeArray"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeEnumerableParameter0, principalBase_UpdateUSproc.FindParameter("ValueTypeEnumerable"), principalBase.FindProperty("ValueTypeEnumerable"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeIListParameter0, principalBase_UpdateUSproc.FindParameter("ValueTypeIList"), principalBase.FindProperty("ValueTypeIList"), principalBase_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeListParameter0, principalBase_UpdateUSproc.FindParameter("ValueTypeList"), principalBase.FindProperty("ValueTypeList"), principalBase_UpdateSprocMapping)

            Dim principalDerived = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>")

            Dim defaultTableMappings1 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            principalDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>", Nothing, relationalModel)
            Dim enum1ColumnBase0 As New ColumnBase(Of ColumnMappingBase)("Enum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Enum1", enum1ColumnBase0)
            Dim enum2ColumnBase0 As New ColumnBase(Of ColumnMappingBase)("Enum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Enum2", enum2ColumnBase0)
            Dim flagsEnum1ColumnBase0 As New ColumnBase(Of ColumnMappingBase)("FlagsEnum1", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("FlagsEnum1", flagsEnum1ColumnBase0)
            Dim flagsEnum2ColumnBase0 As New ColumnBase(Of ColumnMappingBase)("FlagsEnum2", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("FlagsEnum2", flagsEnum2ColumnBase0)
            Dim idColumnBase1 As New ColumnBase(Of ColumnMappingBase)("Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("Id", idColumnBase1)
            Dim principalBaseIdColumnBase0 As New ColumnBase(Of ColumnMappingBase)("PrincipalBaseId", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("PrincipalBaseId", principalBaseIdColumnBase0)
            Dim principalDerivedDependentBasebyteIdColumnBase0 As New ColumnBase(Of ColumnMappingBase)("PrincipalDerived<DependentBase<byte?>>Id", "bigint", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("PrincipalDerived<DependentBase<byte?>>Id", principalDerivedDependentBasebyteIdColumnBase0)
            Dim refTypeArrayColumnBase0 As New ColumnBase(Of ColumnMappingBase)("RefTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("RefTypeArray", refTypeArrayColumnBase0)
            Dim refTypeEnumerableColumnBase0 As New ColumnBase(Of ColumnMappingBase)("RefTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumnBase0)
            Dim refTypeIListColumnBase0 As New ColumnBase(Of ColumnMappingBase)("RefTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("RefTypeIList", refTypeIListColumnBase0)
            Dim refTypeListColumnBase0 As New ColumnBase(Of ColumnMappingBase)("RefTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("RefTypeList", refTypeListColumnBase0)
            Dim valueTypeArrayColumnBase0 As New ColumnBase(Of ColumnMappingBase)("ValueTypeArray", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("ValueTypeArray", valueTypeArrayColumnBase0)
            Dim valueTypeEnumerableColumnBase0 As New ColumnBase(Of ColumnMappingBase)("ValueTypeEnumerable", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumnBase0)
            Dim valueTypeIListColumnBase0 As New ColumnBase(Of ColumnMappingBase)("ValueTypeIList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("ValueTypeIList", valueTypeIListColumnBase0)
            Dim valueTypeListColumnBase0 As New ColumnBase(Of ColumnMappingBase)("ValueTypeList", "nvarchar(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.Columns.Add("ValueTypeList", valueTypeListColumnBase0)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase As New TableMappingBase(Of ColumnMappingBase)(principalDerived, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase, False)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase, False)
            defaultTableMappings1.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase1, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum1ColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Enum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(enum2ColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("Enum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum1ColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("FlagsEnum1"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(flagsEnum2ColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("FlagsEnum2"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalBaseIdColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("PrincipalBaseId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(principalDerivedDependentBasebyteIdColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("PrincipalDerivedId"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeArrayColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeEnumerableColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeIListColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(refTypeListColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("RefTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeArrayColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeArray"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeEnumerableColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeEnumerable"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeIListColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeIList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(valueTypeListColumnBase0, ColumnBase(Of ColumnMappingBase)), principalDerived.FindProperty("ValueTypeList"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestPrincipalDerivedEntityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDependentBasebyteMappingBase)

            Dim tableMappings1 As New List(Of TableMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1)
            Dim principalDerivedTable As New Table("PrincipalDerived", "TPC", relationalModel)
            Dim idColumn1 As New Column("Id", "bigint", principalDerivedTable)
            principalDerivedTable.Columns.Add("Id", idColumn1)
            Dim enum1Column0 As New Column("Enum1", "int", principalDerivedTable)
            principalDerivedTable.Columns.Add("Enum1", enum1Column0)
            Dim enum2Column0 As New Column("Enum2", "int", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("Enum2", enum2Column0)
            Dim flagsEnum1Column0 As New Column("FlagsEnum1", "int", principalDerivedTable)
            principalDerivedTable.Columns.Add("FlagsEnum1", flagsEnum1Column0)
            Dim flagsEnum2Column0 As New Column("FlagsEnum2", "int", principalDerivedTable)
            principalDerivedTable.Columns.Add("FlagsEnum2", flagsEnum2Column0)
            Dim principalBaseIdColumn0 As New Column("PrincipalBaseId", "bigint", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("PrincipalBaseId", principalBaseIdColumn0)
            Dim principalDerivedDependentBasebyteIdColumn0 As New Column("PrincipalDerived<DependentBase<byte?>>Id", "bigint", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("PrincipalDerived<DependentBase<byte?>>Id", principalDerivedDependentBasebyteIdColumn0)
            Dim refTypeArrayColumn0 As New Column("RefTypeArray", "nvarchar(max)", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("RefTypeArray", refTypeArrayColumn0)
            Dim refTypeEnumerableColumn0 As New Column("RefTypeEnumerable", "nvarchar(max)", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumn0)
            Dim refTypeIListColumn0 As New Column("RefTypeIList", "nvarchar(max)", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("RefTypeIList", refTypeIListColumn0)
            Dim refTypeListColumn0 As New Column("RefTypeList", "nvarchar(max)", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("RefTypeList", refTypeListColumn0)
            Dim valueTypeArrayColumn0 As New Column("ValueTypeArray", "nvarchar(max)", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("ValueTypeArray", valueTypeArrayColumn0)
            Dim valueTypeEnumerableColumn0 As New Column("ValueTypeEnumerable", "nvarchar(max)", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumn0)
            Dim valueTypeIListColumn0 As New Column("ValueTypeIList", "nvarchar(max)", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("ValueTypeIList", valueTypeIListColumn0)
            Dim valueTypeListColumn0 As New Column("ValueTypeList", "nvarchar(max)", principalDerivedTable) With {
                .IsNullable = True
            }
            principalDerivedTable.Columns.Add("ValueTypeList", valueTypeListColumn0)
            Dim pK_PrincipalDerived As New UniqueConstraint("PK_PrincipalDerived", principalDerivedTable, {idColumn1})
            principalDerivedTable.PrimaryKey = pK_PrincipalDerived
            Dim pK_PrincipalDerivedUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"Id"})
            pK_PrincipalDerived.MappedKeys.Add(pK_PrincipalDerivedUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_PrincipalDerivedUc).Add(pK_PrincipalDerived)
            principalDerivedTable.UniqueConstraints.Add("PK_PrincipalDerived", pK_PrincipalDerived)
            Dim iX_PrincipalDerived_PrincipalDerivedDependentBasebyteId As New TableIndex(
            "IX_PrincipalDerived_PrincipalDerived<DependentBase<byte?>>Id", principalDerivedTable, {principalDerivedDependentBasebyteIdColumn0}, False)
            Dim iX_PrincipalDerived_PrincipalDerivedDependentBasebyteIdIx = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"PrincipalDerivedId"})
            iX_PrincipalDerived_PrincipalDerivedDependentBasebyteId.MappedIndexes.Add(iX_PrincipalDerived_PrincipalDerivedDependentBasebyteIdIx)
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalDerived_PrincipalDerivedDependentBasebyteIdIx).Add(iX_PrincipalDerived_PrincipalDerivedDependentBasebyteId)
            principalDerivedTable.Indexes.Add("IX_PrincipalDerived_PrincipalDerived<DependentBase<byte?>>Id", iX_PrincipalDerived_PrincipalDerivedDependentBasebyteId)
            Dim pIX0 As New TableIndex(
            "PIX", principalDerivedTable, {principalBaseIdColumn0}, True)
            Dim pIX0Ix = RelationalModel.GetIndex(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                "PrincipalIndex")
            pIX0.MappedIndexes.Add(pIX0Ix)
            RelationalModel.GetOrCreateTableIndexes(pIX0Ix).Add(pIX0)
            principalDerivedTable.Indexes.Add("PIX", pIX0)
            relationalModel.Tables.Add(("PrincipalDerived", "TPC"), principalDerivedTable)
            Dim principalDerivedTableMapping As New TableMapping(principalDerived, principalDerivedTable, False)
            principalDerivedTable.AddTypeMapping(principalDerivedTableMapping, False)
            tableMappings1.Add(principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(idColumn1, principalDerived.FindProperty("Id"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(enum1Column0, principalDerived.FindProperty("Enum1"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(enum2Column0, principalDerived.FindProperty("Enum2"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum1Column0, principalDerived.FindProperty("FlagsEnum1"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(flagsEnum2Column0, principalDerived.FindProperty("FlagsEnum2"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(principalBaseIdColumn0, principalDerived.FindProperty("PrincipalBaseId"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(principalDerivedDependentBasebyteIdColumn0, principalDerived.FindProperty("PrincipalDerivedId"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(refTypeArrayColumn0, principalDerived.FindProperty("RefTypeArray"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn0, principalDerived.FindProperty("RefTypeEnumerable"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(refTypeIListColumn0, principalDerived.FindProperty("RefTypeIList"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(refTypeListColumn0, principalDerived.FindProperty("RefTypeList"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn0, principalDerived.FindProperty("ValueTypeArray"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn0, principalDerived.FindProperty("ValueTypeEnumerable"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeIListColumn0, principalDerived.FindProperty("ValueTypeIList"), principalDerivedTableMapping)
            RelationalModel.CreateColumnMapping(valueTypeListColumn0, principalDerived.FindProperty("ValueTypeList"), principalDerivedTableMapping)

            Dim viewMappings0 As New List(Of ViewMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings0)
            Dim principalDerivedViewView As New View("PrincipalDerivedView", "TPC", relationalModel)
            Dim enum1ViewColumn0 As New ViewColumn("Enum1", "int", principalDerivedViewView)
            principalDerivedViewView.Columns.Add("Enum1", enum1ViewColumn0)
            Dim enum2ViewColumn0 As New ViewColumn("Enum2", "int", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("Enum2", enum2ViewColumn0)
            Dim flagsEnum1ViewColumn0 As New ViewColumn("FlagsEnum1", "int", principalDerivedViewView)
            principalDerivedViewView.Columns.Add("FlagsEnum1", flagsEnum1ViewColumn0)
            Dim flagsEnum2ViewColumn0 As New ViewColumn("FlagsEnum2", "int", principalDerivedViewView)
            principalDerivedViewView.Columns.Add("FlagsEnum2", flagsEnum2ViewColumn0)
            Dim idViewColumn0 As New ViewColumn("Id", "bigint", principalDerivedViewView)
            principalDerivedViewView.Columns.Add("Id", idViewColumn0)
            Dim principalBaseIdViewColumn0 As New ViewColumn("PrincipalBaseId", "bigint", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("PrincipalBaseId", principalBaseIdViewColumn0)
            Dim principalDerivedIdViewColumn0 As New ViewColumn("PrincipalDerivedId", "bigint", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("PrincipalDerivedId", principalDerivedIdViewColumn0)
            Dim refTypeArrayViewColumn0 As New ViewColumn("RefTypeArray", "nvarchar(max)", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("RefTypeArray", refTypeArrayViewColumn0)
            Dim refTypeEnumerableViewColumn0 As New ViewColumn("RefTypeEnumerable", "nvarchar(max)", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("RefTypeEnumerable", refTypeEnumerableViewColumn0)
            Dim refTypeIListViewColumn0 As New ViewColumn("RefTypeIList", "nvarchar(max)", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("RefTypeIList", refTypeIListViewColumn0)
            Dim refTypeListViewColumn0 As New ViewColumn("RefTypeList", "nvarchar(max)", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("RefTypeList", refTypeListViewColumn0)
            Dim valueTypeArrayViewColumn0 As New ViewColumn("ValueTypeArray", "nvarchar(max)", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("ValueTypeArray", valueTypeArrayViewColumn0)
            Dim valueTypeEnumerableViewColumn0 As New ViewColumn("ValueTypeEnumerable", "nvarchar(max)", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableViewColumn0)
            Dim valueTypeIListViewColumn0 As New ViewColumn("ValueTypeIList", "nvarchar(max)", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("ValueTypeIList", valueTypeIListViewColumn0)
            Dim valueTypeListViewColumn0 As New ViewColumn("ValueTypeList", "nvarchar(max)", principalDerivedViewView) With {
                .IsNullable = True
            }
            principalDerivedViewView.Columns.Add("ValueTypeList", valueTypeListViewColumn0)
            relationalModel.Views.Add(("PrincipalDerivedView", "TPC"), principalDerivedViewView)
            Dim principalDerivedViewViewMapping As New ViewMapping(principalDerived, principalDerivedViewView, False)
            principalDerivedViewView.AddTypeMapping(principalDerivedViewViewMapping, False)
            viewMappings0.Add(principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(idViewColumn0, principalDerived.FindProperty("Id"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(enum1ViewColumn0, principalDerived.FindProperty("Enum1"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(enum2ViewColumn0, principalDerived.FindProperty("Enum2"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(flagsEnum1ViewColumn0, principalDerived.FindProperty("FlagsEnum1"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(flagsEnum2ViewColumn0, principalDerived.FindProperty("FlagsEnum2"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(principalBaseIdViewColumn0, principalDerived.FindProperty("PrincipalBaseId"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(principalDerivedIdViewColumn0, principalDerived.FindProperty("PrincipalDerivedId"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeArrayViewColumn0, principalDerived.FindProperty("RefTypeArray"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeEnumerableViewColumn0, principalDerived.FindProperty("RefTypeEnumerable"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeIListViewColumn0, principalDerived.FindProperty("RefTypeIList"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(refTypeListViewColumn0, principalDerived.FindProperty("RefTypeList"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeArrayViewColumn0, principalDerived.FindProperty("ValueTypeArray"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeEnumerableViewColumn0, principalDerived.FindProperty("ValueTypeEnumerable"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeIListViewColumn0, principalDerived.FindProperty("ValueTypeIList"), principalDerivedViewViewMapping)
            RelationalModel.CreateViewColumnMapping(valueTypeListViewColumn0, principalDerived.FindProperty("ValueTypeList"), principalDerivedViewViewMapping)

            Dim deleteSprocMappings0 As New List(Of StoredProcedureMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:DeleteStoredProcedureMappings", deleteSprocMappings0)
            Dim derived_DeleteStoreSproc As New StoreStoredProcedure("Derived_Delete", "TPC", relationalModel)
            Dim id_OriginalParameter1 As New StoreStoredProcedureParameter("Id_Original", "bigint", 0, derived_DeleteStoreSproc, System.Data.ParameterDirection.Input)
            derived_DeleteStoreSproc.AddParameter(id_OriginalParameter1)
            derived_DeleteStoreSproc.AddStoredProcedure(DirectCast(principalDerived.GetDeleteStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("Derived_Delete", "TPC"), derived_DeleteStoreSproc)
            Dim derived_DeleteDSproc = DirectCast(principalDerived.GetDeleteStoredProcedure(), IRuntimeStoredProcedure)
            Dim derived_DeleteSprocMapping As New StoredProcedureMapping(principalDerived, derived_DeleteStoreSproc, DirectCast(principalDerived.GetDeleteStoredProcedure(), IRuntimeStoredProcedure), principalDerivedTableMapping, False)
            derived_DeleteStoreSproc.AddTypeMapping(derived_DeleteSprocMapping, False)
            deleteSprocMappings0.Add(derived_DeleteSprocMapping)
            principalDerivedTableMapping.DeleteStoredProcedureMapping = derived_DeleteSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(id_OriginalParameter1, derived_DeleteDSproc.FindParameter("Id_Original"), principalDerived.FindProperty("Id"), derived_DeleteSprocMapping)

            Dim insertSprocMappings0 As New List(Of StoredProcedureMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:InsertStoredProcedureMappings", insertSprocMappings0)
            Dim derived_InsertStoreSproc As New StoreStoredProcedure("Derived_Insert", "TPC", relationalModel)
            Dim principalBaseIdParameter1 As New StoreStoredProcedureParameter("PrincipalBaseId", "bigint", 0, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(principalBaseIdParameter1)
            Dim principalDerivedIdParameter1 As New StoreStoredProcedureParameter("PrincipalDerivedId", "bigint", 1, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(principalDerivedIdParameter1)
            Dim enum1Parameter1 As New StoreStoredProcedureParameter("Enum1", "int", 2, derived_InsertStoreSproc, System.Data.ParameterDirection.Input)
            derived_InsertStoreSproc.AddParameter(enum1Parameter1)
            Dim enum2Parameter1 As New StoreStoredProcedureParameter("Enum2", "int", 3, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(enum2Parameter1)
            Dim flagsEnum1Parameter1 As New StoreStoredProcedureParameter("FlagsEnum1", "int", 4, derived_InsertStoreSproc, System.Data.ParameterDirection.Input)
            derived_InsertStoreSproc.AddParameter(flagsEnum1Parameter1)
            Dim flagsEnum2Parameter1 As New StoreStoredProcedureParameter("FlagsEnum2", "int", 5, derived_InsertStoreSproc, System.Data.ParameterDirection.Input)
            derived_InsertStoreSproc.AddParameter(flagsEnum2Parameter1)
            Dim valueTypeListParameter1 As New StoreStoredProcedureParameter("ValueTypeList", "nvarchar(max)", 6, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(valueTypeListParameter1)
            Dim valueTypeIListParameter1 As New StoreStoredProcedureParameter("ValueTypeIList", "nvarchar(max)", 7, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(valueTypeIListParameter1)
            Dim valueTypeArrayParameter1 As New StoreStoredProcedureParameter("ValueTypeArray", "nvarchar(max)", 8, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(valueTypeArrayParameter1)
            Dim valueTypeEnumerableParameter1 As New StoreStoredProcedureParameter("ValueTypeEnumerable", "nvarchar(max)", 9, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(valueTypeEnumerableParameter1)
            Dim refTypeListParameter1 As New StoreStoredProcedureParameter("RefTypeList", "nvarchar(max)", 10, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(refTypeListParameter1)
            Dim refTypeIListParameter1 As New StoreStoredProcedureParameter("RefTypeIList", "nvarchar(max)", 11, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(refTypeIListParameter1)
            Dim refTypeArrayParameter1 As New StoreStoredProcedureParameter("RefTypeArray", "nvarchar(max)", 12, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(refTypeArrayParameter1)
            Dim refTypeEnumerableParameter1 As New StoreStoredProcedureParameter("RefTypeEnumerable", "nvarchar(max)", 13, derived_InsertStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_InsertStoreSproc.AddParameter(refTypeEnumerableParameter1)
            Dim derivedIdFunctionColumn As New StoreStoredProcedureResultColumn("DerivedId", "bigint", 0, derived_InsertStoreSproc)
            derived_InsertStoreSproc.AddResultColumn(derivedIdFunctionColumn)
            derived_InsertStoreSproc.AddStoredProcedure(DirectCast(principalDerived.GetInsertStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("Derived_Insert", "TPC"), derived_InsertStoreSproc)
            Dim derived_InsertISproc = DirectCast(principalDerived.GetInsertStoredProcedure(), IRuntimeStoredProcedure)
            Dim derived_InsertSprocMapping As New StoredProcedureMapping(principalDerived, derived_InsertStoreSproc, DirectCast(principalDerived.GetInsertStoredProcedure(), IRuntimeStoredProcedure), principalDerivedTableMapping, False)
            derived_InsertStoreSproc.AddTypeMapping(derived_InsertSprocMapping, False)
            insertSprocMappings0.Add(derived_InsertSprocMapping)
            principalDerivedTableMapping.InsertStoredProcedureMapping = derived_InsertSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(enum1Parameter1, derived_InsertISproc.FindParameter("Enum1"), principalDerived.FindProperty("Enum1"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum2Parameter1, derived_InsertISproc.FindParameter("Enum2"), principalDerived.FindProperty("Enum2"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum1Parameter1, derived_InsertISproc.FindParameter("FlagsEnum1"), principalDerived.FindProperty("FlagsEnum1"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum2Parameter1, derived_InsertISproc.FindParameter("FlagsEnum2"), principalDerived.FindProperty("FlagsEnum2"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalBaseIdParameter1, derived_InsertISproc.FindParameter("PrincipalBaseId"), principalDerived.FindProperty("PrincipalBaseId"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalDerivedIdParameter1, derived_InsertISproc.FindParameter("PrincipalDerivedId"), principalDerived.FindProperty("PrincipalDerivedId"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeArrayParameter1, derived_InsertISproc.FindParameter("RefTypeArray"), principalDerived.FindProperty("RefTypeArray"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeEnumerableParameter1, derived_InsertISproc.FindParameter("RefTypeEnumerable"), principalDerived.FindProperty("RefTypeEnumerable"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeIListParameter1, derived_InsertISproc.FindParameter("RefTypeIList"), principalDerived.FindProperty("RefTypeIList"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeListParameter1, derived_InsertISproc.FindParameter("RefTypeList"), principalDerived.FindProperty("RefTypeList"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeArrayParameter1, derived_InsertISproc.FindParameter("ValueTypeArray"), principalDerived.FindProperty("ValueTypeArray"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeEnumerableParameter1, derived_InsertISproc.FindParameter("ValueTypeEnumerable"), principalDerived.FindProperty("ValueTypeEnumerable"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeIListParameter1, derived_InsertISproc.FindParameter("ValueTypeIList"), principalDerived.FindProperty("ValueTypeIList"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeListParameter1, derived_InsertISproc.FindParameter("ValueTypeList"), principalDerived.FindProperty("ValueTypeList"), derived_InsertSprocMapping)
            RelationalModel.CreateStoredProcedureResultColumnMapping(derivedIdFunctionColumn, derived_InsertISproc.FindResultColumn("DerivedId"), principalDerived.FindProperty("Id"), derived_InsertSprocMapping)

            Dim updateSprocMappings0 As New List(Of StoredProcedureMapping)()
            principalDerived.SetRuntimeAnnotation("Relational:UpdateStoredProcedureMappings", updateSprocMappings0)
            Dim derived_UpdateStoreSproc As New StoreStoredProcedure("Derived_Update", "Derived", relationalModel)
            Dim principalBaseIdParameter2 As New StoreStoredProcedureParameter("PrincipalBaseId", "bigint", 0, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(principalBaseIdParameter2)
            Dim principalDerivedIdParameter2 As New StoreStoredProcedureParameter("PrincipalDerivedId", "bigint", 1, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(principalDerivedIdParameter2)
            Dim enum1Parameter2 As New StoreStoredProcedureParameter("Enum1", "int", 2, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            derived_UpdateStoreSproc.AddParameter(enum1Parameter2)
            Dim enum2Parameter2 As New StoreStoredProcedureParameter("Enum2", "int", 3, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(enum2Parameter2)
            Dim flagsEnum1Parameter2 As New StoreStoredProcedureParameter("FlagsEnum1", "int", 4, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            derived_UpdateStoreSproc.AddParameter(flagsEnum1Parameter2)
            Dim flagsEnum2Parameter2 As New StoreStoredProcedureParameter("FlagsEnum2", "int", 5, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            derived_UpdateStoreSproc.AddParameter(flagsEnum2Parameter2)
            Dim valueTypeListParameter2 As New StoreStoredProcedureParameter("ValueTypeList", "nvarchar(max)", 6, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(valueTypeListParameter2)
            Dim valueTypeIListParameter2 As New StoreStoredProcedureParameter("ValueTypeIList", "nvarchar(max)", 7, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(valueTypeIListParameter2)
            Dim valueTypeArrayParameter2 As New StoreStoredProcedureParameter("ValueTypeArray", "nvarchar(max)", 8, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(valueTypeArrayParameter2)
            Dim valueTypeEnumerableParameter2 As New StoreStoredProcedureParameter("ValueTypeEnumerable", "nvarchar(max)", 9, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(valueTypeEnumerableParameter2)
            Dim refTypeListParameter2 As New StoreStoredProcedureParameter("RefTypeList", "nvarchar(max)", 10, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(refTypeListParameter2)
            Dim refTypeIListParameter2 As New StoreStoredProcedureParameter("RefTypeIList", "nvarchar(max)", 11, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(refTypeIListParameter2)
            Dim refTypeArrayParameter2 As New StoreStoredProcedureParameter("RefTypeArray", "nvarchar(max)", 12, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(refTypeArrayParameter2)
            Dim refTypeEnumerableParameter2 As New StoreStoredProcedureParameter("RefTypeEnumerable", "nvarchar(max)", 13, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input) With {
                .IsNullable = True
            }
            derived_UpdateStoreSproc.AddParameter(refTypeEnumerableParameter2)
            Dim id_OriginalParameter2 As New StoreStoredProcedureParameter("Id_Original", "bigint", 14, derived_UpdateStoreSproc, System.Data.ParameterDirection.Input)
            derived_UpdateStoreSproc.AddParameter(id_OriginalParameter2)
            derived_UpdateStoreSproc.AddStoredProcedure(DirectCast(principalDerived.GetUpdateStoredProcedure(), IRuntimeStoredProcedure))
            relationalModel.StoredProcedures.Add(("Derived_Update", "Derived"), derived_UpdateStoreSproc)
            Dim derived_UpdateUSproc = DirectCast(principalDerived.GetUpdateStoredProcedure(), IRuntimeStoredProcedure)
            Dim derived_UpdateSprocMapping As New StoredProcedureMapping(principalDerived, derived_UpdateStoreSproc, DirectCast(principalDerived.GetUpdateStoredProcedure(), IRuntimeStoredProcedure), principalDerivedTableMapping, False)
            derived_UpdateStoreSproc.AddTypeMapping(derived_UpdateSprocMapping, False)
            updateSprocMappings0.Add(derived_UpdateSprocMapping)
            principalDerivedTableMapping.UpdateStoredProcedureMapping = derived_UpdateSprocMapping
            RelationalModel.CreateStoredProcedureParameterMapping(id_OriginalParameter2, derived_UpdateUSproc.FindParameter("Id_Original"), principalDerived.FindProperty("Id"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum1Parameter2, derived_UpdateUSproc.FindParameter("Enum1"), principalDerived.FindProperty("Enum1"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(enum2Parameter2, derived_UpdateUSproc.FindParameter("Enum2"), principalDerived.FindProperty("Enum2"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum1Parameter2, derived_UpdateUSproc.FindParameter("FlagsEnum1"), principalDerived.FindProperty("FlagsEnum1"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(flagsEnum2Parameter2, derived_UpdateUSproc.FindParameter("FlagsEnum2"), principalDerived.FindProperty("FlagsEnum2"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalBaseIdParameter2, derived_UpdateUSproc.FindParameter("PrincipalBaseId"), principalDerived.FindProperty("PrincipalBaseId"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(principalDerivedIdParameter2, derived_UpdateUSproc.FindParameter("PrincipalDerivedId"), principalDerived.FindProperty("PrincipalDerivedId"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeArrayParameter2, derived_UpdateUSproc.FindParameter("RefTypeArray"), principalDerived.FindProperty("RefTypeArray"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeEnumerableParameter2, derived_UpdateUSproc.FindParameter("RefTypeEnumerable"), principalDerived.FindProperty("RefTypeEnumerable"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeIListParameter2, derived_UpdateUSproc.FindParameter("RefTypeIList"), principalDerived.FindProperty("RefTypeIList"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(refTypeListParameter2, derived_UpdateUSproc.FindParameter("RefTypeList"), principalDerived.FindProperty("RefTypeList"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeArrayParameter2, derived_UpdateUSproc.FindParameter("ValueTypeArray"), principalDerived.FindProperty("ValueTypeArray"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeEnumerableParameter2, derived_UpdateUSproc.FindParameter("ValueTypeEnumerable"), principalDerived.FindProperty("ValueTypeEnumerable"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeIListParameter2, derived_UpdateUSproc.FindParameter("ValueTypeIList"), principalDerived.FindProperty("ValueTypeIList"), derived_UpdateSprocMapping)
            RelationalModel.CreateStoredProcedureParameterMapping(valueTypeListParameter2, derived_UpdateUSproc.FindParameter("ValueTypeList"), principalDerived.FindProperty("ValueTypeList"), derived_UpdateSprocMapping)
            Dim fK_DependentBasebyte_PrincipalDerived_PrincipalId As New ForeignKeyConstraint(
                "FK_DependentBase<byte?>_PrincipalDerived_PrincipalId", dependentBasebyteTable, principalDerivedTable,
                {principalIdColumn},
                principalDerivedTable.FindUniqueConstraint("PK_PrincipalDerived"), ReferentialAction.NoAction)
            Dim fK_DependentBasebyte_PrincipalDerived_PrincipalIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                {"PrincipalId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id"})
            fK_DependentBasebyte_PrincipalDerived_PrincipalId.MappedForeignKeys.Add(fK_DependentBasebyte_PrincipalDerived_PrincipalIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DependentBasebyte_PrincipalDerived_PrincipalIdFk).Add(fK_DependentBasebyte_PrincipalDerived_PrincipalId)
            dependentBasebyteTable.ForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalDerived_PrincipalId)
            principalDerivedTable.ReferencingForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalDerived_PrincipalId)
            Dim fK_PrincipalBase_PrincipalDerived_PrincipalDerivedDependentBasebyteId As New ForeignKeyConstraint(
                "FK_PrincipalBase_PrincipalDerived_PrincipalDerived<DependentBase<byte?>>Id", principalBaseTable, principalDerivedTable,
                {principalDerivedDependentBasebyteIdColumn},
                principalDerivedTable.FindUniqueConstraint("PK_PrincipalDerived"), ReferentialAction.NoAction)
            Dim fK_PrincipalBase_PrincipalDerived_PrincipalDerivedDependentBasebyteIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"PrincipalDerivedId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id"})
            fK_PrincipalBase_PrincipalDerived_PrincipalDerivedDependentBasebyteId.MappedForeignKeys.Add(fK_PrincipalBase_PrincipalDerived_PrincipalDerivedDependentBasebyteIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalBase_PrincipalDerived_PrincipalDerivedDependentBasebyteIdFk).Add(fK_PrincipalBase_PrincipalDerived_PrincipalDerivedDependentBasebyteId)
            principalBaseTable.ForeignKeyConstraints.Add(fK_PrincipalBase_PrincipalDerived_PrincipalDerivedDependentBasebyteId)
            principalDerivedTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalBase_PrincipalDerived_PrincipalDerivedDependentBasebyteId)
            Dim fK_PrincipalDerived_PrincipalDerived_PrincipalDerivedDependentBasebyteId As New ForeignKeyConstraint(
                "FK_PrincipalDerived_PrincipalDerived_PrincipalDerived<DependentBase<byte?>>Id", principalDerivedTable, principalDerivedTable,
                {principalDerivedDependentBasebyteIdColumn0},
                principalDerivedTable.FindUniqueConstraint("PK_PrincipalDerived"), ReferentialAction.NoAction)
            Dim fK_PrincipalDerived_PrincipalDerived_PrincipalDerivedDependentBasebyteIdFk = RelationalModel.GetForeignKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                {"PrincipalDerivedId"},
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                {"Id"})
            fK_PrincipalDerived_PrincipalDerived_PrincipalDerivedDependentBasebyteId.MappedForeignKeys.Add(fK_PrincipalDerived_PrincipalDerived_PrincipalDerivedDependentBasebyteIdFk)
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalDerived_PrincipalDerived_PrincipalDerivedDependentBasebyteIdFk).Add(fK_PrincipalDerived_PrincipalDerived_PrincipalDerivedDependentBasebyteId)
            principalDerivedTable.ForeignKeyConstraints.Add(fK_PrincipalDerived_PrincipalDerived_PrincipalDerivedDependentBasebyteId)
            principalDerivedTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalDerived_PrincipalDerived_PrincipalDerivedDependentBasebyteId)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal

Namespace TestNamespace
    Friend Partial Class DependentBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Byte?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))),
                keyComparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))),
                providerValueComparer:=New ValueComparer(Of Byte?)(
                    Function(v1 As Nullable(Of Byte), v2 As Nullable(Of Byte)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Byte) = CType(v2, Byte) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Integer), 0),
                    Function(v As Nullable(Of Byte)) If(v.HasValue, CType(CType(v, Byte), Nullable(Of Byte)), CType(Nothing, Nullable(Of Byte)))))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalId = entityType.AddProperty(
                "PrincipalId",
                GetType(Long?),
                nullable:=True)
            principalId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))
            principalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Dim index = entityType.AddIndex(
                {principalId},
                unique:=True)

            Return entityType
        End Function

        Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
            Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalId")},
                principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
                principalEntityType,
                deleteBehavior:=DeleteBehavior.ClientCascade,
                unique:=True,
                requiredDependent:=True)

            Dim principal = declaringEntityType.AddNavigation("Principal",
                runtimeForeignKey,
                onDependent:=True,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetProperty("Principal", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)).GetField("_Principal", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Dim dependent = principalEntityType.AddNavigation("Dependent",
                runtimeForeignKey,
                onDependent:=False,
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?)),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Dependent", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Dependent", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

            Return runtimeForeignKey
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", "TPC")
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "DependentBase<byte?>")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Net
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion

Namespace TestNamespace
    Friend Partial Class PrincipalBaseEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalBase",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase),
                baseEntityType,
                discriminatorValue:="PrincipalBase")

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Long?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Id", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Id", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw)
            id.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))

            Dim [overrides] As New StoreObjectDictionary(Of RuntimeRelationalPropertyOverrides)()
            Dim idDerived_Insert As New RuntimeRelationalPropertyOverrides(
                id,
                StoreObjectIdentifier.InsertStoredProcedure("Derived_Insert", "TPC"),
                True,
                "DerivedId")
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.InsertStoredProcedure("Derived_Insert", "TPC"), idDerived_Insert})
            Dim idPrincipalBaseView As New RuntimeRelationalPropertyOverrides(
                id,
                StoreObjectIdentifier.View("PrincipalBaseView", "TPC"),
                False,
                Nothing)
            idPrincipalBaseView.AddAnnotation("foo", "bar2")
            [overrides].GetType().GetMethod("Add").Invoke([overrides], {StoreObjectIdentifier.View("PrincipalBaseView", "TPC"), idPrincipalBaseView})
            id.AddAnnotation("Relational:RelationalOverrides", [overrides])

            id.AddAnnotation("Relational:DefaultValueSql", "NEXT VALUE FOR [TPC].[PrincipalBaseSequence]")
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.Sequence)

            Dim enum1 = entityType.AddProperty(
                "Enum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))
            enum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim enum2 = entityType.AddProperty(
                "Enum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Enum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Enum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            enum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum?)(
                    Function(v1 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), v2 As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) v1.HasValue AndAlso v2.HasValue AndAlso Object.Equals(CType(CType(v1, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object), CType(CType(v2, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Object)) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum).GetHashCode(), 0),
                    Function(v As Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)) If(v.HasValue, CType(CType(v, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum), Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)), CType(Nothing, Nullable(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)))),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AnEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AnEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AnEnum))))
            enum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum1 = entityType.AddProperty(
                "FlagsEnum1",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum1", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum1", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum1.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim flagsEnum2 = entityType.AddProperty(
                "FlagsEnum2",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("FlagsEnum2", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_FlagsEnum2", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                sentinel:=CType(0, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))
            flagsEnum2.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                keyComparer:=New ValueComparer(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)(
                    Function(v1 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, v2 As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) Object.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v.GetHashCode(),
                    Function(v As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                converter:=New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                    Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                    JsonInt32ReaderWriter.Instance,
                    New ValueConverter(Of VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum, Integer)(
                        Function(value As VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum) CType(value, Integer),
                        Function(value As Integer) CType(value, VisualBasicRuntimeModelCodeGeneratorTest.AFlagsEnum))))
            flagsEnum2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalBaseId = entityType.AddProperty(
                "PrincipalBaseId",
                GetType(Long?),
                nullable:=True)
            principalBaseId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))
            principalBaseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim principalDerivedId = entityType.AddProperty(
                "PrincipalDerivedId",
                GetType(Long?),
                nullable:=True)
            principalDerivedId.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))))
            principalDerivedId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim refTypeArray = entityType.AddProperty(
                "RefTypeArray",
                GetType(IPAddress()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            refTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                    Function(v As IPAddress) v.GetHashCode(),
                    Function(v As IPAddress) v)),
            keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
                Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
                Function(v As IPAddress) v.GetHashCode(),
                Function(v As IPAddress) v)),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(max)",
            dbType:=System.Data.DbType.String),
        converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
            New JsonConvertedValueReaderWriter(Of IPAddress, String)(
                JsonStringReaderWriter.Instance,
                New ValueConverter(Of IPAddress, String)(
                    Function(v As IPAddress) v.ToString(),
                    Function(v As String) IPAddress.Parse(v))))),
    storeTypePostfix:=StoreTypePostfix.None,
    jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IPAddress(), IPAddress(), IPAddress)(
        New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))),
    elementMapping:=SqlServerStringTypeMapping.Default.Clone(
        comparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        keyComparer:=New ValueComparer(Of IPAddress)(
            Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
            Function(v As IPAddress) v.GetHashCode(),
            Function(v As IPAddress) v),
        providerValueComparer:=New ValueComparer(Of String)(
            Function(v1 As String, v2 As String) v1 = v2,
            Function(v As String) v.GetHashCode(),
            Function(v As String) v),
        mappingInfo:=New RelationalTypeMappingInfo(
            storeTypeName:="nvarchar(45)",
            size:=45,
            dbType:=System.Data.DbType.String),
        converter:=New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)),
        jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
            JsonStringReaderWriter.Instance,
            New ValueConverter(Of IPAddress, String)(
                Function(v As IPAddress) v.ToString(),
                Function(v As String) IPAddress.Parse(v)))))
refTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeEnumerable = entityType.AddProperty(
    "RefTypeEnumerable",
    GetType(IEnumerable(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeIList = entityType.AddProperty(
    "RefTypeIList",
    GetType(IList(Of String)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v)),
keyComparer:=New ListComparer(Of String)(New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of String)(New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of String), List(Of String), String)(
    JsonStringReaderWriter.Instance),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    keyComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(max)",
        dbType:=System.Data.DbType.String),
    storeTypePostfix:=StoreTypePostfix.None))
refTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim refTypeList = entityType.AddProperty(
    "RefTypeList",
    GetType(List(Of IPAddress)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("RefTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_RefTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
refTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v)),
keyComparer:=New ListComparer(Of IPAddress)(New ValueComparer(Of IPAddress)(
    Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
    Function(v As IPAddress) v.GetHashCode(),
    Function(v As IPAddress) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of IPAddress)(New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v))))),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of IPAddress), List(Of IPAddress), IPAddress)(
    New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))),
elementMapping:=SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    keyComparer:=New ValueComparer(Of IPAddress)(
        Function(v1 As IPAddress, v2 As IPAddress) v1 Is Nothing AndAlso v2 Is Nothing OrElse v1 IsNot Nothing AndAlso v2 IsNot Nothing AndAlso v1.Equals(v2),
        Function(v As IPAddress) v.GetHashCode(),
        Function(v As IPAddress) v),
    providerValueComparer:=New ValueComparer(Of String)(
        Function(v1 As String, v2 As String) v1 = v2,
        Function(v As String) v.GetHashCode(),
        Function(v As String) v),
    mappingInfo:=New RelationalTypeMappingInfo(
        storeTypeName:="nvarchar(45)",
        size:=45,
        dbType:=System.Data.DbType.String),
    converter:=New ValueConverter(Of IPAddress, String)(
        Function(v As IPAddress) v.ToString(),
        Function(v As String) IPAddress.Parse(v)),
    jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of IPAddress, String)(
        JsonStringReaderWriter.Instance,
        New ValueConverter(Of IPAddress, String)(
            Function(v As IPAddress) v.ToString(),
            Function(v As String) IPAddress.Parse(v)))))
refTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeArray = entityType.AddProperty(
    "ValueTypeArray",
    GetType(Date()),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeArray", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeArray", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)),
keyComparer:=New ListComparer(Of Date)(New ValueComparer(Of Date)(
    Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
    Function(v As DateTime) v.GetHashCode(),
    Function(v As DateTime) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Date)(New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of Date(), Date(), Date)(
    JsonDateTimeReaderWriter.Instance),
elementMapping:=SqlServerDateTimeTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    keyComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v),
    providerValueComparer:=New ValueComparer(Of Date)(
        Function(v1 As DateTime, v2 As DateTime) v1.Equals(v2),
        Function(v As DateTime) v.GetHashCode(),
        Function(v As DateTime) v)))
valueTypeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeEnumerable = entityType.AddProperty(
    "ValueTypeEnumerable",
    GetType(IEnumerable(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeEnumerable", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeEnumerable", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeEnumerable.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IEnumerable(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeEnumerable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeIList = entityType.AddProperty(
    "ValueTypeIList",
    GetType(IList(Of Byte)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeIList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeIList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeIList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)),
keyComparer:=New ListComparer(Of Byte)(New ValueComparer(Of Byte)(
    Function(v1 As Byte, v2 As Byte) v1 = v2,
    Function(v As Byte) CType(v, Integer),
    Function(v As Byte) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Byte)(New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of IList(Of Byte), List(Of Byte), Byte)(
    JsonByteReaderWriter.Instance),
elementMapping:=SqlServerByteTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    keyComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v),
    providerValueComparer:=New ValueComparer(Of Byte)(
        Function(v1 As Byte, v2 As Byte) v1 = v2,
        Function(v As Byte) CType(v, Integer),
        Function(v As Byte) v)))
valueTypeIList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim valueTypeList = entityType.AddProperty(
    "ValueTypeList",
    GetType(List(Of Short)),
    propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("ValueTypeList", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_ValueTypeList", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
    nullable:=True)
valueTypeList.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
    comparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)),
keyComparer:=New ListComparer(Of Short)(New ValueComparer(Of Short)(
    Function(v1 As Short, v2 As Short) v1 = v2,
    Function(v As Short) CType(v, Integer),
    Function(v As Short) v)),
providerValueComparer:=New ValueComparer(Of String)(
    Function(v1 As String, v2 As String) v1 = v2,
    Function(v As String) v.GetHashCode(),
    Function(v As String) v),
mappingInfo:=New RelationalTypeMappingInfo(
    storeTypeName:="nvarchar(max)",
    dbType:=System.Data.DbType.String),
converter:=New CollectionToJsonStringConverter(Of Short)(New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance)),
storeTypePostfix:=StoreTypePostfix.None,
jsonValueReaderWriter:=New JsonCollectionReaderWriter(Of List(Of Short), List(Of Short), Short)(
    JsonInt16ReaderWriter.Instance),
elementMapping:=SqlServerShortTypeMapping.Default.Clone(
    comparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    keyComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v),
    providerValueComparer:=New ValueComparer(Of Short)(
        Function(v1 As Short, v2 As Short) v1 = v2,
        Function(v As Short) CType(v, Integer),
        Function(v As Short) v)))
valueTypeList.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

Dim key = entityType.AddKey(
    {id})
entityType.SetPrimaryKey(key)

Dim index = entityType.AddIndex(
    {principalDerivedId})

Dim principalIndex = entityType.AddIndex(
    {principalBaseId},
    name:="PrincipalIndex",
    unique:=True)
principalIndex.AddAnnotation("Relational:Name", "PIX")

Return entityType
End Function

Public Shared Function CreateForeignKey1(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
    Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalBaseId")},
        principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
        principalEntityType)

    Dim deriveds = principalEntityType.AddNavigation("Deriveds",
        runtimeForeignKey,
        onDependent:=False,
        GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
        propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty("Deriveds", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase).GetField("_Deriveds", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

    Return runtimeForeignKey
End Function

Public Shared Function CreateForeignKey2(declaringEntityType As RuntimeEntityType, principalEntityType As RuntimeEntityType) As RuntimeForeignKey
    Dim runtimeForeignKey = declaringEntityType.AddForeignKey({declaringEntityType.FindProperty("PrincipalDerivedId")},
        principalEntityType.FindKey({principalEntityType.FindProperty("Id")}),
        principalEntityType)

    Dim principals = principalEntityType.AddNavigation("Principals",
        runtimeForeignKey,
        onDependent:=False,
        GetType(ICollection(Of VisualBasicRuntimeModelCodeGeneratorTest.PrincipalBase)),
        propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetProperty("Principals", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
        fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))).GetField("_Principals", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly))

    Return runtimeForeignKey
End Function

Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
    Dim insertSproc As New RuntimeStoredProcedure(
        entityType,
        "PrincipalBase_Insert",
        "TPC",
        False)

    Dim principalBaseId = insertSproc.AddParameter(
        "PrincipalBaseId", System.Data.ParameterDirection.Input, False, "PrincipalBaseId", False)
    Dim principalDerivedId = insertSproc.AddParameter(
        "PrincipalDerivedId", System.Data.ParameterDirection.Input, False, "PrincipalDerivedId", False)
    Dim enum1 = insertSproc.AddParameter(
        "Enum1", System.Data.ParameterDirection.Input, False, "Enum1", False)
    Dim enum2 = insertSproc.AddParameter(
        "Enum2", System.Data.ParameterDirection.Input, False, "Enum2", False)
    Dim flagsEnum1 = insertSproc.AddParameter(
        "FlagsEnum1", System.Data.ParameterDirection.Input, False, "FlagsEnum1", False)
    Dim flagsEnum2 = insertSproc.AddParameter(
        "FlagsEnum2", System.Data.ParameterDirection.Input, False, "FlagsEnum2", False)
    Dim valueTypeList = insertSproc.AddParameter(
        "ValueTypeList", System.Data.ParameterDirection.Input, False, "ValueTypeList", False)
    Dim valueTypeIList = insertSproc.AddParameter(
        "ValueTypeIList", System.Data.ParameterDirection.Input, False, "ValueTypeIList", False)
    Dim valueTypeArray = insertSproc.AddParameter(
        "ValueTypeArray", System.Data.ParameterDirection.Input, False, "ValueTypeArray", False)
    Dim valueTypeEnumerable = insertSproc.AddParameter(
        "ValueTypeEnumerable", System.Data.ParameterDirection.Input, False, "ValueTypeEnumerable", False)
    Dim refTypeList = insertSproc.AddParameter(
        "RefTypeList", System.Data.ParameterDirection.Input, False, "RefTypeList", False)
    Dim refTypeIList = insertSproc.AddParameter(
        "RefTypeIList", System.Data.ParameterDirection.Input, False, "RefTypeIList", False)
    Dim refTypeArray = insertSproc.AddParameter(
        "RefTypeArray", System.Data.ParameterDirection.Input, False, "RefTypeArray", False)
    Dim refTypeEnumerable = insertSproc.AddParameter(
        "RefTypeEnumerable", System.Data.ParameterDirection.Input, False, "RefTypeEnumerable", False)
    Dim id = insertSproc.AddParameter(
        "BaseId", System.Data.ParameterDirection.Output, False, "Id", False)
    id.AddAnnotation("foo", "bar")
    insertSproc.AddAnnotation("foo", "bar1")
    entityType.AddAnnotation("Relational:InsertStoredProcedure", insertSproc)

    Dim deleteSproc As New RuntimeStoredProcedure(
        entityType,
        "PrincipalBase_Delete",
        "TPC",
        True)

    Dim id0 = deleteSproc.AddParameter(
        "Id_Original", System.Data.ParameterDirection.Input, False, "Id", True)
    entityType.AddAnnotation("Relational:DeleteStoredProcedure", deleteSproc)

    Dim updateSproc As New RuntimeStoredProcedure(
        entityType,
        "PrincipalBase_Update",
        "TPC",
        False)

    Dim principalBaseId0 = updateSproc.AddParameter(
        "PrincipalBaseId", System.Data.ParameterDirection.Input, False, "PrincipalBaseId", False)
    Dim principalDerivedId0 = updateSproc.AddParameter(
        "PrincipalDerivedId", System.Data.ParameterDirection.Input, False, "PrincipalDerivedId", False)
    Dim enum10 = updateSproc.AddParameter(
        "Enum1", System.Data.ParameterDirection.Input, False, "Enum1", False)
    Dim enum20 = updateSproc.AddParameter(
        "Enum2", System.Data.ParameterDirection.Input, False, "Enum2", False)
    Dim flagsEnum10 = updateSproc.AddParameter(
        "FlagsEnum1", System.Data.ParameterDirection.Input, False, "FlagsEnum1", False)
    Dim flagsEnum20 = updateSproc.AddParameter(
        "FlagsEnum2", System.Data.ParameterDirection.Input, False, "FlagsEnum2", False)
    Dim valueTypeList0 = updateSproc.AddParameter(
        "ValueTypeList", System.Data.ParameterDirection.Input, False, "ValueTypeList", False)
    Dim valueTypeIList0 = updateSproc.AddParameter(
        "ValueTypeIList", System.Data.ParameterDirection.Input, False, "ValueTypeIList", False)
    Dim valueTypeArray0 = updateSproc.AddParameter(
        "ValueTypeArray", System.Data.ParameterDirection.Input, False, "ValueTypeArray", False)
    Dim valueTypeEnumerable0 = updateSproc.AddParameter(
        "ValueTypeEnumerable", System.Data.ParameterDirection.Input, False, "ValueTypeEnumerable", False)
    Dim refTypeList0 = updateSproc.AddParameter(
        "RefTypeList", System.Data.ParameterDirection.Input, False, "RefTypeList", False)
    Dim refTypeIList0 = updateSproc.AddParameter(
        "RefTypeIList", System.Data.ParameterDirection.Input, False, "RefTypeIList", False)
    Dim refTypeArray0 = updateSproc.AddParameter(
        "RefTypeArray", System.Data.ParameterDirection.Input, False, "RefTypeArray", False)
    Dim refTypeEnumerable0 = updateSproc.AddParameter(
        "RefTypeEnumerable", System.Data.ParameterDirection.Input, False, "RefTypeEnumerable", False)
    Dim id1 = updateSproc.AddParameter(
        "Id_Original", System.Data.ParameterDirection.Input, False, "Id", True)
    entityType.AddAnnotation("Relational:UpdateStoredProcedure", updateSproc)

    entityType.AddAnnotation("Relational:FunctionName", Nothing)
    entityType.AddAnnotation("Relational:MappingStrategy", "TPC")
    entityType.AddAnnotation("Relational:Schema", "TPC")
    entityType.AddAnnotation("Relational:SqlQuery", Nothing)
    entityType.AddAnnotation("Relational:TableName", "PrincipalBase")
    entityType.AddAnnotation("Relational:ViewDefinitionSql", Nothing)
    entityType.AddAnnotation("Relational:ViewName", "PrincipalBaseView")
    entityType.AddAnnotation("Relational:ViewSchema", "TPC")

    Customize(entityType)
End Sub

Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
End Sub
End Class
End Namespace
]]>.Value

            Dim e3 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class PrincipalDerivedEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+PrincipalDerived<EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.PrincipalDerived(Of VisualBasicRuntimeModelCodeGeneratorTest.DependentBase(Of Byte?))),
                baseEntityType,
                discriminatorValue:="PrincipalDerived<DependentBase<byte?>>")

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            Dim insertSproc As New RuntimeStoredProcedure(
                entityType,
                "Derived_Insert",
                "TPC",
                False)

            Dim principalBaseId = insertSproc.AddParameter(
                "PrincipalBaseId", System.Data.ParameterDirection.Input, False, "PrincipalBaseId", False)
            Dim principalDerivedId = insertSproc.AddParameter(
                "PrincipalDerivedId", System.Data.ParameterDirection.Input, False, "PrincipalDerivedId", False)
            Dim enum1 = insertSproc.AddParameter(
                "Enum1", System.Data.ParameterDirection.Input, False, "Enum1", False)
            Dim enum2 = insertSproc.AddParameter(
                "Enum2", System.Data.ParameterDirection.Input, False, "Enum2", False)
            Dim flagsEnum1 = insertSproc.AddParameter(
                "FlagsEnum1", System.Data.ParameterDirection.Input, False, "FlagsEnum1", False)
            Dim flagsEnum2 = insertSproc.AddParameter(
                "FlagsEnum2", System.Data.ParameterDirection.Input, False, "FlagsEnum2", False)
            Dim valueTypeList = insertSproc.AddParameter(
                "ValueTypeList", System.Data.ParameterDirection.Input, False, "ValueTypeList", False)
            Dim valueTypeIList = insertSproc.AddParameter(
                "ValueTypeIList", System.Data.ParameterDirection.Input, False, "ValueTypeIList", False)
            Dim valueTypeArray = insertSproc.AddParameter(
                "ValueTypeArray", System.Data.ParameterDirection.Input, False, "ValueTypeArray", False)
            Dim valueTypeEnumerable = insertSproc.AddParameter(
                "ValueTypeEnumerable", System.Data.ParameterDirection.Input, False, "ValueTypeEnumerable", False)
            Dim refTypeList = insertSproc.AddParameter(
                "RefTypeList", System.Data.ParameterDirection.Input, False, "RefTypeList", False)
            Dim refTypeIList = insertSproc.AddParameter(
                "RefTypeIList", System.Data.ParameterDirection.Input, False, "RefTypeIList", False)
            Dim refTypeArray = insertSproc.AddParameter(
                "RefTypeArray", System.Data.ParameterDirection.Input, False, "RefTypeArray", False)
            Dim refTypeEnumerable = insertSproc.AddParameter(
                "RefTypeEnumerable", System.Data.ParameterDirection.Input, False, "RefTypeEnumerable", False)
            Dim derivedId = insertSproc.AddResultColumn(
                "DerivedId", False, "Id")
            derivedId.AddAnnotation("foo", "bar3")
            entityType.AddAnnotation("Relational:InsertStoredProcedure", insertSproc)

            Dim deleteSproc As New RuntimeStoredProcedure(
                entityType,
                "Derived_Delete",
                "TPC",
                False)

            Dim id = deleteSproc.AddParameter(
                "Id_Original", System.Data.ParameterDirection.Input, False, "Id", True)
            entityType.AddAnnotation("Relational:DeleteStoredProcedure", deleteSproc)

            Dim updateSproc As New RuntimeStoredProcedure(
                entityType,
                "Derived_Update",
                "Derived",
                False)

            Dim principalBaseId0 = updateSproc.AddParameter(
                "PrincipalBaseId", System.Data.ParameterDirection.Input, False, "PrincipalBaseId", False)
            Dim principalDerivedId0 = updateSproc.AddParameter(
                "PrincipalDerivedId", System.Data.ParameterDirection.Input, False, "PrincipalDerivedId", False)
            Dim enum10 = updateSproc.AddParameter(
                "Enum1", System.Data.ParameterDirection.Input, False, "Enum1", False)
            Dim enum20 = updateSproc.AddParameter(
                "Enum2", System.Data.ParameterDirection.Input, False, "Enum2", False)
            Dim flagsEnum10 = updateSproc.AddParameter(
                "FlagsEnum1", System.Data.ParameterDirection.Input, False, "FlagsEnum1", False)
            Dim flagsEnum20 = updateSproc.AddParameter(
                "FlagsEnum2", System.Data.ParameterDirection.Input, False, "FlagsEnum2", False)
            Dim valueTypeList0 = updateSproc.AddParameter(
                "ValueTypeList", System.Data.ParameterDirection.Input, False, "ValueTypeList", False)
            Dim valueTypeIList0 = updateSproc.AddParameter(
                "ValueTypeIList", System.Data.ParameterDirection.Input, False, "ValueTypeIList", False)
            Dim valueTypeArray0 = updateSproc.AddParameter(
                "ValueTypeArray", System.Data.ParameterDirection.Input, False, "ValueTypeArray", False)
            Dim valueTypeEnumerable0 = updateSproc.AddParameter(
                "ValueTypeEnumerable", System.Data.ParameterDirection.Input, False, "ValueTypeEnumerable", False)
            Dim refTypeList0 = updateSproc.AddParameter(
                "RefTypeList", System.Data.ParameterDirection.Input, False, "RefTypeList", False)
            Dim refTypeIList0 = updateSproc.AddParameter(
                "RefTypeIList", System.Data.ParameterDirection.Input, False, "RefTypeIList", False)
            Dim refTypeArray0 = updateSproc.AddParameter(
                "RefTypeArray", System.Data.ParameterDirection.Input, False, "RefTypeArray", False)
            Dim refTypeEnumerable0 = updateSproc.AddParameter(
                "RefTypeEnumerable", System.Data.ParameterDirection.Input, False, "RefTypeEnumerable", False)
            Dim id0 = updateSproc.AddParameter(
                "Id_Original", System.Data.ParameterDirection.Input, False, "Id", True)
            entityType.AddAnnotation("Relational:UpdateStoredProcedure", updateSproc)

            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", "TPC")
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "PrincipalDerived")
            entityType.AddAnnotation("Relational:ViewDefinitionSql", Nothing)
            entityType.AddAnnotation("Relational:ViewName", "PrincipalDerivedView")
            entityType.AddAnnotation("Relational:ViewSchema", "TPC")

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New TpcContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(
                        code,
                        Sub(c) AssertFileContents("TpcContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("TpcContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DependentBaseEntityType.vb", e1, c),
                        Sub(c) AssertFileContents("PrincipalBaseEntityType.vb", e2, c),
                        Sub(c) AssertFileContents("PrincipalDerivedEntityType.vb", e3, c))
                End Sub,
                Sub(Model)
                    Assert.Equal("TPC", Model.GetDefaultSchema())
                    Assert.Null(Model(SqlServerAnnotationNames.MaxDatabaseSize))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetDatabaseMaxSize()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.PerformanceLevelSql))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetPerformanceLevelSql()).Message)
                    Assert.Null(Model(SqlServerAnnotationNames.ServiceTierSql))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() Model.GetServiceTierSql()).Message)

                    Dim PrincipalBase = Model.FindEntityType(GetType(PrincipalBase))
                    Dim id = PrincipalBase.FindProperty("Id")

                    Assert.Equal("Id", id.GetColumnName())
                    Assert.Equal("PrincipalBase", PrincipalBase.GetTableName())
                    Assert.Equal("TPC", PrincipalBase.GetSchema())
                    Assert.Equal("Id", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.Table).Value))
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.Table).Value))

                    Assert.Equal("PrincipalBaseView", PrincipalBase.GetViewName())
                    Assert.Equal("TPC", PrincipalBase.GetViewSchema())
                    Assert.Equal("Id", id.GetColumnName(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.View).Value))
                    Assert.Equal(
                        "bar2",
                        id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.View).Value)("foo"))

                    Dim principalBaseId = PrincipalBase.FindProperty("PrincipalBaseId")

                    Dim alternateIndex = PrincipalBase.GetIndexes().Last()
                    Assert.Same(principalBaseId, alternateIndex.Properties.Single())
                    Assert.True(alternateIndex.IsUnique)
                    Assert.Equal("PrincipalIndex", alternateIndex.Name)
                    Assert.Equal("PIX", alternateIndex.GetDatabaseName())
                    Assert.Null(alternateIndex(RelationalAnnotationNames.Filter))
                    Assert.Null(alternateIndex.GetFilter())
                    Assert.Null(alternateIndex(SqlServerAnnotationNames.Clustered))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() alternateIndex.IsClustered()).Message)
                    Assert.Null(alternateIndex(SqlServerAnnotationNames.CreatedOnline))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() alternateIndex.IsCreatedOnline()).Message)
                    Assert.Null(alternateIndex(SqlServerAnnotationNames.FillFactor))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() alternateIndex.GetFillFactor()).Message)
                    Assert.Null(alternateIndex(SqlServerAnnotationNames.Include))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Function() alternateIndex.GetIncludeProperties()).Message)
                    Assert.Null(alternateIndex(SqlServerAnnotationNames.SortInTempDb))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() alternateIndex.GetSortInTempDb()).Message)
                    Assert.Null(alternateIndex(SqlServerAnnotationNames.DataCompression))
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() alternateIndex.GetDataCompression()).Message)

                    Assert.Equal({alternateIndex}, principalBaseId.GetContainingIndexes())

                    Dim insertSproc = PrincipalBase.GetInsertStoredProcedure()
                    Assert.Equal("PrincipalBase_Insert", insertSproc.Name)
                    Assert.Equal("TPC", insertSproc.Schema)
                    Assert.Equal(
                        {"PrincipalBaseId", "PrincipalDerivedId", "Enum1", "Enum2", "FlagsEnum1", "FlagsEnum2", "ValueTypeList", "ValueTypeIList", "ValueTypeArray", "ValueTypeEnumerable", "RefTypeList", "RefTypeIList", "RefTypeArray", "RefTypeEnumerable", "Id"},
                        insertSproc.Parameters.Select(Function(p) p.PropertyName))
                    Assert.Empty(insertSproc.ResultColumns)
                    Assert.False(insertSproc.IsRowsAffectedReturned)
                    Assert.Equal("bar1", insertSproc("foo"))
                    Assert.Same(PrincipalBase, insertSproc.EntityType)
                    Assert.Equal("BaseId", insertSproc.Parameters.Last().Name)
                    Assert.Equal("bar", insertSproc.Parameters.Last()("foo"))
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.InsertStoredProcedure).Value))

                    Dim updateSproc = PrincipalBase.GetUpdateStoredProcedure()
                    Assert.Equal("PrincipalBase_Update", updateSproc.Name)
                    Assert.Equal("TPC", updateSproc.Schema)
                    Assert.Equal(
                        {"PrincipalBaseId", "PrincipalDerivedId", "Enum1", "Enum2", "FlagsEnum1", "FlagsEnum2", "ValueTypeList", "ValueTypeIList", "ValueTypeArray", "ValueTypeEnumerable", "RefTypeList", "RefTypeIList", "RefTypeArray", "RefTypeEnumerable", "Id"},
                        updateSproc.Parameters.Select(Function(p) p.PropertyName))
                    Assert.Empty(updateSproc.ResultColumns)
                    Assert.False(updateSproc.IsRowsAffectedReturned)
                    Assert.Empty(updateSproc.GetAnnotations())
                    Assert.Same(PrincipalBase, updateSproc.EntityType)
                    Assert.Equal("Id_Original", updateSproc.Parameters.Last().Name)
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.UpdateStoredProcedure).Value))

                    Dim deleteSproc = PrincipalBase.GetDeleteStoredProcedure()
                    Assert.Equal("PrincipalBase_Delete", deleteSproc.Name)
                    Assert.Equal("TPC", deleteSproc.Schema)
                    Assert.Equal({"Id_Original"}, deleteSproc.Parameters.Select(Function(p) p.Name))
                    Assert.Empty(deleteSproc.ResultColumns)
                    Assert.True(deleteSproc.IsRowsAffectedReturned)
                    Assert.Same(PrincipalBase, deleteSproc.EntityType)
                    Assert.Equal("Id_Original", deleteSproc.Parameters.Last().Name)
                    Assert.Null(id.FindOverrides(StoreObjectIdentifier.Create(PrincipalBase, StoreObjectType.DeleteStoredProcedure).Value))

                    Assert.Equal("PrincipalBase", PrincipalBase.GetDiscriminatorValue())
                    Assert.Null(PrincipalBase.FindDiscriminatorProperty())
                    Assert.Equal("TPC", PrincipalBase.GetMappingStrategy())

                    Dim selfRefNavigation = PrincipalBase.GetDeclaredNavigations().Last()
                    Assert.Equal("Deriveds", selfRefNavigation.Name)
                    Assert.True(selfRefNavigation.IsCollection)
                    Assert.False(selfRefNavigation.IsOnDependent)
                    Assert.Equal(PrincipalBase, selfRefNavigation.TargetEntityType)
                    Assert.Null(selfRefNavigation.Inverse)

                    Dim PrincipalDerived = Model.FindEntityType(GetType(PrincipalDerived(Of DependentBase(Of Byte?))))
                    Assert.Equal(PrincipalBase, PrincipalDerived.BaseType)

                    Assert.Equal("PrincipalDerived", PrincipalDerived.GetTableName())
                    Assert.Equal("TPC", PrincipalDerived.GetSchema())
                    Assert.Equal("PrincipalDerivedView", PrincipalDerived.GetViewName())
                    Assert.Equal("TPC", PrincipalBase.GetViewSchema())

                    insertSproc = PrincipalDerived.GetInsertStoredProcedure()
                    Assert.Equal("Derived_Insert", insertSproc.Name)
                    Assert.Equal("TPC", insertSproc.Schema)
                    Assert.Equal(
                        {"PrincipalBaseId", "PrincipalDerivedId", "Enum1", "Enum2", "FlagsEnum1", "FlagsEnum2", "ValueTypeList", "ValueTypeIList", "ValueTypeArray", "ValueTypeEnumerable", "RefTypeList", "RefTypeIList", "RefTypeArray", "RefTypeEnumerable"},
                        insertSproc.Parameters.Select(Function(p) p.PropertyName))
                    Assert.Equal({"Id"}, insertSproc.ResultColumns.Select(Function(p) p.PropertyName))
                    Assert.Null(insertSproc("foo"))
                    Assert.Same(PrincipalDerived, insertSproc.EntityType)
                    Assert.Equal("DerivedId", insertSproc.ResultColumns.Last().Name)
                    Assert.Equal(
                        "DerivedId",
                        id.GetColumnName(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.InsertStoredProcedure).Value))
                    Assert.Equal("bar3", insertSproc.ResultColumns.Last()("foo"))
                    Assert.Null(
                        id.FindOverrides(
                            StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.InsertStoredProcedure).Value)("foo"))

                    updateSproc = PrincipalDerived.GetUpdateStoredProcedure()
                    Assert.Equal("Derived_Update", updateSproc.Name)
                    Assert.Equal("Derived", updateSproc.Schema)
                    Assert.Equal(
                        {"PrincipalBaseId", "PrincipalDerivedId", "Enum1", "Enum2", "FlagsEnum1", "FlagsEnum2", "ValueTypeList", "ValueTypeIList", "ValueTypeArray", "ValueTypeEnumerable", "RefTypeList", "RefTypeIList", "RefTypeArray", "RefTypeEnumerable", "Id"},
                        updateSproc.Parameters.Select(Function(p) p.PropertyName))
                    Assert.Empty(updateSproc.ResultColumns)
                    Assert.Empty(updateSproc.GetAnnotations())
                    Assert.Same(PrincipalDerived, updateSproc.EntityType)
                    Assert.Equal("Id_Original", updateSproc.Parameters.Last().Name)
                    Assert.Null(
                        id.FindOverrides(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.UpdateStoredProcedure).Value))

                    deleteSproc = PrincipalDerived.GetDeleteStoredProcedure()
                    Assert.Equal("Derived_Delete", deleteSproc.Name)
                    Assert.Equal("TPC", deleteSproc.Schema)
                    Assert.Equal({"Id"}, deleteSproc.Parameters.Select(Function(p) p.PropertyName))
                    Assert.Empty(deleteSproc.ResultColumns)
                    Assert.Same(PrincipalDerived, deleteSproc.EntityType)
                    Assert.Equal("Id_Original", deleteSproc.Parameters.Last().Name)
                    Assert.Null(
                        id.FindOverrides(StoreObjectIdentifier.Create(PrincipalDerived, StoreObjectType.DeleteStoredProcedure).Value))

                    Assert.Equal("PrincipalDerived<DependentBase<byte?>>", PrincipalDerived.GetDiscriminatorValue())
                    Assert.Null(PrincipalDerived.FindDiscriminatorProperty())
                    Assert.Equal("TPC", PrincipalDerived.GetMappingStrategy())

                    Assert.Equal(2, PrincipalDerived.GetDeclaredNavigations().Count())
                    Dim derivedNavigation = PrincipalDerived.GetDeclaredNavigations().Last()
                    Assert.Equal("Principals", derivedNavigation.Name)
                    Assert.True(derivedNavigation.IsCollection)
                    Assert.False(derivedNavigation.IsOnDependent)
                    Assert.Equal(PrincipalBase, derivedNavigation.TargetEntityType)
                    Assert.Null(derivedNavigation.Inverse)

                    Dim dependentNavigation = PrincipalDerived.GetDeclaredNavigations().First()
                    Assert.Equal("Dependent", dependentNavigation.Name)
                    Assert.Equal("Dependent", dependentNavigation.PropertyInfo.Name)
                    Assert.Equal("_Dependent", dependentNavigation.FieldInfo.Name)
                    Assert.False(dependentNavigation.IsCollection)
                    Assert.False(dependentNavigation.IsEagerLoaded)
                    Assert.True(dependentNavigation.LazyLoadingEnabled)
                    Assert.False(dependentNavigation.IsOnDependent)
                    Assert.Equal(PrincipalDerived, dependentNavigation.DeclaringEntityType)
                    Assert.Equal("Principal", dependentNavigation.Inverse.Name)

                    Dim dependentForeignKey = dependentNavigation.ForeignKey
                    Assert.False(dependentForeignKey.IsOwnership)
                    Assert.False(dependentForeignKey.IsRequired)
                    Assert.True(dependentForeignKey.IsRequiredDependent)
                    Assert.True(dependentForeignKey.IsUnique)
                    Assert.Same(PrincipalDerived, dependentForeignKey.PrincipalEntityType)
                    Assert.Same(dependentNavigation.Inverse, dependentForeignKey.DependentToPrincipal)
                    Assert.Same(dependentNavigation, dependentForeignKey.PrincipalToDependent)
                    Assert.Equal(DeleteBehavior.ClientCascade, dependentForeignKey.DeleteBehavior)
                    Assert.Equal({"PrincipalId"}, dependentForeignKey.Properties.Select(Function(p) p.Name))

                    Dim DependentBase = dependentNavigation.TargetEntityType

                    Assert.True(DependentBase.GetIsDiscriminatorMappingComplete())
                    Assert.Null(DependentBase.FindDiscriminatorProperty())

                    Assert.Same(dependentForeignKey, DependentBase.GetForeignKeys().Single())

                    Assert.Equal(
                        {
                            DependentBase,
                            PrincipalBase,
                            PrincipalDerived
                        },
                        Model.GetEntityTypes())

                    Dim principalBaseSequence = Model.FindSequence("PrincipalBaseSequence")
                    Assert.Equal("TPC", principalBaseSequence.Schema)
                End Sub,
                GetType(SqlServerNetTopologySuiteDesignTimeServices))
        End Sub

        Public Class TpcContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.HasDefaultSchema("TPC").
                    HasDatabaseMaxSize("20TB").
                    HasPerformanceLevel("High").
                    HasServiceTier("AB")

                modelBuilder.Entity(Of PrincipalBase)(
                    Sub(eb)
                        eb.Ignore(Function(e) e.Owned)

                        eb.UseTpcMappingStrategy()

                        eb.ToTable("PrincipalBase")
                        eb.ToView("PrincipalBaseView", Sub(tb) tb.Property(Function(e) e.Id).HasAnnotation("foo", "bar2"))

                        eb.InsertUsingStoredProcedure(Sub(s) s.
                            HasParameter("PrincipalBaseId").
                            HasParameter("PrincipalDerivedId").
                            HasParameter("Enum1").
                            HasParameter("Enum2").
                            HasParameter("FlagsEnum1").
                            HasParameter("FlagsEnum2").
                            HasParameter("ValueTypeList").
                            HasParameter("ValueTypeIList").
                            HasParameter("ValueTypeArray").
                            HasParameter("ValueTypeEnumerable").
                            HasParameter("RefTypeList").
                            HasParameter("RefTypeIList").
                            HasParameter("RefTypeArray").
                            HasParameter("RefTypeEnumerable").
                            HasParameter(Function(p) p.Id, Function(pb) pb.HasName("BaseId").IsOutput().HasAnnotation("foo", "bar")).
                            HasAnnotation("foo", "bar1"))
                        eb.UpdateUsingStoredProcedure(Sub(s) s.
                            HasParameter("PrincipalBaseId").
                            HasParameter("PrincipalDerivedId").
                            HasParameter("Enum1").
                            HasParameter("Enum2").
                            HasParameter("FlagsEnum1").
                            HasParameter("FlagsEnum2").
                            HasParameter("ValueTypeList").
                            HasParameter("ValueTypeIList").
                            HasParameter("ValueTypeArray").
                            HasParameter("ValueTypeEnumerable").
                            HasParameter("RefTypeList").
                            HasParameter("RefTypeIList").
                            HasParameter("RefTypeArray").
                            HasParameter("RefTypeEnumerable").
                        HasOriginalValueParameter(Function(p) p.Id))
                        eb.DeleteUsingStoredProcedure(Sub(s) s.
                            HasRowsAffectedReturnValue().
                            HasOriginalValueParameter(Function(p) p.Id))

                        eb.HasIndex({"PrincipalBaseId"}, "PrincipalIndex").
                            IsUnique().
                            HasDatabaseName("PIX").
                            IsClustered().
                            HasFilter("AlternateId <> NULL").
                            IsCreatedOnline().
                            HasFillFactor(40).
                            IncludeProperties(Function(e) e.Id).
                            SortInTempDb().
                            UseDataCompression(DataCompressionType.Page)
                    End Sub)

                modelBuilder.Entity(Of PrincipalDerived(Of DependentBase(Of Byte?)))(
                    Sub(eb)
                        eb.HasOne(Function(e) e.Dependent).WithOne(Function(e) e.Principal).
                            HasForeignKey(Of DependentBase(Of Byte?))().
                            OnDelete(DeleteBehavior.ClientCascade)

                        eb.Navigation(Function(e) e.Dependent).IsRequired()

                        eb.ToTable("PrincipalDerived")
                        eb.ToView("PrincipalDerivedView")

                        eb.InsertUsingStoredProcedure("Derived_Insert", Sub(s) s.
                            HasParameter("PrincipalBaseId").
                            HasParameter("PrincipalDerivedId").
                            HasParameter("Enum1").
                            HasParameter("Enum2").
                            HasParameter("FlagsEnum1").
                            HasParameter("FlagsEnum2").
                            HasParameter("ValueTypeList").
                            HasParameter("ValueTypeIList").
                            HasParameter("ValueTypeArray").
                            HasParameter("ValueTypeEnumerable").
                            HasParameter("RefTypeList").
                            HasParameter("RefTypeIList").
                            HasParameter("RefTypeArray").
                            HasParameter("RefTypeEnumerable").
                            HasResultColumn(Function(p) p.Id, Function(pb) pb.HasName("DerivedId").HasAnnotation("foo", "bar3")))
                        eb.UpdateUsingStoredProcedure("Derived_Update", "Derived", Sub(s) s.
                            HasParameter("PrincipalBaseId").
                            HasParameter("PrincipalDerivedId").
                            HasParameter("Enum1").
                            HasParameter("Enum2").
                            HasParameter("FlagsEnum1").
                            HasParameter("FlagsEnum2").
                            HasParameter("ValueTypeList").
                            HasParameter("ValueTypeIList").
                            HasParameter("ValueTypeArray").
                            HasParameter("ValueTypeEnumerable").
                            HasParameter("RefTypeList").
                            HasParameter("RefTypeIList").
                            HasParameter("RefTypeArray").
                            HasParameter("RefTypeEnumerable").
                            HasOriginalValueParameter(Function(p) p.Id))
                        eb.DeleteUsingStoredProcedure("Derived_Delete", Sub(s) s.
                            HasOriginalValueParameter(Function(p) p.Id))
                    End Sub)

                modelBuilder.Entity(Of DependentBase(Of Byte?))(
                    Sub(eb)
                        eb.Property(Of Byte?)("Id")
                    End Sub)
            End Sub
        End Class

        Public Class CustomValueComparer(Of T)
            Inherits ValueComparer(Of T)

            Public Sub New()
                MyBase.New(False)
            End Sub
        End Class

        Public MustInherit Class AbstractBase
            Public Property Id As Integer
        End Class

        Public Enum AnEnum
            A = 1
            B
        End Enum

        Public Enum AFlagsEnum
            A = 1
            B = 2
            C = 4
        End Enum

        Public Class PrincipalBase
            Inherits AbstractBase

            Public Shadows Property Id As Long?
            Public AlternateId As Guid

            Public Property Enum1 As AnEnum
            Public Property Enum2 As AnEnum?
            Public Property FlagsEnum1 As AFlagsEnum
            Public Property FlagsEnum2 As AFlagsEnum

            Public Property ValueTypeList As List(Of Short)
            Public Property ValueTypeIList As IList(Of Byte)
            Public Property ValueTypeArray As DateTime()
            Public Property ValueTypeEnumerable As IEnumerable(Of Byte)

            Public Property RefTypeList As List(Of IPAddress)
            Public Property RefTypeIList As IList(Of String)
            Public Property RefTypeArray As IPAddress()
            Public Property RefTypeEnumerable As IEnumerable(Of String)

            Private _ownedField As OwnedType
            Public Property Owned As OwnedType
                Get
                    Return _ownedField
                End Get
                Set
                    _ownedField = Value
                End Set
            End Property

            Public Property Deriveds As ICollection(Of PrincipalBase)
        End Class

        Public Class PrincipalDerived(Of TDependent)
            Inherits PrincipalBase

            Public Property Dependent As TDependent
            Protected ManyOwned As ICollection(Of OwnedType)
            Public Property Principals As ICollection(Of PrincipalBase)
        End Class

        Public Class DependentBase(Of TKey)
            Inherits AbstractBase

            Public Sub New(id As TKey)
                id = id
            End Sub

            Private Shadows ReadOnly Property Id As TKey
            Public Property Principal As PrincipalDerived(Of DependentBase(Of TKey))
        End Class

        Public Class DependentDerived(Of TKey)
            Inherits DependentBase(Of TKey)

            Public Sub New(Id As TKey)
                MyBase.New(Id)
            End Sub

            Private Property Data As String
        End Class

        Public Class OwnedType
            Implements INotifyPropertyChanged, INotifyPropertyChanging

            Private _context As Microsoft.EntityFrameworkCore.DbContext

            Public Sub New()
            End Sub

            Public Sub New(context As Microsoft.EntityFrameworkCore.DbContext)
                Me.Context = context
            End Sub

            Public Property Context As Microsoft.EntityFrameworkCore.DbContext
                Get
                    Return _context
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("Context"))
                    _context = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs("Context"))
                End Set
            End Property

            Public Property Number As Integer

            <NotMapped>
            Public Property Principal As PrincipalBase

            Private _details As String
            Private _valueTypeList As List(Of Short)
            Private _valueTypeArray As DateTime()
            Private _valueTypeEnumerable As IEnumerable(Of Byte)
            Private _refTypeList As List(Of IPAddress)
            Private _refTypeIList As IList(Of String)
            Private _refTypeArray As IPAddress()
            Private _refTypeEnumerable As IEnumerable(Of String)

            Public Property Details As String
                Get
                    Return _details
                End Get
                Set
                    _details = Value
                End Set
            End Property

            Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
            Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

            Public Property ValueTypeList As List(Of Short)
                Get
                    Return _valueTypeList
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(ValueTypeList)))
                    _valueTypeList = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(NameOf(ValueTypeList)))
                End Set
            End Property

            Public Property ValueTypeIList As IList(Of Byte)

            Public Property ValueTypeArray As DateTime()
                Get
                    Return _valueTypeArray
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(ValueTypeArray)))
                    _valueTypeArray = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(NameOf(ValueTypeArray)))
                End Set
            End Property

            Public Property ValueTypeEnumerable As IEnumerable(Of Byte)
                Get
                    Return _valueTypeEnumerable
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(ValueTypeEnumerable)))
                    _valueTypeEnumerable = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(NameOf(ValueTypeEnumerable)))
                End Set
            End Property

            Public Property RefTypeList As List(Of IPAddress)
                Get
                    Return _refTypeList
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(RefTypeList)))
                    _refTypeList = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(NameOf(RefTypeList)))
                End Set
            End Property

            Public Property RefTypeIList As IList(Of String)
                Get
                    Return _refTypeIList
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(RefTypeIList)))
                    _refTypeIList = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(NameOf(RefTypeIList)))
                End Set
            End Property

            Public Property RefTypeArray As IPAddress()
                Get
                    Return _refTypeArray
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(RefTypeArray)))
                    _refTypeArray = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(NameOf(RefTypeArray)))
                End Set
            End Property

            Public Property RefTypeEnumerable As IEnumerable(Of String)
                Get
                    Return _refTypeEnumerable
                End Get
                Set
                    RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(RefTypeEnumerable)))
                    _refTypeEnumerable = Value
                    RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(NameOf(RefTypeEnumerable)))
                End Set
            End Property
        End Class

        <ConditionalFact>
        Public Sub DbFunctions()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext))>
    Public Partial Class DbFunctionContextModel
        Inherits RuntimeModel

        Private Shared _Instance As DbFunctionContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New DbFunctionContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Public Partial Class DbFunctionContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)
            Dim [object] = ObjectEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)
            ObjectEntityType.CreateAnnotations([object])

            Dim type = Me.AddTypeMappingConfiguration(
                GetType(String),
                maxLength:=256)
            type.AddAnnotation("Relational:IsFixedLength", True)

            Dim functions As New SortedDictionary(Of String, IDbFunction)()
            Dim getCount As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)",
                Me,
                GetType(Integer),
                "CustomerOrderCount",
                schema:="dbf",
                storeType:="int",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    "GetCount",
                    BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {GetType(Guid?), GetType(String)},
                    Nothing),
                scalar:=True)

            Dim id = getCount.AddParameter(
                "id",
                GetType(Guid?),
                True,
                "uniqueidentifier")
            id.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                keyComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                providerValueComparer:=New ValueComparer(Of Guid)(
                    Function(v1 As Guid, v2 As Guid) v1 = v2,
                    Function(v As Guid) v.GetHashCode(),
                    Function(v As Guid) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="uniqueidentifier"))
            id.AddAnnotation("MyAnnotation", {1L})

            Dim condition = getCount.AddParameter(
                "condition",
                GetType(String),
                False,
                "nchar(256)")
            condition.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nchar(256)",
                    size:=256,
                    dbType:=System.Data.DbType.StringFixedLength))

            getCount.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)") = getCount

            Dim getData As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()",
                Me,
                GetType(IQueryable(Of VisualBasicRuntimeModelCodeGeneratorTest.Data)),
                "GetAllData",
                schema:="dbo",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    "GetData",
                    BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {},
                    Nothing))

            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()") = getData

            Dim getData0 As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData(int)",
                Me,
                GetType(IQueryable(Of VisualBasicRuntimeModelCodeGeneratorTest.Data)),
                "GetData",
                schema:="dbo",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    "GetData",
                    BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {GetType(Integer)},
                    Nothing))

            Dim id0 = getData0.AddParameter(
                "id",
                GetType(Integer),
                False,
                "int")
            id0.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))

            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData(int)") = getData0

            Dim isDateShared As New RuntimeDbFunction(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.IsDateShared(string)",
                Me,
                GetType(Boolean),
                "IsDate",
                storeType:="bit",
                methodInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    "IsDateShared",
                    BindingFlags.Public Or BindingFlags.Static Or BindingFlags.DeclaredOnly,
                    Nothing,
                    {GetType(String)},
                    Nothing),
                scalar:=True,
                nullable:=True,
                builtIn:=True)

            Dim aDate = isDateShared.AddParameter(
                "aDate",
                GetType(String),
                False,
                "nchar(256)")
            aDate.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="nchar(256)",
                    size:=256,
                    dbType:=System.Data.DbType.StringFixedLength))

            isDateShared.TypeMapping = SqlServerBoolTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                keyComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v),
                providerValueComparer:=New ValueComparer(Of Boolean)(
                    Function(v1 As Boolean, v2 As Boolean) v1 = v2,
                    Function(v As Boolean) v.GetHashCode(),
                    Function(v As Boolean) v))
            isDateShared.AddAnnotation("MyGuid", New Guid("00000000-0000-0000-0000-000000000000"))
            functions("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.IsDateShared(string)") = isDateShared

            Dim getBlobs As New RuntimeDbFunction(
                "GetBlobs()",
                Me,
                GetType(IQueryable(Of Object)),
                "GetBlobs",
                schema:="dbo")

            functions("GetBlobs()") = getBlobs

            AddAnnotation("Relational:DbFunctions", functions)
            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim data = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            data.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", Nothing, relationalModel)
            Dim blobColumnBase As New ColumnBase(Of ColumnMappingBase)("Blob", "varbinary(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Blob", blobColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase As New TableMappingBase(Of ColumnMappingBase)(data, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(blobColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Blob"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)

            Dim functionMappings As New List(Of FunctionMapping)()
            data.SetRuntimeAnnotation("Relational:FunctionMappings", functionMappings)
            Dim getAllData = DirectCast(Me.FindDbFunction("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()"), IRuntimeDbFunction)
            Dim getAllDataFunction As New StoreFunction(getAllData, relationalModel)
            Dim blobFunctionColumn As New FunctionColumn("Blob", "varbinary(max)", getAllDataFunction) With {
                .IsNullable = True
            }
            getAllDataFunction.Columns.Add("Blob", blobFunctionColumn)
            relationalModel.Functions.Add(
                ("GetAllData", "dbo", New String() {}),
                getAllDataFunction)
            Dim getAllDataFunctionMapping As New FunctionMapping(data, getAllDataFunction, getAllData, True)
            getAllDataFunction.AddTypeMapping(getAllDataFunctionMapping, False)
            functionMappings.Add(getAllDataFunctionMapping)
            getAllDataFunctionMapping.IsDefaultFunctionMapping = True
            RelationalModel.CreateFunctionColumnMapping(blobFunctionColumn, data.FindProperty("Blob"), getAllDataFunctionMapping)
            Dim getData = DirectCast(Me.FindDbFunction("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData(int)"), IRuntimeDbFunction)
            Dim getDataFunction As New StoreFunction(getData, relationalModel)
            Dim idFunctionParameter = getDataFunction.FindParameter("id")
            Dim blobFunctionColumn0 As New FunctionColumn("Blob", "varbinary(max)", getDataFunction) With {
                .IsNullable = True
            }
            getDataFunction.Columns.Add("Blob", blobFunctionColumn0)
            relationalModel.Functions.Add(
                ("GetData", "dbo", {"int"}),
                getDataFunction)
            Dim getDataFunctionMapping As New FunctionMapping(data, getDataFunction, getData, True)
            getDataFunction.AddTypeMapping(getDataFunctionMapping, False)
            functionMappings.Add(getDataFunctionMapping)
            RelationalModel.CreateFunctionColumnMapping(blobFunctionColumn0, data.FindProperty("Blob"), getDataFunctionMapping)

            Dim [object] = FindEntityType("object")

            Dim defaultTableMappings0 As New List(Of TableMappingBase(Of ColumnMappingBase))()
            [object].SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0)
            Dim objectTableBase As New TableBase("object", Nothing, relationalModel)
            relationalModel.DefaultTables.Add("object", objectTableBase)
            Dim objectMappingBase As New TableMappingBase(Of ColumnMappingBase)([object], objectTableBase, True)
            objectTableBase.AddTypeMapping(objectMappingBase, False)
            defaultTableMappings0.Add(objectMappingBase)

            Dim functionMappings0 As New List(Of FunctionMapping)()
            [object].SetRuntimeAnnotation("Relational:FunctionMappings", functionMappings0)
            Dim getBlobs = DirectCast(Me.FindDbFunction("GetBlobs()"), IRuntimeDbFunction)
            Dim getBlobsFunction As New StoreFunction(getBlobs, relationalModel)
            relationalModel.Functions.Add(
                ("GetBlobs", "dbo", New String() {}),
                getBlobsFunction)
            Dim getBlobsFunctionMapping As New FunctionMapping([object], getBlobsFunction, getBlobs, True)
            getBlobsFunction.AddTypeMapping(getBlobsFunctionMapping, False)
            functionMappings0.Add(getBlobsFunctionMapping)
            getBlobsFunctionMapping.IsDefaultFunctionMapping = True
            Dim customerOrderCount = DirectCast(Me.FindDbFunction("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)"), IRuntimeDbFunction)
            Dim customerOrderCountFunction As New StoreFunction(customerOrderCount, relationalModel)
            Dim idFunctionParameter0 = customerOrderCountFunction.FindParameter("id")
            Dim conditionFunctionParameter = customerOrderCountFunction.FindParameter("condition")
            relationalModel.Functions.Add(
                ("CustomerOrderCount", "dbf", {"uniqueidentifier", "nchar(256)"}),
                customerOrderCountFunction)
            Dim isDate = DirectCast(Me.FindDbFunction("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.IsDateShared(string)"), IRuntimeDbFunction)
            Dim isDateFunction As New StoreFunction(isDate, relationalModel)
            Dim aDateFunctionParameter = isDateFunction.FindParameter("aDate")
            relationalModel.Functions.Add(
                ("IsDate", Nothing, {"nchar(256)"}),
                isDateFunction)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) v.GetHashCode(),
                    Function(v As Byte()) v),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="varbinary(max)"),
                storeTypePostfix:=StoreTypePostfix.None)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()")
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", Nothing)
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value
            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Reflection
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Friend Partial Class ObjectEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "object",
                GetType(Object),
                baseEntityType)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", "GetBlobs()")
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", Nothing)
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New DbFunctionContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(
                        code,
                        Sub(c) AssertFileContents("DbFunctionContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("DbFunctionContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DataEntityType.vb", e1, c),
                        Sub(c) AssertFileContents("ObjectEntityType.vb", e2, c))
                End Sub,
                Sub(model)
                    Assert.Equal(5, model.GetDbFunctions().Count())

                    Dim getCount = model.FindDbFunction(GetType(DbFunctionContext).GetMethod("GetCount", BindingFlags.NonPublic Or BindingFlags.Instance))
                    Assert.Equal("CustomerOrderCount", getCount.Name)
                    Assert.Same(model, getCount.Model)
                    Assert.Same(model, (DirectCast(getCount, IReadOnlyDbFunction)).Model)
                    Assert.Equal(GetType(DbFunctionContext).FullName & ".GetCount(System.Guid?,string)", getCount.ModelName)
                    Assert.Equal("dbf", getCount.Schema)
                    Assert.False(getCount.IsNullable)
                    Assert.True(getCount.IsScalar)
                    Assert.False(getCount.IsBuiltIn)
                    Assert.False(getCount.IsAggregate)
                    Assert.Null(getCount.Translation)
                    Assert.Equal("int", getCount.TypeMapping?.StoreType)
                    Assert.Equal(GetType(Integer), getCount.ReturnType)
                    Assert.Equal("GetCount", getCount.MethodInfo.Name)
                    Assert.Empty(getCount.GetAnnotations())
                    Assert.Empty(getCount.GetRuntimeAnnotations())
                    Assert.Equal("CustomerOrderCount", getCount.StoreFunction.Name)
                    Assert.False(getCount.StoreFunction.IsShared)
                    Assert.NotNull(getCount.ToString())
                    Assert.Equal(getCount.Parameters, DirectCast(getCount, IReadOnlyDbFunction).Parameters)
                    Assert.Equal(2, getCount.Parameters.Count)

                    Dim getCountParameter1 = getCount.Parameters(0)
                    Assert.Same(getCount, getCountParameter1.Function)
                    Assert.Same(getCount, DirectCast(getCountParameter1, IReadOnlyDbFunctionParameter).Function)
                    Assert.Equal("id", getCountParameter1.Name)
                    Assert.Equal("uniqueidentifier", getCountParameter1.StoreType)
                    Assert.Equal("uniqueidentifier", DirectCast(getCountParameter1, IReadOnlyDbFunctionParameter).StoreType)
                    Assert.True(getCountParameter1.PropagatesNullability)
                    Assert.Equal(GetType(Guid?), getCountParameter1.ClrType)
                    Assert.Equal("uniqueidentifier", getCountParameter1.TypeMapping.StoreType)
                    Assert.Single(getCountParameter1.GetAnnotations())
                    Assert.Equal({1L}, getCountParameter1("MyAnnotation"))
                    Assert.Equal("id", getCountParameter1.StoreFunctionParameter.Name)
                    Assert.Equal("uniqueidentifier", getCountParameter1.StoreFunctionParameter.StoreType)
                    Assert.NotNull(getCountParameter1.ToString())

                    Dim getCountParameter2 = getCount.Parameters(1)
                    Assert.Same(getCount, getCountParameter2.Function)
                    Assert.Equal("condition", getCountParameter2.Name)
                    Assert.Equal("nchar(256)", getCountParameter2.StoreType)
                    Assert.False(getCountParameter2.PropagatesNullability)
                    Assert.Equal(GetType(String), getCountParameter2.ClrType)
                    Assert.Equal("nchar(256)", getCountParameter2.TypeMapping.StoreType)
                    Assert.Equal("condition", getCountParameter2.StoreFunctionParameter.Name)
                    Assert.Equal("nchar(256)", getCountParameter2.StoreFunctionParameter.StoreType)
                    Assert.NotNull(getCountParameter2.ToString())

                    Dim isDate = model.FindDbFunction(GetType(DbFunctionContext).GetMethod("IsDateShared"))
                    Assert.Equal("IsDate", isDate.Name)
                    Assert.Null(isDate.Schema)
                    Assert.Equal(GetType(DbFunctionContext).FullName & ".IsDateShared(string)", isDate.ModelName)
                    Assert.True(isDate.IsNullable)
                    Assert.True(isDate.IsScalar)
                    Assert.True(isDate.IsBuiltIn)
                    Assert.False(isDate.IsAggregate)
                    Assert.Null(isDate.Translation)
                    Assert.Equal(GetType(Boolean), isDate.ReturnType)
                    Assert.Equal("IsDateShared", isDate.MethodInfo.Name)
                    Assert.Single(isDate.GetAnnotations())
                    Assert.Equal(New Guid(), isDate("MyGuid"))
                    Assert.Empty(isDate.GetRuntimeAnnotations())
                    Assert.Equal("bit", isDate.StoreFunction.ReturnType)
                    Assert.Empty(isDate.StoreFunction.EntityTypeMappings)
                    Assert.Single(isDate.Parameters)

                    Dim isDateParameter = isDate.Parameters(0)
                    Assert.Same(isDate, isDateParameter.Function)
                    Assert.Equal("aDate", isDateParameter.Name)
                    Assert.Equal("nchar(256)", isDateParameter.StoreType)
                    Assert.False(isDateParameter.PropagatesNullability)
                    Assert.Equal(GetType(String), isDateParameter.ClrType)
                    Assert.Equal("nchar(256)", isDateParameter.TypeMapping.StoreType)
                    Assert.Equal("aDate", isDateParameter.StoreFunctionParameter.Name)
                    Assert.Equal("nchar(256)", isDateParameter.StoreFunctionParameter.StoreType)

                    Dim getData = model.FindDbFunction(
                                    GetType(DbFunctionContext).GetMethod("GetData", {GetType(Integer)}))

                    Assert.Equal("GetData", getData.Name)
                    Assert.Equal("dbo", getData.Schema)
                    Assert.Equal(GetType(DbFunctionContext).FullName & ".GetData(int)", getData.ModelName)
                    Assert.False(getData.IsNullable)
                    Assert.False(getData.IsScalar)
                    Assert.False(getData.IsBuiltIn)
                    Assert.False(getData.IsAggregate)
                    Assert.Null(getData.Translation)
                    Assert.Equal(GetType(IQueryable(Of Data)), getData.ReturnType)
                    Assert.Equal("GetData", getData.MethodInfo.Name)
                    Assert.Empty(getData.GetAnnotations())
                    Assert.Empty(getData.GetRuntimeAnnotations())
                    Assert.Null(getData.TypeMapping?.StoreType)
                    Assert.Null(getData.StoreFunction.ReturnType)
                    Assert.Equal(GetType(Data), getData.StoreFunction.EntityTypeMappings.Single().TypeBase.ClrType)
                    Assert.Single(getData.Parameters)

                    Dim getDataParameter = getData.Parameters(0)
                    Assert.Same(getData, getDataParameter.Function)
                    Assert.Equal("id", getDataParameter.Name)
                    Assert.Equal("int", getDataParameter.StoreType)
                    Assert.False(getDataParameter.PropagatesNullability)
                    Assert.Equal(GetType(Integer), getDataParameter.ClrType)
                    Assert.Equal("int", getDataParameter.TypeMapping.StoreType)
                    Assert.Equal("id", getDataParameter.StoreFunctionParameter.Name)
                    Assert.Equal("int", getDataParameter.StoreFunctionParameter.StoreType)

                    Dim getDataParameterless = model.FindDbFunction(GetType(DbFunctionContext).
                                                                    GetMethod("GetData", Array.Empty(Of Type)))
                    Assert.Equal("GetAllData", getDataParameterless.Name)
                    Assert.Equal("dbo", getDataParameterless.Schema)
                    Assert.Equal(GetType(DbFunctionContext).FullName & ".GetData()", getDataParameterless.ModelName)
                    Assert.False(getDataParameterless.IsNullable)
                    Assert.False(getDataParameterless.IsScalar)
                    Assert.False(getDataParameterless.IsBuiltIn)
                    Assert.False(getDataParameterless.IsAggregate)
                    Assert.Null(getDataParameterless.Translation)
                    Assert.Equal(GetType(IQueryable(Of Data)), getDataParameterless.ReturnType)
                    Assert.Equal("GetData", getDataParameterless.MethodInfo.Name)
                    Assert.Empty(getDataParameterless.GetAnnotations())
                    Assert.Empty(getDataParameterless.GetRuntimeAnnotations())
                    Assert.False(getDataParameterless.StoreFunction.IsBuiltIn)
                    Assert.Equal(GetType(Data), getDataParameterless.StoreFunction.EntityTypeMappings.Single().TypeBase.ClrType)
                    Assert.Equal(0, getDataParameterless.Parameters.Count)

                    Assert.Equal(2, model.GetEntityTypes().Count())
                    Dim dataEntity = model.FindEntityType(GetType(Data))
                    Assert.Null(dataEntity.FindPrimaryKey())
                    Dim dataEntityFunctionMapping = dataEntity.GetFunctionMappings().Single(Function(m) m.IsDefaultFunctionMapping)
                    Assert.True(dataEntityFunctionMapping.IncludesDerivedTypes)
                    Assert.Null(dataEntityFunctionMapping.IsSharedTablePrincipal)
                    Assert.Null(dataEntityFunctionMapping.IsSplitEntityTypePrincipal)
                    Assert.Same(getDataParameterless, dataEntityFunctionMapping.DbFunction)

                    Dim getDataStoreFunction = dataEntityFunctionMapping.StoreFunction
                    Assert.Same(getDataParameterless, getDataStoreFunction.DbFunctions.Single())
                    Assert.False(getDataStoreFunction.IsOptional(dataEntity))

                    Dim dataEntityOtherFunctionMapping = dataEntity.GetFunctionMappings().Single(Function(m) Not m.IsDefaultFunctionMapping)
                    Assert.True(dataEntityOtherFunctionMapping.IncludesDerivedTypes)
                    Assert.Null(dataEntityOtherFunctionMapping.IsSharedTablePrincipal)
                    Assert.Null(dataEntityOtherFunctionMapping.IsSplitEntityTypePrincipal)
                    Assert.Same(getData, dataEntityOtherFunctionMapping.DbFunction)

                    Dim getDataOtherStoreFunction = dataEntityOtherFunctionMapping.StoreFunction
                    Assert.Same(getData, getDataOtherStoreFunction.DbFunctions.Single())
                    Assert.False(getDataOtherStoreFunction.IsOptional(dataEntity))

                    Dim getBlobs = model.FindDbFunction("GetBlobs()")
                    Assert.Equal("dbo", getBlobs.Schema)
                    Assert.False(getBlobs.IsNullable)
                    Assert.False(getBlobs.IsScalar)
                    Assert.False(getBlobs.IsBuiltIn)
                    Assert.False(getBlobs.IsAggregate)
                    Assert.Null(getBlobs.Translation)
                    Assert.Null(getBlobs.TypeMapping)
                    Assert.Equal(GetType(IQueryable(Of Object)), getBlobs.ReturnType)
                    Assert.Null(getBlobs.MethodInfo)
                    Assert.Empty(getBlobs.GetAnnotations())
                    Assert.Empty(getBlobs.GetRuntimeAnnotations())
                    Assert.Equal("GetBlobs", getBlobs.StoreFunction.Name)
                    Assert.False(getBlobs.StoreFunction.IsShared)
                    Assert.NotNull(getBlobs.ToString())
                    Assert.Empty(getBlobs.Parameters)

                    Dim objectEntity = model.FindEntityType(GetType(Object))
                    Assert.Null(objectEntity.FindPrimaryKey())
                    Dim objectEntityFunctionMapping = objectEntity.GetFunctionMappings().Single(Function(m) m.IsDefaultFunctionMapping)
                    Assert.True(objectEntityFunctionMapping.IncludesDerivedTypes)
                    Assert.Null(objectEntityFunctionMapping.IsSharedTablePrincipal)
                    Assert.Null(objectEntityFunctionMapping.IsSplitEntityTypePrincipal)
                    Assert.Same(getBlobs, objectEntityFunctionMapping.DbFunction)
                End Sub)
        End Sub

        Public Class DbFunctionContext
            Inherits SqlServerContextBase

            Public Shared Function IsDateShared(aDate As String) As Boolean
                Throw New NotImplementedException()
            End Function

            Private Function GetCount(id As Guid?, condition As String) As Integer
                Throw New NotImplementedException()
            End Function

            Public Function GetData(id As Integer) As IQueryable(Of Data)
                Return FromExpression(Function() GetData(id))
            End Function

            Public Function GetData() As IQueryable(Of Data)
                Return FromExpression(Function() GetData())
            End Function

            Protected Overrides Sub ConfigureConventions(configurationBuilder As ModelConfigurationBuilder)
                configurationBuilder.DefaultTypeMapping(Of String)().HasMaxLength(256).IsFixedLength()
            End Sub

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.
                    HasDbFunction(GetType(DbFunctionContext).
                    GetMethod(NameOf(GetCount), BindingFlags.NonPublic Or BindingFlags.Instance)).
                    HasName("CustomerOrderCount").HasSchema("dbf").IsNullable(False).
                    HasParameter("id").
                    PropagatesNullability().
                    Metadata.SetAnnotation("MyAnnotation", {1L})

                modelBuilder.
                    HasDbFunction(GetType(DbFunctionContext).
                    GetMethod(NameOf(IsDateShared))).
                    HasName("IsDate").
                    IsBuiltIn().
                    Metadata.
                    SetAnnotation("MyGuid", New Guid())

                modelBuilder.HasDbFunction(GetType(DbFunctionContext).GetMethod(NameOf(GetData), {GetType(Integer)}))
                modelBuilder.HasDbFunction(GetType(DbFunctionContext).GetMethod(NameOf(GetData), New Type() {}))

                modelBuilder.
                    Entity(Of Data)().
                    ToFunction(GetType(DbFunctionContext).
                    FullName & ".GetData()", Function(f) f.HasName("GetAllData")).
                    HasNoKey()

                modelBuilder.Entity(Of Object)().
                    ToFunction("GetBlobs()", Function(f) f.HasName("GetBlobs")).
                    HasNoKey()
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Sequences()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.SequencesContext))>
    Public Partial Class SequencesContextModel
        Inherits RuntimeModel

        Private Shared _Instance As SequencesContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New SequencesContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal

Namespace TestNamespace
    Public Partial Class SequencesContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            Dim sequences As New SortedDictionary(Of (String, String), ISequence)()
            Dim hL As New RuntimeSequence(
                "HL",
                Me,
                GetType(Long),
                schema:="S",
                incrementBy:=10)

            sequences(("HL", "S")) = hL

            Dim [long] As New RuntimeSequence(
                "Long",
                Me,
                GetType(Long),
                startValue:=-4L,
                incrementBy:=2,
                cyclic:=True,
                minValue:=-2L,
                maxValue:=2L)

            sequences(("Long", Nothing)) = [long]

            AddAnnotation("Relational:Sequences", sequences)
            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim data = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            data.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", Nothing, relationalModel)
            Dim blobColumnBase As New ColumnBase(Of ColumnMappingBase)("Blob", "varbinary(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Blob", blobColumnBase)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Id", idColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase As New TableMappingBase(Of ColumnMappingBase)(data, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(blobColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Blob"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            data.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim dataTable As New Table("Data", Nothing, relationalModel)
            Dim idColumn As New Column("Id", "int", dataTable)
            dataTable.Columns.Add("Id", idColumn)
            Dim blobColumn As New Column("Blob", "varbinary(max)", dataTable) With {
                .IsNullable = True
            }
            dataTable.Columns.Add("Blob", blobColumn)
            Dim pK_Data As New UniqueConstraint("PK_Data", dataTable, {idColumn})
            dataTable.PrimaryKey = pK_Data
            Dim pK_DataUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                {"Id"})
            pK_Data.MappedKeys.Add(pK_DataUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataUc).Add(pK_Data)
            dataTable.UniqueConstraints.Add("PK_Data", pK_Data)
            relationalModel.Tables.Add(("Data", Nothing), dataTable)
            Dim dataTableMapping As New TableMapping(data, dataTable, True)
            dataTable.AddTypeMapping(dataTableMapping, False)
            tableMappings.Add(dataTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, data.FindProperty("Id"), dataTableMapping)
            RelationalModel.CreateColumnMapping(blobColumn, data.FindProperty("Blob"), dataTableMapping)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0)
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            id.AddAnnotation("SqlServer:HiLoSequenceName", "HL")
            id.AddAnnotation("SqlServer:HiLoSequenceSchema", "S")
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) v.GetHashCode(),
                    Function(v As Byte()) v),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="varbinary(max)"),
                storeTypePostfix:=StoreTypePostfix.None)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New SequencesContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(
                        code,
                        Sub(c) AssertFileContents("SequencesContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("SequencesContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DataEntityType.vb", e1, c))
                End Sub,
                Sub(model)
                    Assert.Equal(2, model.GetSequences().Count())

                    Dim longSequence = model.FindSequence("Long")
                    Assert.Same(model, longSequence.Model)
                    Assert.Equal(GetType(Long), longSequence.Type)
                    Assert.True(longSequence.IsCyclic)
                    Assert.Equal(-4, longSequence.StartValue)
                    Assert.Equal(-2, longSequence.MinValue)
                    Assert.Equal(2, longSequence.MaxValue)
                    Assert.Equal(2, longSequence.IncrementBy)
                    Assert.NotNull(longSequence.ToString())

                    Dim hiLo = model.FindSequence("HL", "S")
                    Assert.Same(model, DirectCast(hiLo, IReadOnlySequence).Model)
                    Assert.Equal("HL", hiLo.Name)
                    Assert.Equal("S", hiLo.Schema)
                    Assert.False(hiLo.IsCyclic)
                    Assert.Equal(1, hiLo.StartValue)
                    Assert.Null(hiLo.MinValue)
                    Assert.Null(hiLo.MaxValue)
                    Assert.Equal(10, hiLo.IncrementBy)
                    Assert.NotNull(hiLo.ToString())

                    Assert.Single(model.GetEntityTypes())
                    Dim dataEntity = model.FindEntityType(GetType(Data))
                    Assert.Same(hiLo, dataEntity.FindPrimaryKey().Properties.Single().FindHiLoSequence())
                End Sub)
        End Sub

        Public Class SequencesContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.HasSequence(Of Long)("Long").
                         HasMin(-2).
                         HasMax(2).
                         IsCyclic().
                         IncrementsBy(2).
                         StartsAt(-4)

                modelBuilder.Entity(Of Data)(Sub(eb)
                                                 eb.Property(Of Integer)("Id").UseHiLo("HL", "S")
                                                 eb.HasKey("Id")
                                             End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Key_sequences()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.KeySequencesContext))>
    Public Partial Class KeySequencesContextModel
        Inherits RuntimeModel

        Private Shared _Instance As KeySequencesContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New KeySequencesContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal

Namespace TestNamespace
    Public Partial Class KeySequencesContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            Dim sequences As New SortedDictionary(Of (String, String), ISequence)()
            Dim keySeq As New RuntimeSequence(
                "KeySeq",
                Me,
                GetType(Long),
                schema:="KeySeqSchema")

            sequences(("KeySeq", "KeySeqSchema")) = keySeq

            AddAnnotation("Relational:Sequences", sequences)
            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim data = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            data.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", Nothing, relationalModel)
            Dim blobColumnBase As New ColumnBase(Of ColumnMappingBase)("Blob", "varbinary(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Blob", blobColumnBase)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Id", idColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase As New TableMappingBase(Of ColumnMappingBase)(data, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(blobColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Blob"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            data.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim dataTable As New Table("Data", Nothing, relationalModel)
            Dim idColumn As New Column("Id", "int", dataTable)
            dataTable.Columns.Add("Id", idColumn)
            Dim blobColumn As New Column("Blob", "varbinary(max)", dataTable) With {
                .IsNullable = True
            }
            dataTable.Columns.Add("Blob", blobColumn)
            Dim pK_Data As New UniqueConstraint("PK_Data", dataTable, {idColumn})
            dataTable.PrimaryKey = pK_Data
            Dim pK_DataUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                {"Id"})
            pK_Data.MappedKeys.Add(pK_DataUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataUc).Add(pK_Data)
            dataTable.UniqueConstraints.Add("PK_Data", pK_Data)
            relationalModel.Tables.Add(("Data", Nothing), dataTable)
            Dim dataTableMapping As New TableMapping(data, dataTable, True)
            dataTable.AddTypeMapping(dataTableMapping, False)
            tableMappings.Add(dataTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, data.FindProperty("Id"), dataTableMapping)
            RelationalModel.CreateColumnMapping(blobColumn, data.FindProperty("Blob"), dataTableMapping)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0)
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            id.AddAnnotation("Relational:DefaultValueSql", "NEXT VALUE FOR [KeySeqSchema].[KeySeq]")
            id.AddAnnotation("SqlServer:SequenceName", "KeySeq")
            id.AddAnnotation("SqlServer:SequenceSchema", "KeySeqSchema")
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.Sequence)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) v.GetHashCode(),
                    Function(v As Byte()) v),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="varbinary(max)"),
                storeTypePostfix:=StoreTypePostfix.None)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New KeySequencesContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(
                        code,
                        Sub(c) AssertFileContents("KeySequencesContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("KeySequencesContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DataEntityType.vb", e1, c))
                End Sub,
                Sub(Model)
                    Assert.Single(Model.GetSequences())

                    Dim keySequence = Model.FindSequence("KeySeq", "KeySeqSchema")
                    Assert.Same(Model, DirectCast(keySequence, IReadOnlySequence).Model)
                    Assert.Equal("KeySeq", keySequence.Name)
                    Assert.Equal("KeySeqSchema", keySequence.Schema)
                    Assert.False(keySequence.IsCyclic)
                    Assert.Equal(1, keySequence.StartValue)
                    Assert.Null(keySequence.MinValue)
                    Assert.Null(keySequence.MaxValue)
                    Assert.Equal(1, keySequence.IncrementBy)
                    Assert.NotNull(keySequence.ToString())

                    Assert.Single(DirectCast(Model.GetEntityTypes(), IEnumerable))
                    Dim dataEntity = Model.FindEntityType(GetType(Data))
                    Assert.Same(keySequence, dataEntity.FindPrimaryKey().Properties.Single().FindSequence())
                End Sub)
        End Sub

        Public Class KeySequencesContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of Data)(
                    Sub(eb)
                        eb.Property(Of Integer)("Id").UseSequence("KeySeq", "KeySeqSchema")
                        eb.HasKey("Id")
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub CheckConstraints()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.ConstraintsContext))>
    Public Partial Class ConstraintsContextModel
        Inherits RuntimeModel

        Private Shared _Instance As ConstraintsContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New ConstraintsContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal

Namespace TestNamespace
    Public Partial Class ConstraintsContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim data = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            data.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", Nothing, relationalModel)
            Dim blobColumnBase As New ColumnBase(Of ColumnMappingBase)("Blob", "varbinary(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Blob", blobColumnBase)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Id", idColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase As New TableMappingBase(Of ColumnMappingBase)(data, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(blobColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Blob"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            data.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim dataTable As New Table("Data", Nothing, relationalModel)
            Dim idColumn As New Column("Id", "int", dataTable)
            dataTable.Columns.Add("Id", idColumn)
            Dim blobColumn As New Column("Blob", "varbinary(max)", dataTable) With {
                .IsNullable = True
            }
            dataTable.Columns.Add("Blob", blobColumn)
            Dim pK_Data As New UniqueConstraint("PK_Data", dataTable, {idColumn})
            dataTable.PrimaryKey = pK_Data
            Dim pK_DataUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                {"Id"})
            pK_Data.MappedKeys.Add(pK_DataUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataUc).Add(pK_Data)
            dataTable.UniqueConstraints.Add("PK_Data", pK_Data)
            relationalModel.Tables.Add(("Data", Nothing), dataTable)
            Dim dataTableMapping As New TableMapping(data, dataTable, True)
            dataTable.AddTypeMapping(dataTableMapping, False)
            tableMappings.Add(dataTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, data.FindProperty("Id"), dataTableMapping)
            RelationalModel.CreateColumnMapping(blobColumn, data.FindProperty("Blob"), dataTableMapping)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0)
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) v.GetHashCode(),
                    Function(v As Byte()) v),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="varbinary(max)"),
                storeTypePostfix:=StoreTypePostfix.None)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New ConstraintsContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(Code)
                    Assert.Collection(Code,
                                    Sub(c) AssertFileContents("ConstraintsContextModel.vb", rm1, c),
                                    Sub(c) AssertFileContents("ConstraintsContextModelBuilder.vb", rm2, c),
                                    Sub(c) AssertFileContents("DataEntityType.vb", e1, c))
                End Sub,
            Sub(model)
                Dim dataEntity = model.GetEntityTypes().Single()
                Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() dataEntity.GetCheckConstraints()).Message)
            End Sub)
        End Sub

        Public Class ConstraintsContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of Data)(
                    Sub(eb)
                        eb.Property(Of Integer)("Id")
                        eb.HasKey("Id")
                        eb.ToTable(Function(tb) tb.HasCheckConstraint("idConstraint", "Id <> 0"))
                        eb.ToTable(Function(tb) tb.HasCheckConstraint("anotherConstraint", "Id <> -1"))
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Triggers()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.TriggersContext))>
    Public Partial Class TriggersContextModel
        Inherits RuntimeModel

        Private Shared _Instance As TriggersContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New TriggersContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value

            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Metadata.Internal

Namespace TestNamespace
    Public Partial Class TriggersContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            AddAnnotation("Relational:MaxIdentifierLength", 128)
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim data = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            data.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", Nothing, relationalModel)
            Dim blobColumnBase As New ColumnBase(Of ColumnMappingBase)("Blob", "varbinary(max)", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Blob", blobColumnBase)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "int", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Id", idColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase As New TableMappingBase(Of ColumnMappingBase)(data, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(blobColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Blob"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            data.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim dataTable As New Table("Data", Nothing, relationalModel)
            Dim idColumn As New Column("Id", "int", dataTable)
            dataTable.Columns.Add("Id", idColumn)
            Dim blobColumn As New Column("Blob", "varbinary(max)", dataTable) With {
                .IsNullable = True
            }
            dataTable.Columns.Add("Blob", blobColumn)
            Dim pK_Data As New UniqueConstraint("PK_Data", dataTable, {idColumn})
            dataTable.PrimaryKey = pK_Data
            Dim pK_DataUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                {"Id"})
            pK_Data.MappedKeys.Add(pK_DataUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataUc).Add(pK_Data)
            dataTable.UniqueConstraints.Add("PK_Data", pK_Data)
            dataTable.Triggers.Add("Trigger1", data.FindDeclaredTrigger("Trigger1"))
            dataTable.Triggers.Add("Trigger2", data.FindDeclaredTrigger("Trigger2"))
            relationalModel.Tables.Add(("Data", Nothing), dataTable)
            Dim dataTableMapping As New TableMapping(data, dataTable, True)
            dataTable.AddTypeMapping(dataTableMapping, False)
            tableMappings.Add(dataTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, data.FindProperty("Id"), dataTableMapping)
            RelationalModel.CreateColumnMapping(blobColumn, data.FindProperty("Blob"), dataTableMapping)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value

            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0)
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v))
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) v.GetHashCode(),
                    Function(v As Byte()) v),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="varbinary(max)"),
                storeTypePostfix:=StoreTypePostfix.None)
            blob.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None)

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Dim trigger1 = entityType.AddTrigger(
                "Trigger1")

            Dim trigger2 = entityType.AddTrigger(
                "Trigger2")

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)
            entityType.AddAnnotation("SqlServer:UseSqlOutputClause", False)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New TriggersContext(),
                CreateCompiledModelCodeGenerationOptions(),
                Sub(code)
                    Assert.Collection(code,
                        Sub(c) AssertFileContents("TriggersContextModel.vb", rm1, c),
                        Sub(c) AssertFileContents("TriggersContextModelBuilder.vb", rm2, c),
                        Sub(c) AssertFileContents("DataEntityType.vb", e1, c))
                End Sub,
                Sub(Model)
                    Dim dataEntity = Model.GetEntityTypes().Single()

                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws(Of InvalidOperationException)(Sub() dataEntity.GetCheckConstraints()).Message)
                End Sub)
        End Sub

        Public Class TriggersContext
            Inherits SqlServerContextBase

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                MyBase.OnModelCreating(modelBuilder)

                modelBuilder.Entity(Of Data)(
                    Sub(eb)
                        eb.Property(Of Integer)("Id")
                        eb.HasKey("Id")

                        eb.ToTable(
                            Sub(tb)
                                tb.HasTrigger("Trigger1")
                                tb.HasTrigger("Trigger2")
                            End Sub)
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Sqlite()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure

Namespace Microsoft.EntityFrameworkCore.Metadata
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.SqliteContext))>
    Public Partial Class SqliteContextModel
        Inherits RuntimeModel

        Private Shared _Instance As SqliteContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New SqliteContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value
            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System.Collections.Generic
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata.Internal

Namespace Microsoft.EntityFrameworkCore.Metadata
    Public Partial Class SqliteContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel())
        End Sub

        Private Function CreateRelationalModel() As IRelationalModel
            Dim relationalModel As New RelationalModel(Me)

            Dim data = FindEntityType("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data")

            Dim defaultTableMappings As New List(Of TableMappingBase(Of ColumnMappingBase))()
            data.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase As New TableBase("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", Nothing, relationalModel)
            Dim blobColumnBase As New ColumnBase(Of ColumnMappingBase)("Blob", "BLOB", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Blob", blobColumnBase)
            Dim idColumnBase As New ColumnBase(Of ColumnMappingBase)("Id", "INTEGER", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Id", idColumnBase)
            Dim pointColumnBase As New ColumnBase(Of ColumnMappingBase)("Point", "POINT", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase) With {
                .IsNullable = True
            }
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.Columns.Add("Point", pointColumnBase)
            relationalModel.DefaultTables.Add("EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data", entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase)
            Dim entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase As New TableMappingBase(Of ColumnMappingBase)(data, entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase, True)
            entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataTableBase.AddTypeMapping(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase, False)
            defaultTableMappings.Add(entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(idColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Id"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(blobColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Blob"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)
            RelationalModel.CreateColumnMapping(DirectCast(pointColumnBase, ColumnBase(Of ColumnMappingBase)), data.FindProperty("Point"), entityFrameworkCoreVisualBasicScaffoldingInternalVisualBasicRuntimeModelCodeGeneratorTestDataMappingBase)

            Dim tableMappings As New List(Of TableMapping)()
            data.SetRuntimeAnnotation("Relational:TableMappings", tableMappings)
            Dim dataTable As New Table("Data", Nothing, relationalModel)
            Dim idColumn As New Column("Id", "INTEGER", dataTable)
            dataTable.Columns.Add("Id", idColumn)
            Dim blobColumn As New Column("Blob", "BLOB", dataTable) With {
                .IsNullable = True
            }
            dataTable.Columns.Add("Blob", blobColumn)
            Dim pointColumn As New Column("Point", "POINT", dataTable) With {
                .IsNullable = True
            }
            dataTable.Columns.Add("Point", pointColumn)
            Dim pK_Data As New UniqueConstraint("PK_Data", dataTable, {idColumn})
            dataTable.PrimaryKey = pK_Data
            Dim pK_DataUc = RelationalModel.GetKey(Me,
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                {"Id"})
            pK_Data.MappedKeys.Add(pK_DataUc)
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataUc).Add(pK_Data)
            dataTable.UniqueConstraints.Add("PK_Data", pK_Data)
            relationalModel.Tables.Add(("Data", Nothing), dataTable)
            Dim dataTableMapping As New TableMapping(data, dataTable, True)
            dataTable.AddTypeMapping(dataTableMapping, False)
            tableMappings.Add(dataTableMapping)
            RelationalModel.CreateColumnMapping(idColumn, data.FindProperty("Id"), dataTableMapping)
            RelationalModel.CreateColumnMapping(blobColumn, data.FindProperty("Blob"), dataTableMapping)
            RelationalModel.CreateColumnMapping(pointColumn, data.FindProperty("Point"), dataTableMapping)
            Return relationalModel.MakeReadOnly()
        End Function
    End Class
End Namespace
]]>.Value
            Dim e1 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Storage
Imports NetTopologySuite.Geometries

Namespace Microsoft.EntityFrameworkCore.Metadata
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                valueGenerated:=ValueGenerated.OnAdd,
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0)
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                mappingInfo:=New RelationalTypeMappingInfo(
                    storeTypeName:="INTEGER"))

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.TypeMapping = SqliteByteArrayTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) v.GetHashCode(),
                    Function(v As Byte()) v),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()))

            Dim point = entityType.AddProperty(
                "Point",
                GetType(Point),
                nullable:=True)
            point.TypeMapping = Nothing

            Dim key = entityType.AddKey(
                {id})
            entityType.SetPrimaryKey(key)

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Relational:FunctionName", Nothing)
            entityType.AddAnnotation("Relational:Schema", Nothing)
            entityType.AddAnnotation("Relational:SqlQuery", Nothing)
            entityType.AddAnnotation("Relational:TableName", "Data")
            entityType.AddAnnotation("Relational:ViewName", Nothing)
            entityType.AddAnnotation("Relational:ViewSchema", Nothing)

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value
            Dim Options = CreateCompiledModelCodeGenerationOptions()
            Options.ModelNamespace = "Microsoft.EntityFrameworkCore.Metadata"

            Test(
                New SqliteContext(),
                Options,
                Sub(code)
                    Assert.Collection(code,
                Sub(c) AssertFileContents("SqliteContextModel.vb", rm1, c),
                Sub(c) AssertFileContents("SqliteContextModelBuilder.vb", rm2, c),
                Sub(c) AssertFileContents("DataEntityType.vb", e1, c))

                End Sub,
                Sub(model)
                    Assert.Single(model.GetEntityTypes())
                    Dim dataEntity = model.FindEntityType(GetType(Data))

                    Assert.Equal(GetType(Data).FullName, dataEntity.Name)
                    Assert.False(dataEntity.HasSharedClrType)
                    Assert.False(dataEntity.IsPropertyBag)
                    Assert.False(dataEntity.IsOwned())
                    Assert.IsType(Of ConstructorBinding)(dataEntity.ConstructorBinding)
                    Assert.Null(dataEntity.FindIndexerPropertyInfo())
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, dataEntity.GetChangeTrackingStrategy())
                    Assert.Equal("Data", dataEntity.GetTableName())
                    Assert.Null(dataEntity.GetSchema())

                    Dim point = dataEntity.FindProperty("Point")
                    Assert.Equal(GetType(Point), point.ClrType)
                    Assert.True(point.IsNullable)
                    Assert.Equal(ValueGenerated.Never, point.ValueGenerated)
                    Assert.Equal("Point", point.GetColumnName())
                    Assert.Equal("POINT", point.GetColumnType())
                    Assert.Null(point.GetValueConverter())
                    Assert.IsType(Of GeometryValueComparer(Of Point))(point.GetValueComparer())
                    Assert.IsType(Of GeometryValueComparer(Of Point))(point.GetKeyValueComparer())
                    Assert.Null(point.GetSrid())
                End Sub,
                GetType(SqliteNetTopologySuiteDesignTimeServices))
        End Sub

        Public Class SqliteContext
            Inherits Microsoft.EntityFrameworkCore.DbContext

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                options.
                    EnableServiceProviderCaching(False).
                    UseSqlite(Sub(o) o.UseNetTopologySuite())
            End Sub

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion)

                modelBuilder.Entity(Of Data)(
                    Sub(eb)
                        eb.Property(Of Integer)("Id")
                        eb.HasKey("Id")
                        eb.Property(Of Point)("Point").HasSrid(1101)
                    End Sub)
            End Sub
        End Class

        <ConditionalFact>
        Public Sub Cosmos()

            Dim rm1 =
            <![CDATA[' <auto-generated />
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    <DbContext(GetType(VisualBasicRuntimeModelCodeGeneratorTest.CosmosContext))>
    Public Partial Class CosmosContextModel
        Inherits RuntimeModel

        Private Shared _Instance As CosmosContextModel
        Public Shared ReadOnly Property Instance As IModel
            Get
                Return _Instance
            End Get
        End Property

        Shared Sub New()
            Dim model As New CosmosContextModel()
            model.Initialize()
            model.Customize()
            _Instance = model
        End Sub

        Partial Private Sub Initialize()
        End Sub

        Partial Private Sub Customize()
        End Sub
    End Class
End Namespace
]]>.Value


            Dim rm2 =
            <![CDATA[' <auto-generated />
Imports System
Imports Microsoft.EntityFrameworkCore.Infrastructure
Imports Microsoft.EntityFrameworkCore.Metadata

Namespace TestNamespace
    Public Partial Class CosmosContextModel

        Private Sub Initialize()
            Dim data = DataEntityType.Create(Me)

            DataEntityType.CreateAnnotations(data)

            AddAnnotation("Cosmos:ContainerName", "Default")
        End Sub
    End Class
End Namespace
]]>.Value


            Dim e2 =
            <![CDATA[' <auto-generated />
Imports System
Imports System.Collections
Imports System.Globalization
Imports System.Linq
Imports System.Reflection
Imports EntityFrameworkCore.VisualBasic.Scaffolding.Internal
Imports Microsoft.EntityFrameworkCore.ChangeTracking
Imports Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal
Imports Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal
Imports Microsoft.EntityFrameworkCore.Metadata
Imports Microsoft.EntityFrameworkCore.Storage.Json
Imports Microsoft.EntityFrameworkCore.Storage.ValueConversion
Imports Newtonsoft.Json.Linq

Namespace TestNamespace
    Friend Partial Class DataEntityType

        Public Shared Function Create(model As RuntimeModel, Optional baseEntityType As RuntimeEntityType = Nothing) As RuntimeEntityType
            Dim entityType = model.AddEntityType(
                "EntityFrameworkCore.VisualBasic.Scaffolding.Internal.VisualBasicRuntimeModelCodeGeneratorTest+Data",
                GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data),
                baseEntityType)

            Dim id = entityType.AddProperty(
                "Id",
                GetType(Integer),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                sentinel:=0)
            id.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                keyComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                providerValueComparer:=New ValueComparer(Of Integer)(
                    Function(v1 As Integer, v2 As Integer) v1 = v2,
                    Function(v As Integer) v,
                    Function(v As Integer) v),
                clrType:=GetType(Integer),
                jsonValueReaderWriter:=JsonInt32ReaderWriter.Instance)

            Dim partitionId = entityType.AddProperty(
                "PartitionId",
                GetType(Long?),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                providerPropertyType:=GetType(String))
            partitionId.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                keyComparer:=New ValueComparer(Of Long?)(
                    Function(v1 As Nullable(Of Long), v2 As Nullable(Of Long)) v1.HasValue AndAlso v2.HasValue AndAlso CType(v1, Long) = CType(v2, Long) OrElse Not(v1.HasValue) AndAlso Not(v2.HasValue),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(v, Long).GetHashCode(), 0),
                    Function(v As Nullable(Of Long)) If(v.HasValue, CType(CType(v, Long), Nullable(Of Long)), CType(Nothing, Nullable(Of Long)))),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                converter:=New ValueConverter(Of Long, String)(
                    Function(v As Long) String.Format(CultureInfo.InvariantCulture, "{0}", CType(v, Object)),
                    Function(v As String) Long.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture)),
                jsonValueReaderWriter:=New JsonConvertedValueReaderWriter(Of Long, String)(
                    JsonStringReaderWriter.Instance,
                    New ValueConverter(Of Long, String)(
                        Function(v As Long) String.Format(CultureInfo.InvariantCulture, "{0}", CType(v, Object)),
                        Function(v As String) Long.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture))))

            Dim blob = entityType.AddProperty(
                "Blob",
                GetType(Byte()),
                propertyInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetProperty("Blob", BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                fieldInfo:=GetType(VisualBasicRuntimeModelCodeGeneratorTest.Data).GetField("_Blob", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly),
                nullable:=True)
            blob.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) If(v1 Is Nothing, v2 Is Nothing, v2 IsNot Nothing AndAlso v1.Length = v2.Length AndAlso v1 Is v2 OrElse v1.Zip(v2, Function(v10 As Byte, v20 As Byte) v10 = v20).All(Function(v As Boolean) v)),
                    Function(v As Byte()) v.Aggregate(New HashCode(), Function(h As HashCode, e As Byte) ValueComparer.Add(h, CType(e, Integer)), Function(h As HashCode) h.ToHashCode()),
                    Function(v As Byte()) v.Select(Function(v0 As Byte) v0).ToArray()),
                keyComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                providerValueComparer:=New ValueComparer(Of Byte())(
                    Function(v1 As Byte(), v2 As Byte()) StructuralComparisons.StructuralEqualityComparer.Equals(CType(v1, Object), CType(v2, Object)),
                    Function(v As Byte()) StructuralComparisons.StructuralEqualityComparer.GetHashCode(CType(v, Object)),
                    Function(source As Byte()) source.ToArray()),
                clrType:=GetType(Byte()),
                jsonValueReaderWriter:=JsonByteArrayReaderWriter.Instance)
            blob.AddAnnotation("Cosmos:PropertyName", "JsonBlob")

            Dim __id = entityType.AddProperty(
                "__id",
                GetType(String),
                afterSaveBehavior:=PropertySaveBehavior.Throw,
                valueGeneratorFactory:=AddressOf New IdValueGeneratorFactory().Create)
            __id.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)
            __id.AddAnnotation("Cosmos:PropertyName", "id")

            Dim __jObject = entityType.AddProperty(
                "__jObject",
                GetType(JObject),
                nullable:=True,
                valueGenerated:=ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior:=PropertySaveBehavior.Ignore,
                afterSaveBehavior:=PropertySaveBehavior.Ignore)
            __jObject.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of JObject)(
                    Function(v1 As JObject, v2 As JObject) Object.Equals(v1, v2),
                    Function(v As JObject) v.GetHashCode(),
                    Function(v As JObject) v),
                keyComparer:=New ValueComparer(Of JObject)(
                    Function(v1 As JObject, v2 As JObject) Object.Equals(v1, v2),
                    Function(v As JObject) v.GetHashCode(),
                    Function(v As JObject) v),
                providerValueComparer:=New ValueComparer(Of JObject)(
                    Function(v1 As JObject, v2 As JObject) Object.Equals(v1, v2),
                    Function(v As JObject) v.GetHashCode(),
                    Function(v As JObject) v),
                clrType:=GetType(JObject))
            __jObject.AddAnnotation("Cosmos:PropertyName", "")

            Dim _etag = entityType.AddProperty(
                "_etag",
                GetType(String),
                nullable:=True,
                concurrencyToken:=True,
                valueGenerated:=ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior:=PropertySaveBehavior.Ignore,
                afterSaveBehavior:=PropertySaveBehavior.Ignore)
            _etag.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                keyComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                providerValueComparer:=New ValueComparer(Of String)(
                    Function(v1 As String, v2 As String) v1 = v2,
                    Function(v As String) v.GetHashCode(),
                    Function(v As String) v),
                clrType:=GetType(String),
                jsonValueReaderWriter:=JsonStringReaderWriter.Instance)

            Dim key = entityType.AddKey(
                {id, partitionId})
            entityType.SetPrimaryKey(key)

            Dim key0 = entityType.AddKey(
                {__id, partitionId})

            Return entityType
        End Function

        Public Shared Sub CreateAnnotations(entityType As RuntimeEntityType)
            entityType.AddAnnotation("Cosmos:ContainerName", "DataContainer")
            entityType.AddAnnotation("Cosmos:ETagName", "_etag")
            entityType.AddAnnotation("Cosmos:PartitionKeyName", "PartitionId")

            Customize(entityType)
        End Sub

        Shared Partial Private Sub Customize(entityType As RuntimeEntityType)
        End Sub
    End Class
End Namespace
]]>.Value

            Test(
                New CosmosContext(),
                CreateCompiledModelCodeGenerationOptions(),
            Sub(code)
                Assert.Collection(code,
                                  Sub(c) AssertFileContents("CosmosContextModel.vb", rm1, c),
                                  Sub(c) AssertFileContents("CosmosContextModelBuilder.vb", rm2, c),
                                  Sub(c) AssertFileContents("DataEntityType.vb", e2, c))
            End Sub,
        Sub(model)
            Assert.Single(model.GetEntityTypes())
            Dim dataEntity = model.FindEntityType(GetType(Data))
            Assert.Equal(GetType(Data).FullName, dataEntity.Name)
            Assert.False(dataEntity.HasSharedClrType)
            Assert.False(dataEntity.IsPropertyBag)
            Assert.False(dataEntity.IsOwned())
            Assert.IsType(Of ConstructorBinding)(dataEntity.ConstructorBinding)
            Assert.Null(dataEntity.FindIndexerPropertyInfo())
            Assert.Equal(ChangeTrackingStrategy.Snapshot, dataEntity.GetChangeTrackingStrategy())
            Assert.Equal("DataContainer", dataEntity.GetContainer())
            Assert.Null(dataEntity.FindDiscriminatorProperty())

            Dim id = dataEntity.FindProperty("Id")
            Assert.Equal(GetType(Integer), id.ClrType)
            Assert.Null(id.PropertyInfo)
            Assert.Null(id.FieldInfo)
            Assert.False(id.IsNullable)
            Assert.False(id.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.Never, id.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Throw, id.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Save, id.GetBeforeSaveBehavior())
            Assert.Equal("Id", CosmosPropertyExtensions.GetJsonPropertyName(id))
            Assert.Null(id.GetValueGeneratorFactory())
            Assert.Null(id.GetValueConverter())
            Assert.NotNull(id.GetValueComparer())
            Assert.NotNull(id.GetKeyValueComparer())

            Dim storeId = dataEntity.FindProperty("__id")
            Assert.Equal(GetType(String), storeId.ClrType)
            Assert.Null(storeId.PropertyInfo)
            Assert.Null(storeId.FieldInfo)
            Assert.False(storeId.IsNullable)
            Assert.False(storeId.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.Never, storeId.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Throw, storeId.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Save, storeId.GetBeforeSaveBehavior())
            Assert.Equal("id", CosmosPropertyExtensions.GetJsonPropertyName(storeId))
            Assert.IsType(Of IdValueGenerator)(storeId.GetValueGeneratorFactory()(storeId, dataEntity))
            Assert.Null(storeId.GetValueConverter())
            Assert.NotNull(storeId.GetValueComparer())
            Assert.NotNull(storeId.GetKeyValueComparer())

            Dim partitionId = dataEntity.FindProperty("PartitionId")
            Assert.Equal(GetType(Long?), partitionId.ClrType)
            Assert.Null(partitionId.PropertyInfo)
            Assert.Null(partitionId.FieldInfo)
            Assert.False(partitionId.IsNullable)
            Assert.False(partitionId.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.Never, partitionId.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Throw, partitionId.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Save, partitionId.GetBeforeSaveBehavior())
            Assert.Equal("PartitionId", CosmosPropertyExtensions.GetJsonPropertyName(partitionId))
            Assert.Null(partitionId.GetValueGeneratorFactory())
            Assert.Null(partitionId.GetValueConverter())
            Assert.Equal("1", partitionId.FindTypeMapping().Converter.ConvertToProvider(1))
            Assert.NotNull(partitionId.GetValueComparer())
            Assert.NotNull(partitionId.GetKeyValueComparer())

            Dim eTag = dataEntity.FindProperty("_etag")
            Assert.Equal(GetType(String), eTag.ClrType)
            Assert.Null(eTag.PropertyInfo)
            Assert.Null(eTag.FieldInfo)
            Assert.True(eTag.IsNullable)
            Assert.True(eTag.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.OnAddOrUpdate, eTag.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Ignore, eTag.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Ignore, eTag.GetBeforeSaveBehavior())
            Assert.Equal("_etag", CosmosPropertyExtensions.GetJsonPropertyName(eTag))
            Assert.Null(eTag.GetValueGeneratorFactory())
            Assert.Null(eTag.GetValueConverter())
            Assert.NotNull(eTag.GetValueComparer())
            Assert.NotNull(eTag.GetKeyValueComparer())
            Assert.Equal("_etag", dataEntity.GetETagPropertyName())
            Assert.Same(eTag, dataEntity.GetETagProperty())

            Dim blob = dataEntity.FindProperty(NameOf(Data.Blob))
            Assert.Equal(GetType(Byte()), blob.ClrType)
            Assert.Equal(NameOf(Data.Blob), blob.PropertyInfo.Name)
            Assert.Equal("_Blob", blob.FieldInfo.Name)
            Assert.True(blob.IsNullable)
            Assert.False(blob.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.Never, blob.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Save, blob.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Save, blob.GetBeforeSaveBehavior())
            Assert.Equal("JsonBlob", CosmosPropertyExtensions.GetJsonPropertyName(blob))
            Assert.Null(blob.GetValueGeneratorFactory())
            Assert.Null(blob.GetValueConverter())
            Assert.NotNull(blob.GetValueComparer())
            Assert.NotNull(blob.GetKeyValueComparer())

            Dim jObject = dataEntity.FindProperty("__jObject")
            Assert.Equal(GetType(JObject), jObject.ClrType)
            Assert.Null(jObject.PropertyInfo)
            Assert.Null(jObject.FieldInfo)
            Assert.True(jObject.IsNullable)
            Assert.False(jObject.IsConcurrencyToken)
            Assert.Equal(ValueGenerated.OnAddOrUpdate, jObject.ValueGenerated)
            Assert.Equal(PropertySaveBehavior.Ignore, jObject.GetAfterSaveBehavior())
            Assert.Equal(PropertySaveBehavior.Ignore, jObject.GetBeforeSaveBehavior())
            Assert.Equal("", CosmosPropertyExtensions.GetJsonPropertyName(jObject))
            Assert.Null(jObject.GetValueGeneratorFactory())
            Assert.Null(jObject.GetValueConverter())
            Assert.NotNull(jObject.GetValueComparer())
            Assert.NotNull(jObject.GetKeyValueComparer())

            Assert.Equal(2, dataEntity.GetKeys().Count())

            Assert.Equal({id, partitionId, blob, storeId, jObject, eTag}, dataEntity.GetProperties())
        End Sub)
        End Sub

        Public Class CosmosContext
            Inherits DbContext

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                options.
                    EnableServiceProviderCaching(False).
                    UseCosmos("localhost", "_", "_")
            End Sub

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion)

                modelBuilder.HasDefaultContainer("Default")

                modelBuilder.Entity(Of Data)(Sub(eb)
                                                 eb.Property(Of Integer)("Id")
                                                 eb.Property(Of Long?)("PartitionId").HasConversion(Of String)()
                                                 eb.HasPartitionKey("PartitionId")
                                                 eb.HasKey("Id", "PartitionId")
                                                 eb.ToContainer("DataContainer")
                                                 eb.UseETagConcurrency()
                                                 eb.HasNoDiscriminator()
                                                 eb.Property(Function(d) d.Blob).ToJsonProperty("JsonBlob")
                                             End Sub)
            End Sub
        End Class

        Public Class Data
            Public Property Blob As Byte()
        End Class

        Public MustInherit Class ContextBase
            Inherits DbContext

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion)
            End Sub

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                options.EnableServiceProviderCaching(False).
                    UseInMemoryDatabase(NameOf(VisualBasicRuntimeModelCodeGeneratorTest))
            End Sub
        End Class

        Public MustInherit Class SqlServerContextBase
            Inherits DbContext

            Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion)
            End Sub

            Protected Overrides Sub OnConfiguring(options As DbContextOptionsBuilder)
                options.
                    EnableServiceProviderCaching(False).
                    UseSqlServer(Function(o) o.UseNetTopologySuite())
            End Sub
        End Class

        Protected Sub Test(context As DbContext,
                           options As CompiledModelCodeGenerationOptions,
                           Optional assertScaffold As Action(Of IReadOnlyCollection(Of ScaffoldedFile)) = Nothing,
                           Optional assertModel As Action(Of IModel) = Nothing,
                           Optional additionalDesignTimeServices As Type = Nothing,
                           Optional expectedExceptionMessage As String = Nothing)

            Dim model = context.GetService(Of IDesignTimeModel)().Model

            Dim services As New ServiceCollection()

            services.AddEntityFrameworkDesignTimeServices()

            Dim vbServices As New EFCoreVisualBasicServices
            vbServices.ConfigureDesignTimeServices(services)

            If additionalDesignTimeServices IsNot Nothing Then
                ConfigureDesignTimeServices(additionalDesignTimeServices, services)
            End If

            ConfigureProviderServices(context.GetService(Of IDatabaseProvider)().Name, services)
            ConfigureVisualBasicProviderServices(context.GetService(Of IDatabaseProvider)().Name, services)

            options.ModelNamespace = If(options.ModelNamespace, "TestNamespace")
            options.ContextType = context.GetType()

            Dim generator = services.
                                BuildServiceProvider(validateScopes:=True).
                                GetRequiredService(Of ICompiledModelCodeGeneratorSelector)().
                                Select(options)

            If expectedExceptionMessage IsNot Nothing Then
                Assert.Equal(expectedExceptionMessage,
                    Assert.Throws(Of InvalidOperationException)(Sub() generator.GenerateModel(model, options)).Message)
                Exit Sub
            End If

            Dim scaffoldedFiles = generator.GenerateModel(model, options)

            Dim build As New BuildSource With {
                .Sources = scaffoldedFiles.ToDictionary(Function(f) f.Path, Function(f) f.Code)
            }

            With build.References
                .Add(BuildReference.ByName("System.Linq"))
                .Add(BuildReference.ByName("System.Net.Primitives"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Abstractions"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Cosmos"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.InMemory"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Proxies"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Relational"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Sqlite"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.SqlServer"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite"))
                .Add(BuildReference.ByName("Microsoft.EntityFrameworkCore.Specification.Tests"))
                .Add(BuildReference.ByName("NetTopologySuite"))
                .Add(BuildReference.ByName("Newtonsoft.Json"))
                .Add(BuildReference.ByName(GetType(VisualBasicRuntimeModelCodeGeneratorTest).Assembly.GetName().Name))
                .Add(BuildReference.ByName(GetType(MyJsonGuidReaderWriter).Assembly.GetName().Name))
            End With

            Dim assembly = build.BuildInMemory()

            Dim modelTypeName = options.ContextType.Name & "Model"
            Dim modelType = assembly.GetType(
                If(String.IsNullOrEmpty(options.ModelNamespace),
                     modelTypeName,
                     options.ModelNamespace & "." & modelTypeName))
            Dim instancePropertyInfo = modelType.GetProperty("Instance", BindingFlags.Public Or BindingFlags.Static)
            Dim compiledModel = DirectCast(instancePropertyInfo.GetValue(Nothing), IModel)

            Dim ModelRuntimeInitializer = context.GetService(Of IModelRuntimeInitializer)()
            compiledModel = ModelRuntimeInitializer.Initialize(compiledModel, designTime:=False)
            assertModel(compiledModel)

            Dim RelationalModel = TryCast(context.Model.FindRuntimeAnnotationValue(RelationalAnnotationNames.RelationalModel), IRelationalModel)
            If RelationalModel IsNot Nothing Then
                Metadata.RelationalModelTest.AssertEqual(RelationalModel, compiledModel.GetRelationalModel())
            End If

            If assertScaffold IsNot Nothing Then
                assertScaffold(scaffoldedFiles)
            End If
        End Sub

        Private Sub ConfigureProviderServices(provider As String, services As IServiceCollection)
            Dim providerAssembly = Assembly.Load(New AssemblyName(provider))

            Dim providerServicesAttribute = providerAssembly.GetCustomAttribute(Of DesignTimeProviderServicesAttribute)
            If providerServicesAttribute Is Nothing Then
                Throw New InvalidOperationException(DesignStrings.CannotFindDesignTimeProviderAssemblyAttribute(provider))
            End If

            Dim designTimeServicesType = providerAssembly.GetType(
                providerServicesAttribute.TypeName,
                throwOnError:=True,
                ignoreCase:=False)

            ConfigureDesignTimeServices(designTimeServicesType, services)
        End Sub

        Private Sub ConfigureVisualBasicProviderServices(provider As String, services As IServiceCollection)

            Dim VBAssembly = Assembly.Load("EntityFrameworkCore.VisualBasic")

            Dim Types = VBAssembly.GetTypes().
                                        Where(Function(t) t.GetCustomAttributes(Of VisualBasicDesignTimeProviderServicesAttribute).
                                                            Any(Function(x) x.ProviderName IsNot Nothing AndAlso
                                                                            x.ProviderName = provider)).
                                        ToList()

            Types.ForEach(Sub(t) ConfigureDesignTimeServices(t, services))
        End Sub

        Private Shared Sub ConfigureDesignTimeServices(designTimeServicesType As Type,
                                                       services As IServiceCollection)
            Dim designTimeServices = DirectCast(Activator.CreateInstance(designTimeServicesType), IDesignTimeServices)
            designTimeServices.ConfigureDesignTimeServices(services)
        End Sub

        Protected Shared Sub AssertFileContents(expectedPath As String,
                                                expectedCode As String,
                                                file As ScaffoldedFile)

            Assert.Equal(expectedPath, file.Path)
            Assert.Equal(expectedCode, file.Code, ignoreLineEndingDifferences:=True)
        End Sub

        Private Function CreateCompiledModelCodeGenerationOptions() As CompiledModelCodeGenerationOptions
            Return New CompiledModelCodeGenerationOptions With {.Language = "VB"}
        End Function
    End Class

    Public Class Internal
        Public Property Id As Long
    End Class

    Public Class Index
        Public Property Id As Guid
    End Class

    Public Class IdentityUser
        Inherits TestModels.AspNetIdentity.IdentityUser
    End Class

    Public Class SelfReferentialEntity
        Public Property Id As Long

        Public Property Collection As SelfReferentialProperty
    End Class

    Public Class SelfReferentialProperty
        Inherits List(Of SelfReferentialProperty)
    End Class
End Namespace

Namespace Scaffolding.TestModel.Internal
    Public Class DbContext
        Inherits ContextBase

        Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)

            MyBase.OnModelCreating(modelBuilder)

            modelBuilder.Entity(Of Scaffolding.Internal.Index)()
            modelBuilder.Entity(Of TestModels.AspNetIdentity.IdentityUser)()
            modelBuilder.Entity(Of IdentityUser)(
            Sub(eb)
                eb.HasDiscriminator().HasValue("DerivedIdentityUser")
            End Sub)
            modelBuilder.Entity(Of Scaffolding.Internal.Internal)()
        End Sub
    End Class

    Public Class SelfReferentialDbContext
        Inherits ContextBase

        Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
            MyBase.OnModelCreating(modelBuilder)

            modelBuilder.Entity(Of Scaffolding.Internal.SelfReferentialEntity)(
                Sub(eb)
                    eb.Property(Function(e) e.Collection).HasConversion(GetType(SelfReferentialPropertyValueConverter))
                End Sub)
        End Sub
    End Class

    Public Class SelfReferentialPropertyValueConverter
        Inherits ValueConverter(Of Scaffolding.Internal.SelfReferentialProperty, String)

        Public Sub New()
            Me.New(Nothing)
        End Sub

        Public Sub New(hints As ConverterMappingHints)
            MyBase.New(Function(v) Nothing, Function(v) Nothing, hints)
        End Sub
    End Class
End Namespace
